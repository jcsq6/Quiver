; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT BSS
_hero:
	DS	6
_enemy:
	DS	6
_boundaries:
	DS	4800
_horizDistances:
	DS	4800
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <math.h>
;    6	#include <stdio.h>
;    7	#include <stdlib.h>
;    8	#include <string.h>
;    9	
;   10	#include <graphx.h>
;   11	#include <keypadc.h>
;   12	#include <debug.h>
;   13	
;   14	#include <compression.h>
;   15	
;   16	#include "gfx/gfx.h"
;   17	
;   18	bool isTouching(enum bodyParts part, bool checkForPad, int yVelocity, int xVelocity, int x, int y);
;   19	void establishAIView(int numOfMap);
;   20	
;   21	enum direction{
;   22		right,
;   23		left,
;   24		up,
;   25		down,
;   26		upLeft,
;   27		upRight,
;   28		downLeft,
;   29		downRight,
;   30		nothing
;   31	};
;   32	
;   33	enum bodyParts{
;   34		leftSide,
;   35		rightSide,
;   36		topHead,
;   37		bottomFeet
;   38	};
;   39	
;   40	struct enemyDatas{
;   41		gfx_point_t dest;
;   42		gfx_point_t pos;
;   43		enum direction dir;
;   44		gfx_sprite_t behindChar;
;   45	};
;   46	
;   47	gfx_point_t hero;
;   48	gfx_point_t enemy;
;   49	
;   50	bool boundaries[60][80];
;   51	bool horizDistances[60][80];
	SEGMENT CODE
;   52	
;   53	void main(void) {
_main:
	LD	HL,-233
	CALL	__frameset
;   54	
;   55		int x, y, i, mapNum, velocity;
;   56	
;   57		gfx_point_t lastStill;
;   58		gfx_point_t arrow, arrowInit;
;   59		gfx_point_t dot;
;   60	
;   61		struct enemyDatas enemy;
;   62	
;   63		gfx_sprite_t *map;
;   64	
;   65		gfx_sprite_t *HeroStill, *HeroLeft0, *HeroLeft1, *HeroLeft2, *HeroRight0, *HeroRight1, *HeroRight2,*HeroJumpRight0, *HeroJumpRight1, *HeroJumpRight2, *HeroJumpUpRight, *HeroJumpUpLeft, *HeroJumpLeft0, *HeroJumpLeft1, *HeroJumpLeft2, *arrowSpr, *behindArrow, *arrowSprLeft, *arrowSprTiltRight, *arrowSprTiltLeft, *behindDot;
;   66	
;   67		double distance, arrowDistance;
;   68		unsigned int step;
;   69	
;   70		enum direction jumpingDir;
;   71		enum direction shootingDir;
;   72	
;   73		bool doubleJumped, keyIsReleased, inLadder, facingRight, ascending, key, prevkey, isBoosted, tempBool1, tempBool2;
;   74	
;   75		bool alphaKey, leftKey, rightKey, downKey, upKey, modeKey, secondKey, shootingReleased, arrowTouchingBottom, arrowTouchingTip;
;   76	
;   77		gfx_sprite_t *heroRunRight[3];
;   78		gfx_sprite_t *heroRunLeft[3];
;   79	
;   80		gfx_sprite_t *heroJumpRight[3];
;   81	
;   82		gfx_sprite_t *behind_sprite;
;   83	
;   84		gfx_sprite_t *tempPerson;
;   85	
;   86		map = gfx_MallocSprite(80, 60);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,80
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-31),HL
;   87	
;   88		HeroStill = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-75),HL
;   89		HeroLeft0 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LEA	IY,IX+-128
;   90		HeroLeft1 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	(IY+-45),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LEA	IY,IX+-128
;   91		HeroLeft2 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	(IY+-48),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LEA	IY,IX+-128
;   92		HeroRight0 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	(IY+-24),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LEA	IY,IX+-128
;   93		HeroRight1 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	(IY+-8),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LEA	IY,IX+-128
;   94		HeroRight2 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	(IY+-1),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LEA	IY,IX+-128
;   95		HeroJumpRight0 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	(IY+-4),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-106),HL
;   96		HeroJumpRight1 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-112),HL
;   97		HeroJumpRight2 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-115),HL
;   98		HeroJumpUpRight = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-97),HL
;   99		HeroJumpUpLeft = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-123),HL
;  100		HeroJumpLeft0 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LEA	IY,IX+-128
;  101		HeroJumpLeft1 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	(IY+-11),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LEA	IY,IX+-128
;  102		HeroJumpLeft2 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	(IY+-18),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LEA	IY,IX+-128
;  103		behindArrow = gfx_MallocSprite(20, 4);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,4
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	(IY+-21),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-45),HL
;  104		arrowSpr = gfx_MallocSprite(20, 4);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,4
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-83),HL
;  105		arrowSprLeft = gfx_MallocSprite(20, 4);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,4
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-109),HL
;  106		arrowSprTiltLeft = gfx_MallocSprite(20, 4);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,4
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LEA	IY,IX+-128
;  107		arrowSprTiltRight = gfx_MallocSprite(20, 4);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,4
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	(IY+-54),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LEA	IY,IX+-128
;  108		behindDot = gfx_MallocSprite(4, 4);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	(IY+-51),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-120),HL
;  109	
;  110	
;  111		zx7_Decompress( HeroStill, HeroStill_compressed );
	LD	BC,_HeroStill_compressed
	PUSH	BC
	LD	BC,(IX+-75)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  112		zx7_Decompress( HeroRight0, HeroRight0_compressed );
	LD	BC,_HeroRight0_compressed
	PUSH	BC
	LEA	IY,IX+-128
	LD	BC,(IY+-8)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  113		zx7_Decompress( HeroRight1, HeroRight1_compressed );
	LD	BC,_HeroRight1_compressed
	PUSH	BC
	LEA	IY,IX+-128
	LD	BC,(IY+-1)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  114		zx7_Decompress( HeroRight2, HeroRight2_compressed );
	LD	BC,_HeroRight2_compressed
	PUSH	BC
	LEA	IY,IX+-128
	LD	BC,(IY+-4)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  115		zx7_Decompress( HeroJumpRight0, HeroJumpRight0_compressed );
	LD	BC,_HeroJumpRight0_compressed
	PUSH	BC
	LD	BC,(IX+-106)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  116		zx7_Decompress( HeroJumpRight1, HeroJumpRight1_compressed );
	LD	BC,_HeroJumpRight1_compressed
	PUSH	BC
	LD	BC,(IX+-112)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  117		zx7_Decompress( HeroJumpRight2, HeroJumpRight2_compressed );
	LD	BC,_HeroJumpRight2_compressed
	PUSH	BC
	LD	BC,(IX+-115)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  118		zx7_Decompress( HeroJumpUpRight, HeroJumpUpRight_compressed );
	LD	BC,_HeroJumpUpRight_compressed
	PUSH	BC
	LD	BC,(IX+-97)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  119		zx7_Decompress( arrowSpr, arrow_compressed );
	LD	BC,_arrow_compressed
	PUSH	BC
	LD	BC,(IX+-83)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  120	
;  121		gfx_FlipSpriteY(HeroRight0, HeroLeft0);
	LEA	IY,IX+-128
	LD	BC,(IY+-45)
	PUSH	BC
	LD	BC,(IY+-8)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  122		gfx_FlipSpriteY(HeroRight1, HeroLeft1);
	LEA	IY,IX+-128
	LD	BC,(IY+-48)
	PUSH	BC
	LD	BC,(IY+-1)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  123		gfx_FlipSpriteY(HeroRight2, HeroLeft2);
	LEA	IY,IX+-128
	LD	BC,(IY+-24)
	PUSH	BC
	LD	BC,(IY+-4)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  124		gfx_FlipSpriteY(HeroJumpRight0, HeroJumpLeft0);
	LEA	IY,IX+-128
	LD	BC,(IY+-11)
	PUSH	BC
	LD	BC,(IX+-106)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  125		gfx_FlipSpriteY(HeroJumpRight1, HeroJumpLeft1);
	LEA	IY,IX+-128
	LD	BC,(IY+-18)
	PUSH	BC
	LD	BC,(IX+-112)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  126		gfx_FlipSpriteY(HeroJumpRight2, HeroJumpLeft2);
	LEA	IY,IX+-128
	LD	BC,(IY+-21)
	PUSH	BC
	LD	BC,(IX+-115)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  127		gfx_FlipSpriteY(HeroJumpUpRight, HeroJumpUpLeft);
	LD	BC,(IX+-123)
	PUSH	BC
	LD	BC,(IX+-97)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  128		gfx_FlipSpriteY(arrowSpr, arrowSprLeft);
	LD	BC,(IX+-109)
	PUSH	BC
	LD	BC,(IX+-83)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  129	
;  130		velocity = 2;
	LD	BC,2
	LD	(IX+-51),BC
;  131	
;  132		jumpingDir = nothing;
	LD	BC,8
	LD	(IX+-36),BC
;  133	
;  134		ascending = doubleJumped = inLadder = isBoosted = keyIsReleased = false;
	LD	(IX+-41),0
	LD	(IX+-33),0
	LD	(IX+-25),0
	LD	(IX+-46),0
	LD	(IX+-32),0
;  135	
;  136		facingRight = shootingReleased = true;
	LD	(IX+-42),1
;  137	
;  138		heroRunRight[0] = HeroRight0;
	LEA	IY,IX+-128
	LD	BC,(IY+-8)
	LD	(IY+-72),BC
;  139		heroRunRight[1] = HeroRight1;
	LD	IY,IX
	LD	BC,-200
	ADD	IY,BC
	LEA	HL,IY+3
	LEA	IY,IX+-128
	LD	BC,(IY+-1)
;  140		heroRunRight[2] = HeroRight2;
	LD	IY,IX
	LD	DE,-200
	ADD	IY,DE
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-224	; spill
	CALL	__istix
	LEA	HL,IY+6	; unspill
	LD	BC,-227	; spill
	CALL	__istix
	POP	HL
	LD	BC,-224	; unspill
	PUSH	HL
	CALL	__ildix
	POP	HL
	POP	BC
	LEA	IY,IX+-128
	LD	(HL),BC
	LD	BC,(IY+-4)
	PUSH	BC
	LD	BC,-227	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	(IY),BC
;  141	
;  142		heroRunLeft[0] = HeroLeft0;
	LEA	IY,IX+-128
	LD	BC,(IY+-45)
	LD	(IY+-63),BC
;  143		heroRunLeft[1] = HeroLeft1;
	LD	IY,IX
	LD	BC,-191
	ADD	IY,BC
	LEA	HL,IY+3
	LEA	IY,IX+-128
	LD	BC,(IY+-48)
;  144		heroRunLeft[2] = HeroLeft2;
	LD	IY,IX
	LD	DE,-191
	ADD	IY,DE
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-224	; spill
	CALL	__istix
	LEA	HL,IY+6	; unspill
	LD	BC,-230	; spill
	CALL	__istix
	POP	HL
	LD	BC,-224	; unspill
	PUSH	HL
	CALL	__ildix
	POP	HL
	POP	BC
	LEA	IY,IX+-128
	LD	(HL),BC
	LD	BC,(IY+-24)
	PUSH	BC
	LD	BC,-230	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	(IY),BC
;  145	
;  146		heroJumpRight[0] = HeroJumpRight0;
	LD	BC,(IX+-106)
	LEA	IY,IX+-128
	LD	(IY+-81),BC
;  147		heroJumpRight[1] = HeroJumpRight1;
	LD	IY,IX
	LD	BC,-209
	ADD	IY,BC
	LEA	HL,IY+3
	LD	BC,(IX+-112)
	LD	(HL),BC
;  148		heroJumpRight[2] = HeroJumpRight2;
	LD	IY,IX
	LD	BC,(IX+-115)
;  149	
;  150		behind_sprite = gfx_MallocSprite(20, 40);
	LD	DE,_malloc
	PUSH	DE
	LD	DE,40
	PUSH	DE
	LD	DE,20
	PUSH	DE
	LD	DE,-209
	ADD	IY,DE
	LEA	HL,IY+6
	LD	(HL),BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-24),HL
;  151	
;  152		lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-12),BC
;  153		lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-9),BC
;  154	
;  155		arrow.x = 0;
	LD	BC,0
	LD	(IX+-6),BC
;  156		arrow.y = 0;
	LD	(IX+-3),BC
;  157	
;  158		arrowDistance = 80;
;  159	
;  160		shootingDir = nothing;
	LD	BC,8
	LD	(IX+-39),BC
;  161	
;  162		srand(rtc_Time());
	LD	BC,(15925316)
	PUSH	BC
	CALL	_srand
	POP	BC
;  163	
;  164		gfx_Begin();
	CALL	_gfx_Begin
;  165	
;  166		gfx_SetPalette(global_palette, sizeof_global_palette, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,130
	PUSH	BC
	LD	BC,_global_palette
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  167	
;  168		mapNum = 1;
	LD	BC,1
	LD	(IX+-15),BC
;  169	
;  170		gfx_FillScreen(1);
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  171	
;  172		zx7_Decompress( map, menu_compressed );
	LD	BC,_menu_compressed
	PUSH	BC
	LD	BC,(IX+-31)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  173		gfx_ScaledSprite_NoClip(map, 0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-31)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  174		while(!(kb_Data[6] & kb_Enter)){
L_1:
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_1
;  175		}
;  176		shootingReleased = false;
	LD	(IX+-48),0
;  177	
;  178		gfx_FillScreen(1);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  179	
;  180		while(!(kb_Data[6] & kb_Enter) || !shootingReleased ){
	JR	L_24
L_25:
;  181			kb_Scan();
	CALL	_kb_Scan
;  182	
;  183			if(!(kb_Data[6] & kb_Enter) && !shootingReleased) shootingReleased = true;
	LD	A,(16056348)
	AND	A,1
	JR	NZ,L_6
	LD	A,(IX+-48)
	OR	A,A
	JR	NZ,L_6
	LD	(IX+-48),1
L_6:
;  184	
;  185	   		key = kb_Data[7] == kb_Down;
	LD	A,(16056350)
	CP	A,1
	JR	NZ,L__4
	LD	A,1
	JR	L__5
L__4:
	XOR	A,A
L__5:
	LD	(IX+-94),A
;  186	
;  187			if(key && !prevkey) {
	OR	A,A
	JR	Z,L_12
	LEA	IY,IX+-128
	LD	A,(IY+-5)
	OR	A,A
	JR	NZ,L_12
;  188				if(mapNum == 5) mapNum = 0;
	LD	BC,5
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_10
	LD	BC,0
	LD	(IX+-15),BC
L_10:
;  189				mapNum++;
	LD	BC,(IX+-15)
	INC	BC
	LD	(IX+-15),BC
;  190				gfx_SetColor(1);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  191	
;  192				gfx_FillRectangle(0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  193				gfx_FillRectangle(0, 20, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  194				gfx_FillRectangle(0, 40, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  195				gfx_FillRectangle(0, 60, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  196				gfx_FillRectangle(0, 80, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  197	
;  198	
;  199				gfx_SetColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  200			}
L_12:
;  201	
;  202			gfx_PrintStringXY("Map1", 20, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__9
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  203			gfx_PrintStringXY("Map2", 20, 20);
	LD	BC,20
	PUSH	BC
	PUSH	BC
	LD	BC,L__10
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  204			gfx_PrintStringXY("Map3", 20, 40);
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__11
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  205			gfx_PrintStringXY("Map4", 20, 60);
	LD	BC,60
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__12
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  206			gfx_PrintStringXY("Map5", 20, 80);
	LD	BC,80
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__13
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  207	
;  208			if(mapNum == 1)	gfx_FillRectangle(0, 0, 4, 4);
	LD	HL,(IX+-15)
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_21
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  209			else if(mapNum == 2) gfx_FillRectangle(0, 20, 4, 4);			
	JR	L_22
L_21:
	LD	BC,2
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_19
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  210			else if(mapNum == 3) gfx_FillRectangle(0, 40, 4, 4);
	JR	L_22
L_19:
	LD	BC,3
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_17
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  211			else if(mapNum == 4) gfx_FillRectangle(0, 60, 4, 4);
	JR	L_22
L_17:
	LD	BC,4
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_15
	PUSH	BC
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  212			else if(mapNum == 5) gfx_FillRectangle(0, 80, 4, 4);
	JR	L_22
L_15:
	LD	BC,5
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_22
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_22:
;  213	
;  214			prevkey = key;
	LD	A,(IX+-94)
	LEA	IY,IX+-128
	LD	(IY+-5),A
;  215	
;  216			dbg_ClearConsole();
;  217			dbg_sprintf(dbgout, "%d", mapNum);
;  218		}
L_24:
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_25
	LD	A,(IX+-48)
	OR	A,A
	JR	Z,L_25
;  219	
;  220		if(mapNum == 1)	{
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_34
;  221			zx7_Decompress( map, map1_compressed );
	LD	BC,_map1_compressed
	PUSH	BC
	LD	BC,(IX+-31)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  222			hero.x = 0;
	LD	BC,0
	LD	(_hero),BC
;  223			hero.y = 150;
	LD	BC,150
	LD	(_hero+3),BC
;  224			enemy.pos.x = 200;
	LD	BC,200
	LD	(IX+-66),BC
;  225			enemy.pos.y = 150;
	LD	BC,150
	LD	(IX+-63),BC
;  226		}
;  227		else if(mapNum == 2) {
	JR	L_36
L_34:
	LD	BC,2
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_32
;  228			zx7_Decompress( map, map2_compressed );		
	LD	BC,_map2_compressed
	PUSH	BC
	LD	BC,(IX+-31)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  229			hero.x = 0;
	LD	BC,0
	LD	(_hero),BC
;  230			hero.y = 180;
	LD	BC,180
	LD	(_hero+3),BC
;  231			enemy.pos.x = 200;
	LD	BC,200
	LD	(IX+-66),BC
;  232			enemy.pos.y = 180;
	LD	BC,180
	LD	(IX+-63),BC
;  233		}
;  234		else if(mapNum == 3) {
	JR	L_36
L_32:
	LD	BC,3
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_30
;  235			zx7_Decompress( map, map3_compressed );
	LD	BC,_map3_compressed
	PUSH	BC
	LD	BC,(IX+-31)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  236			hero.x = 0;
	LD	BC,0
	LD	(_hero),BC
;  237			hero.y = 180;
	LD	BC,180
	LD	(_hero+3),BC
;  238			enemy.pos.x = 200;
	LD	BC,200
	LD	(IX+-66),BC
;  239			enemy.pos.y = 180;
	LD	BC,180
	LD	(IX+-63),BC
;  240		}
;  241		else if(mapNum == 4) {
	JR	L_36
L_30:
	LD	BC,4
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_28
;  242			zx7_Decompress( map, map4_compressed );
	LD	BC,_map4_compressed
	PUSH	BC
	LD	BC,(IX+-31)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  243			hero.x = 50;
	LD	BC,50
	LD	(_hero),BC
;  244			hero.y = 100;
	LD	BC,100
	LD	(_hero+3),BC
;  245			enemy.pos.x = 200;
	LD	BC,200
	LD	(IX+-66),BC
;  246			enemy.pos.y = 100;
	LD	BC,100
	LD	(IX+-63),BC
;  247		}		
;  248		else if(mapNum == 5) {
	JR	L_36
L_28:
	LD	BC,5
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_36
;  249			zx7_Decompress( map, map5_compressed );
	LD	BC,_map5_compressed
	PUSH	BC
	LD	BC,(IX+-31)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  250			hero.x = 80;
	LD	BC,80
	LD	(_hero),BC
;  251			hero.y = 180;
	LD	BC,180
	LD	(_hero+3),BC
;  252			enemy.pos.x = 200;
	LD	BC,200
	LD	(IX+-66),BC
;  253			enemy.pos.y = 180;
	LD	BC,180
	LD	(IX+-63),BC
;  254		}
L_36:
;  255	
;  256		enemy.dest.x = 0;
	LD	BC,0
	LD	(IX+-72),BC
;  257		enemy.dest.y = 0;
	LD	(IX+-69),BC
;  258	
;  259	
;  260		gfx_ScaledSprite_NoClip(map, 0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-31)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  261	
;  262		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  263		
;  264		gfx_SetTransparentColor(1);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTransparentColor
	POP	BC
;  265	
;  266		gfx_ScaledSprite_NoClip(map, 0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-31)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  267	
;  268		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  269	
;  270		establishAIView(mapNum);
	LD	BC,(IX+-15)
	PUSH	BC
	CALL	_establishAIView
	POP	BC
;  271		gfx_SetColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  272	
;  273		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  274		for(y = 0; x < 240; y += 4){
	LD	BC,0
	LD	(IX+-86),BC
	JR	L_42
L_40:
;  275			for(x = 0; y < 320; x += 4){
	LD	BC,0
	LD	(IX+-80),BC
	JR	L_39
L_37:
;  276				gfx_SetTextXY(x, y);
	LD	BC,(IX+-86)
	PUSH	BC
	LD	BC,(IX+-80)
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  277				gfx_PrintInt(horizDistances[y / 4][x / 4], 1);
	LD	BC,4
	LD	A,80
	LD	DE,_horizDistances
	LD	HL,1
	PUSH	HL
	LD	HL,(IX+-86)
	CALL	__idivs
	CALL	__imul_b
	ADD	HL,DE
	LD	DE,HL
	LD	HL,(IX+-80)
	LD	BC,4
	CALL	__idivs
	ADD	HL,DE
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
	LD	IY,(IX+-80)
	LEA	IY,IY+4
	LD	(IX+-80),IY
;  278			}
L_39:
	LD	BC,320
	LD	HL,(IX+-86)
	OR	A,A
	SBC	HL,BC
	JP	M,L_37
	LD	IY,(IX+-86)
	LEA	IY,IY+4
	LD	(IX+-86),IY
;  279		}
L_42:
	LD	BC,240
	LD	HL,(IX+-80)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_40
;  280		gfx_SetTextScale(1, 1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  281	
;  282		gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  283		gfx_GetSprite(behindArrow, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-45)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  284		gfx_TransparentSprite_NoClip(HeroStill, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-75)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  285	
;  286		while(!(kb_Data[6] & kb_Clear)){
	JR	L_387
L_388:
;  287	
;  288			kb_Scan();
	CALL	_kb_Scan
;  289	
;  290	
;  291			if(enemy.dest.x == 0 && enemy.dest.y == 0){
	LD	HL,(IX+-72)
	CALL	__icmpzero
	JR	NZ,L_74
	LD	HL,(IX+-69)
	CALL	__icmpzero
	JR	NZ,L_74
;  292				dot.x = 0;
	LD	BC,0
	LD	(IX+-21),BC
;  293				dot.y = 0;
	LD	(IX+-18),BC
;  294				gfx_GetSprite(behindDot, dot.x, dot.y);
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	LD	BC,(IX+-120)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  295				while(!kb_Data[6] & kb_Enter){
	JR	L_65
L_66:
;  296					kb_Scan();
	CALL	_kb_Scan
;  297					gfx_Sprite_NoClip(behindDot, dot.x, dot.y);
	LD	C,(IX+-18)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	LD	BC,(IX+-120)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  298	
;  299					upKey = kb_Data[7] & kb_Up;
	LD	A,(16056350)
	AND	A,8
	LD	(IX+-47),A
;  300					downKey = kb_Data[7] & kb_Down;
	LD	A,(16056350)
	AND	A,1
	LD	(IX+-93),A
;  301					leftKey = kb_Data[7] & kb_Left;
	LD	A,(16056350)
	AND	A,2
	LD	(IX+-76),A
;  302					rightKey = kb_Data[7] & kb_Right;
	LD	A,(16056350)
	AND	A,4
	LD	(IX+-54),A
;  303	
;  304					
;  305					if(upKey && dot.y != 0) dot.y--;
	LD	A,(IX+-47)
	OR	A,A
	JR	Z,L_55
	LD	HL,(IX+-18)
	CALL	__icmpzero
	JR	Z,L_55
	LD	BC,(IX+-18)
	DEC	BC
	LD	(IX+-18),BC
L_55:
;  306					if(downKey && dot.y != 236) dot.y++;
	LD	A,(IX+-93)
	OR	A,A
	JR	Z,L_59
	LD	BC,236
	LD	HL,(IX+-18)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_59
	LD	BC,(IX+-18)
	INC	BC
	LD	(IX+-18),BC
L_59:
;  307					if(leftKey && dot.x != 0) dot.x--;
	LD	A,(IX+-76)
	OR	A,A
	JR	Z,L_63
	LD	HL,(IX+-21)
	CALL	__icmpzero
	JR	Z,L_63
	LD	BC,(IX+-21)
	DEC	BC
	LD	(IX+-21),BC
L_63:
;  308					if(rightKey && dot.x != 316) dot.x++;
	LD	A,(IX+-54)
	OR	A,A
	JR	Z,L_64
	LD	BC,316
	LD	HL,(IX+-21)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_64
	LD	BC,(IX+-21)
	INC	BC
	LD	(IX+-21),BC
L_64:
;  309	
;  310					gfx_GetSprite(behindDot, dot.x, dot.y);
	LD	BC,(IX+-18)
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	LD	BC,(IX+-120)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  311					gfx_FillRectangle(dot.x, dot.y, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	LD	BC,(IX+-21)
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  312					gfx_BlitBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  313				}
L_65:
	LD	A,(16056348)
	OR	A,A
	JR	NZ,L_46
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-27),BC
	JR	L_47
L_46:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-27),BC
L_47:
	LEA	IY,IX+-128
	LD	A,(IY+-27)
	AND	A,1
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	NZ,L_66
;  314				enemy.dest.x = dot.x;
	LD	BC,(IX+-21)
	LD	(IX+-72),BC
;  315				enemy.dest.y = dot.y;
	LD	BC,(IX+-18)
	LD	(IX+-69),BC
;  316			}
L_74:
;  317	
;  318			//alphaKey = kb_Data[2] & kb_Alpha;
;  319			secondKey = kb_Data[1] & kb_2nd || kb_Data[2] & kb_Math;
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_70
	LD	A,(16056340)
	AND	A,64
	JR	Z,L_71
L_70:
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-30),BC
	JR	L_72
L_71:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-30),BC
L_72:
	LEA	IY,IX+-128
	LD	A,(IY+-30)
	LD	(IX+-53),A
;  320			modeKey = kb_Data[1] & kb_Mode || kb_Data[2] & kb_Recip;
	LD	A,(16056338)
	AND	A,64
	JR	NZ,L_76
	LD	A,(16056340)
	AND	A,32
	JR	Z,L_77
L_76:
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-33),BC
	JR	L_78
L_77:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-33),BC
L_78:
	LEA	IY,IX+-128
	LD	A,(IY+-33)
	LD	(IX+-52),A
;  321			upKey = kb_Data[7] & kb_Up || kb_Data[6] & kb_Sub;
	LD	A,(16056350)
	AND	A,8
	JR	NZ,L_81
	LD	A,(16056348)
	AND	A,4
	JR	Z,L_82
L_81:
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-36),BC
	JR	L_83
L_82:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-36),BC
L_83:
	LEA	IY,IX+-128
	LD	A,(IY+-36)
	LD	(IX+-47),A
;  322			downKey = kb_Data[7] & kb_Down || kb_Data[2] & kb_Ln;
	LD	A,(16056350)
	AND	A,1
	JR	NZ,L_86
	LD	A,(16056340)
	AND	A,4
	JR	Z,L_87
L_86:
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-39),BC
	JR	L_88
L_87:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-39),BC
L_88:
	LEA	IY,IX+-128
	LD	A,(IY+-39)
	LD	(IX+-93),A
;  323			leftKey = kb_Data[7] & kb_Left;
	LD	A,(16056350)
	AND	A,2
	LD	(IX+-76),A
;  324			rightKey = kb_Data[7] & kb_Right;
	LD	A,(16056350)
	AND	A,4
	LD	(IX+-54),A
;  325	
;  326			if(shootingDir == nothing && (rightKey || leftKey) && shootingReleased){
	LD	HL,(IX+-39)
	OR	A,A
	LD	BC,8
	SBC	HL,BC
	JR	NZ,L_155
	LD	A,(IX+-54)
	OR	A,A
	JR	NZ,L_92
	LD	A,(IX+-76)
	OR	A,A
	JR	Z,L_155
L_92:
	LD	A,(IX+-48)
	OR	A,A
	JR	Z,L_155
;  327				gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  328				gfx_Sprite(behindArrow, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-45)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  329				gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  330				
;  331				shootingReleased = false;
	LD	(IX+-48),0
;  332				if(rightKey) {
	LD	A,(IX+-54)
	OR	A,A
	JR	Z,L_105
;  333					shootingDir = right;
	LD	BC,0
	LD	(IX+-39),BC
;  334					arrow.x = hero.x + 20;
	LD	IY,(_hero)
	LEA	BC,IY+20
	LD	(IX+-6),BC
;  335					arrow.y = hero.y + 8;
	LD	IY,(_hero+3)
	LEA	BC,IY+8
	LD	(IX+-3),BC
;  336					arrowInit.x = hero.x + 20;
	LD	IY,(_hero)
	LEA	BC,IY+20
	LD	(IX+-103),BC
;  337					arrowInit.y = hero.y + 8;
	LD	IY,(_hero+3)
	LEA	IY,IY+8
	LD	(IX+-100),IY
;  338					if(arrow.x >= 300){
	LD	HL,(IX+-6)
	LD	BC,300
	OR	A,A
	SBC	HL,BC
	JP	M,L_99
;  339						arrow.x -= arrow.x - 301;
	LD	BC,16776915
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-6),HL
;  340						if(mapNum == 4) arrow.x = 284;
	LD	HL,(IX+-15)
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_94
	LD	BC,284
	LD	(IX+-6),BC
L_94:
;  341						shootingDir = nothing;
	LD	BC,8
	LD	(IX+-39),BC
;  342						gfx_ScaledSprite_NoClip(map, 0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-31)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  343						gfx_GetSprite(behindArrow, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-45)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  344						gfx_TransparentSprite(arrowSpr, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-83)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  345						gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  346						gfx_TransparentSprite_NoClip(HeroStill, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-75)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  347						goto pastDisplaySprite;
	JR	L_155
;  348					}
;  349					else if(mapNum == 4 && arrow.x > 300) arrow.x += arrow.x - 300;
L_99:
	LD	BC,4
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_105
	LD	BC,(IX+-6)
	LD	HL,300
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_105
	LD	HL,(IX+-6)
	LD	BC,(IX+-6)
	LD	DE,16776916
	ADD	HL,DE
	ADD	HL,BC
	LD	(IX+-6),HL
;  350				}
L_105:
;  351				if(leftKey) {
	LD	A,(IX+-76)
	OR	A,A
	JR	Z,L_106
;  352					shootingDir = left;
	LD	BC,1
	LD	(IX+-39),BC
;  353					arrow.x = hero.x - 20;
	LD	IY,(_hero)
	LEA	BC,IY+-20
	LD	(IX+-6),BC
;  354					arrow.y = hero.y + 8;
	LD	IY,(_hero+3)
	LEA	BC,IY+8
	LD	(IX+-3),BC
;  355					arrowInit.x = hero.x - 20;
	LD	IY,(_hero)
	LEA	BC,IY+-20
	LD	(IX+-103),BC
;  356					arrowInit.y = hero.y + 8;
	LD	IY,(_hero+3)
	LEA	IY,IY+8
	LD	(IX+-100),IY
;  357					if(arrow.x < 0){
	LD	HL,(IX+-6)
	CALL	__icmpzero
	JP	P,L_106
;  358						arrow.x += 0 - arrow.x;
	LD	HL,(IX+-6)
	CALL	__ineg
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	(IX+-6),HL
;  359						if(mapNum == 4) arrow.x = 20;
	LD	HL,(IX+-15)
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_102
	LD	BC,20
	LD	(IX+-6),BC
L_102:
;  360						shootingDir = nothing;
	LD	BC,8
	LD	(IX+-39),BC
;  361						gfx_ScaledSprite_NoClip(map, 0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-31)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  362						gfx_GetSprite(behindArrow, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-45)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  363						gfx_TransparentSprite(arrowSprLeft, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-109)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  364						gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  365						gfx_TransparentSprite_NoClip(HeroStill, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-75)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  366						goto pastDisplaySprite;
	JR	L_155
;  367					}
;  368				}
L_106:
;  369				gfx_GetSprite(behindArrow, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-45)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  370				pastDisplaySprite:
;  371					0;
;  372			}
L_155:
;  373			if(shootingDir != nothing){
	LD	BC,8
	LD	HL,(IX+-39)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_159
;  374				gfx_Sprite_NoClip(behindArrow, arrow.x, arrow.y);
	LD	C,(IX+-3)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-45)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  375				if(shootingDir == right){
	LD	HL,(IX+-39)
	CALL	__icmpzero
	JR	NZ,L_112
;  376					arrow.x += 4;
	LD	IY,(IX+-6)
	LEA	IY,IY+4
	LD	(IX+-6),IY
;  377					arrowDistance = arrow.x - arrowInit.x;
	LD	BC,(IX+-103)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	CALL	__itol
	CALL	__ltof
	LD	(IX+-90),BC
	LD	(IX+-87),A
;  378					if(arrowDistance >= 100) arrow.y = arrowInit.y + floor((arrowDistance - 100)*(arrowDistance - 100) / 1000 + 10);
	LD	HL,BC
	LD	BC,13107200
	LD	E,(IX+-87)
	LD	A,66
	CALL	__fcmp
	JP	M,L_112
	LD	HL,13107200
	LD	E,66
	LD	BC,(IX+-90)
	LD	A,(IX+-87)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
	CALL	__fmul
	LD	HL,7995392
	LD	E,68
	CALL	__fdiv
	LD	HL,2097152
	LD	E,65
	CALL	__fadd
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-233
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_floor
	PUSH	BC
	LD	BC,-233
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-100)
	CALL	__itol
	CALL	__ltof
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-82),H
	LD	(IY+-90),E	; unspill
	LD	H,(IY+-82)
	LD	(IY+-86),HL
	LD	(IY+-93),HL	; unspill
	LD	HL,(IY+-86)
	POP	IY
	LD	HL,BC
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-82),H
	LD	H,(IY+-90)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-82)
	LD	(IY+-86),HL
	LD	HL,(IY+-93)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-86)
	POP	IY
	CALL	__fadd
	CALL	__ftol
	LD	(IX+-3),BC
;  379				}
L_112:
;  380				if(shootingDir == left){
	LD	BC,1
	LD	HL,(IX+-39)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__64
	LD	A,1
	JR	L__65
L__64:
	XOR	A,A
L__65:
	LD	(IX+-116),A
	OR	A,A
	JR	NZ,L_113
;  381					arrow.x -= 4;
	LD	IY,(IX+-6)
	LEA	IY,IY+-4
	LD	(IX+-6),IY
;  382					arrowDistance = arrowInit.x -  arrow.x;
	LD	BC,IY
	LD	HL,(IX+-103)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	CALL	__itol
	CALL	__ltof
	LD	(IX+-90),BC
	LD	(IX+-87),A
;  383					if(arrowDistance >= 100) arrow.y = arrowInit.y + floor((arrowDistance - 100)*(arrowDistance - 100) / 1000 + 10);
	LD	HL,BC
	LD	BC,13107200
	LD	E,(IX+-87)
	LD	A,66
	CALL	__fcmp
	JP	M,L_113
	LD	HL,13107200
	LD	E,66
	LD	BC,(IX+-90)
	LD	A,(IX+-87)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
	CALL	__fmul
	LD	HL,7995392
	LD	E,68
	CALL	__fdiv
	LD	HL,2097152
	LD	E,65
	CALL	__fadd
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-233
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_floor
	PUSH	BC
	LD	BC,-233
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-100)
	CALL	__itol
	CALL	__ltof
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-82),H
	LD	(IY+-83),E	; unspill
	LD	H,(IY+-82)
	LD	(IY+-86),HL
	LD	(IY+-89),HL	; unspill
	LD	HL,(IY+-86)
	POP	IY
	LD	HL,BC
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-82),H
	LD	H,(IY+-83)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-82)
	LD	(IY+-86),HL
	LD	HL,(IY+-89)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-86)
	POP	IY
	CALL	__fadd
	CALL	__ftol
	LD	(IX+-3),BC
;  384				}
L_113:
;  385				gfx_GetSprite(behindArrow, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-45)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  386				if(shootingDir == right) gfx_TransparentSprite(arrowSpr, arrow.x, arrow.y);
	LD	HL,(IX+-39)
	CALL	__icmpzero
	JR	NZ,L_116
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-83)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
L_116:
;  387				if(shootingDir == left) gfx_TransparentSprite(arrowSprLeft, arrow.x, arrow.y);
	LD	A,(IX+-116)
	OR	A,A
	JR	NZ,L_153
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-109)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
L_153:
;  388				for(i = 0; i <= 20; i += 4){
	LD	BC,0
	LD	(IX+-28),BC
	JR	L_152
L_150:
;  389					arrowTouchingTip = gfx_GetPixel(arrow.x+i, arrow.y - 1) == 0 || gfx_GetPixel(arrow.x+i, arrow.y) == 0 || gfx_GetPixel(arrow.x+i, arrow.y + 1) == 0 || gfx_GetPixel(arrow.x+i, arrow.y + 2) == 0;
	LD	C,(IX+-3)
	DEC	C
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-28)
	LD	HL,(IX+-6)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_120
	LD	C,(IX+-3)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-28)
	LD	HL,(IX+-6)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_120
	LD	C,(IX+-3)
	INC	C
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-28)
	LD	HL,(IX+-6)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_120
	LD	C,(IX+-3)
	INC	C
	INC	C
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-28)
	LD	HL,(IX+-6)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_121
L_120:
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-42),BC
	JR	L_122
L_121:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-42),BC
L_122:
	LEA	IY,IX+-128
	LD	A,(IY+-42)
	LD	(IX+-92),A
;  390					arrowTouchingBottom = gfx_GetPixel(arrow.x+i, arrow.y + 3) == 0;
	LD	A,(IX+-3)
	ADD	A,3
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-28)
	LD	HL,(IX+-6)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L__75
	LD	A,1
	JR	L__76
L__75:
	XOR	A,A
L__76:
	LD	(IX+-91),A
;  391					if(arrowTouchingTip || arrow.x < 0 || arrow.y < 0 || arrow.y > 240 || arrow.x > 300 || arrowTouchingBottom) {
	LD	A,(IX+-92)
	OR	A,A
	JR	NZ,L_149
	LD	HL,(IX+-6)
	CALL	__icmpzero
	JP	M,L_149
	LD	HL,(IX+-3)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_149
	LD	BC,(IX+-3)
	LD	HL,240
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_149
	LD	BC,(IX+-6)
	LD	HL,300
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_149
	LD	A,(IX+-91)
	OR	A,A
	JR	Z,L_151
L_149:
;  392						//dbg_ClearConsole();
;  393						//dbg_sprintf(dbgout, "i = %d\n", i);
;  394						//dbg_sprintf(dbgout, "arrowTouchingTip = %d\n", arrowTouchingTip);
;  395						//dbg_sprintf(dbgout, "arrowTouchingBottom = %d\n", arrowTouchingBottom);
;  396						//while(!os_GetCSC());
;  397						if(shootingDir == right && i <= 16 && !(arrow.x > 300) && !(arrow.x < 0) && !(arrow.y < 0) && !(arrow.y > 240) && arrowTouchingTip && (!arrowTouchingBottom || i >= 3))	{
	LD	HL,(IX+-39)
	CALL	__icmpzero
	JR	NZ,L_147
	LD	BC,(IX+-28)
	LD	HL,16
	OR	A,A
	SBC	HL,BC
	JP	M,L_147
	LD	BC,(IX+-6)
	LD	HL,300
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_147
	LD	HL,(IX+-6)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_147
	LD	HL,(IX+-3)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_147
	LD	BC,(IX+-3)
	LD	HL,240
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_147
	LD	A,(IX+-92)
	OR	A,A
	JR	Z,L_147
	LD	A,(IX+-91)
	OR	A,A
	JR	Z,L_137
	LD	BC,3
	LD	HL,(IX+-28)
	OR	A,A
	SBC	HL,BC
	JP	M,L_147
L_137:
;  398							arrow.x -= 20 - i;
	LD	HL,20
	LD	BC,(IX+-28)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-6),HL
;  399	
;  400							gfx_ScaledSprite_NoClip(map, 0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-31)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  401							gfx_GetSprite(behindArrow, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-45)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  402							gfx_TransparentSprite(arrowSpr, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-83)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  403							gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  404							gfx_TransparentSprite_NoClip(HeroStill, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-75)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  405	
;  406						}
L_147:
;  407						if(shootingDir == left && i >= 2 && !(arrow.x > 300) && !(arrow.x < 0) && !(arrow.y < 0) && !(arrow.y > 240) && arrowTouchingTip && (!arrowTouchingBottom || i >= 3)) {
	LD	BC,1
	LD	HL,(IX+-39)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_148
	LD	BC,2
	LD	HL,(IX+-28)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_148
	LD	BC,(IX+-6)
	LD	HL,300
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_148
	LD	HL,(IX+-6)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_148
	LD	HL,(IX+-3)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_148
	LD	BC,(IX+-3)
	LD	HL,240
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_148
	LD	A,(IX+-92)
	OR	A,A
	JR	Z,L_148
	LD	A,(IX+-91)
	OR	A,A
	JR	Z,L_146
	LD	BC,3
	LD	HL,(IX+-28)
	OR	A,A
	SBC	HL,BC
	JP	M,L_148
L_146:
;  408							arrow.x += i;
	LD	BC,(IX+-28)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-6),HL
;  409	
;  410							gfx_ScaledSprite_NoClip(map, 0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-31)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  411							gfx_GetSprite(behindArrow, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-45)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  412							gfx_TransparentSprite(arrowSprLeft, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-109)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  413							gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  414							gfx_TransparentSprite_NoClip(HeroStill, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-75)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  415						}
L_148:
;  416						shootingDir = nothing;
	LD	BC,8
	LD	(IX+-39),BC
;  417						arrowDistance = 80;
	LD	BC,10485760
	LD	(IX+-90),BC
	LD	A,66
	LD	(IX+-87),A
;  418						break;
	JR	L_159
;  419					}
;  420				}
L_151:
	LD	IY,(IX+-28)
	LEA	IY,IY+4
	LD	(IX+-28),IY
L_152:
	LD	BC,(IX+-28)
	LD	HL,20
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_150
;  421			}
L_159:
;  422	
;  423			if(!rightKey && !leftKey && !shootingReleased) {
	LD	A,(IX+-54)
	OR	A,A
	JR	NZ,L_160
	LD	A,(IX+-76)
	OR	A,A
	JR	NZ,L_160
	LD	A,(IX+-48)
	OR	A,A
	JR	NZ,L_160
;  424				shootingReleased = true;
	LD	(IX+-48),1
;  425			}
L_160:
;  426			
;  427			tempBool1 = isTouching(bottomFeet, false, velocity - 1, 0, hero.x , hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+-51)
	DEC	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-77),A
;  428			tempBool2 = isTouching(bottomFeet, false, 0, 0, hero.x , hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-40),A
;  429			velocity = (hero.y - lastStill.y ) / 50 + 2;
	LD	HL,(_hero+3)
	LD	BC,(IX+-9)
	OR	A,A
	SBC	HL,BC
	LD	BC,50
	CALL	__idivs
	INC	HL
	INC	HL
	LD	(IX+-51),HL
;  430	
;  431			dbg_ClearConsole();
;  432			dbg_sprintf(dbgout, "hero = (%d, %d)\n", hero.x, hero.y);
;  433			dbg_sprintf(dbgout, "velocity = %d\n", velocity);
;  434			dbg_sprintf(dbgout, "keyIsReleased = %d\n", keyIsReleased);
;  435			dbg_sprintf(dbgout, "ascending = %d\n", ascending);
;  436			dbg_sprintf(dbgout, "inLadder = %d\n", inLadder);
;  437			dbg_sprintf(dbgout, "doubleJumped = %d\n", doubleJumped);
;  438			dbg_sprintf(dbgout, "jumpingDir = %d\n", jumpingDir);
;  439			dbg_sprintf(dbgout, "tempBool1 = %d\n", tempBool1);
;  440			dbg_sprintf(dbgout, "tempBool2 = %d\n", tempBool2);
;  441			dbg_sprintf(dbgout, "shootingDir = %d\n", shootingDir);
;  442			dbg_sprintf(dbgout, "arrowInit = (%d, %d)\n", arrowInit.x, arrowInit.y);
;  443	
;  444			if(((modeKey && !isTouching(rightSide, false, 0, 1, hero.x , hero.y)) || (secondKey && !isTouching(leftSide, false, 0, -1, hero.x , hero.y))) && jumpingDir == nothing && !(inLadder && hero.y < 59 && hero.y > 41 && mapNum == 1) && !isBoosted && !ascending)  {
	LD	A,(IX+-52)
	OR	A,A
	JR	Z,L_184
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_185
L_184:
	LD	A,(IX+-53)
	OR	A,A
	JR	Z,L_384
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,16777215
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_384
L_185:
	LD	BC,8
	LD	HL,(IX+-36)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_384
	LD	A,(IX+-25)
	OR	A,A
	JR	Z,L_190
	LD	BC,59
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JP	P,L_190
	LD	BC,(_hero+3)
	LD	HL,41
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_190
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_384
L_190:
	LD	A,(IX+-33)
	OR	A,A
	JR	NZ,L_384
	LD	A,(IX+-32)
	OR	A,A
	JR	NZ,L_384
;  445				gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  446	
;  447				//IF RIGHT IS PRESSED
;  448				if(modeKey || rightKey) {
	LD	A,(IX+-52)
	OR	A,A
	JR	NZ,L_201
	LD	A,(IX+-54)
	OR	A,A
	JR	Z,L_202
L_201:
;  449					facingRight = true;
	LD	(IX+-42),1
;  450					if(upKey && (!inLadder || (mapNum == 1 && hero.y == 40) || (mapNum == 2 && hero.y == 120))) {
	LD	A,(IX+-47)
	OR	A,A
	JR	Z,L_200
	LD	A,(IX+-25)
	OR	A,A
	JR	Z,L_199
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_196
	LD	BC,40
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_199
L_196:
	LD	BC,2
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_200
	LD	BC,120
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_200
L_199:
;  451						jumpingDir = right;
	LD	BC,0
	LD	(IX+-36),BC
;  452						ascending = true;
	LD	(IX+-32),1
;  453						keyIsReleased = false;
	LD	(IX+-41),0
;  454						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-12),BC
;  455						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-9),BC
;  456						if(!tempBool2) doubleJumped = true;
	LD	A,(IX+-40)
	OR	A,A
	JR	NZ,L_200
	LD	(IX+-46),1
;  457					}
L_200:
;  458					hero.x += 2;
	LD	IY,(_hero)
	LEA	BC,IY+2
	LD	(_hero),BC
;  459				};
L_202:
;  460				//IF LEFT IS PRESSED
;  461				if(secondKey){ 
	LD	A,(IX+-53)
	OR	A,A
	JR	Z,L_228
;  462					facingRight = false;
	LD	(IX+-42),0
;  463					if(upKey && (!inLadder || (mapNum == 1 && hero.y == 40) || (mapNum == 2 && hero.y == 120))) {
	LD	A,(IX+-47)
	OR	A,A
	JR	Z,L_210
	LD	A,(IX+-25)
	OR	A,A
	JR	Z,L_209
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_206
	LD	BC,40
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_209
L_206:
	LD	BC,2
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_210
	LD	BC,120
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_210
L_209:
;  464						jumpingDir = left;
	LD	BC,1
	LD	(IX+-36),BC
;  465						ascending = true;
	LD	(IX+-32),1
;  466						keyIsReleased = false;
	LD	(IX+-41),0
;  467	
;  468						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-12),BC
;  469						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-9),BC
;  470						if(!tempBool2) doubleJumped = true;
	LD	A,(IX+-40)
	OR	A,A
	JR	NZ,L_210
	LD	(IX+-46),1
;  471					}				
L_210:
;  472					hero.x -= 2;
	LD	IY,(_hero)
	LEA	BC,IY+-2
	LD	(_hero),BC
;  473				}
L_228:
;  474	
;  475				//IF IS IN AIR
;  476				if(!tempBool2 && !inLadder){
	LD	A,(IX+-40)
	OR	A,A
	JR	NZ,L_227
	LD	A,(IX+-25)
	OR	A,A
	JR	NZ,L_227
;  477						if(!tempBool1)	hero.y += velocity;
	LD	A,(IX+-77)
	OR	A,A
	JR	NZ,L_217
	LD	BC,(IX+-51)
	LD	HL,(_hero+3)
	ADD	HL,BC
	LD	(_hero+3),HL
;  478						else if(!tempBool2 && tempBool1) hero.y++;
	JR	L_220
L_217:
	LD	A,(IX+-40)
	OR	A,A
	JR	NZ,L_220
	LD	A,(IX+-77)
	OR	A,A
	JR	Z,L_220
	LD	BC,(_hero+3)
	INC	BC
	LD	(_hero+3),BC
L_220:
;  479	
;  480						if(isTouching(rightSide, false, 0, 0, hero.x , hero.y)) hero.x--;
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_223
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
L_223:
;  481						if(isTouching(leftSide, false, 0, 0, hero.x , hero.y)) hero.x++;
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_230
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
;  482				}
;  483				else if(!inLadder && tempBool2){
	JR	L_230
L_227:
	LD	A,(IX+-25)
	OR	A,A
	JR	NZ,L_230
	LD	A,(IX+-40)
	OR	A,A
	JR	Z,L_230
;  484					lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-9),BC
;  485				}
L_230:
;  486	
;  487				if(isTouching(bottomFeet, true, 0, 0, hero.x , hero.y)) {
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_231
;  488					isBoosted = true;
	LD	(IX+-33),1
;  489					ascending = true;
	LD	(IX+-32),1
;  490					lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-12),BC
;  491					lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-9),BC
;  492				}
L_231:
;  493	
;  494				inLadder = false;
	LD	(IX+-25),0
;  495				if((hero.x >= 106 && hero.x <= 136 && hero.y >= 39 && hero.y <= 140 && mapNum == 1) || (hero.x >= 271 && mapNum == 2 && hero.y >= 120)) inLadder = true;
	LD	HL,(_hero)
	LD	BC,106
	OR	A,A
	SBC	HL,BC
	JP	M,L_238
	LD	BC,(_hero)
	LD	HL,136
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_238
	LD	BC,39
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_238
	LD	BC,(_hero+3)
	LD	HL,140
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_238
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_239
L_238:
	LD	BC,271
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_241
	LD	BC,2
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_241
	LD	BC,120
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_241
L_239:
	LD	(IX+-25),1
L_241:
;  496	
;  497				if(hero.x < 0) hero.x = 0;
	LD	HL,(_hero)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_243
	LD	BC,0
	LD	(_hero),BC
L_243:
;  498				if(hero.x > 300) hero.x = 300;
	LD	BC,(_hero)
	LD	HL,300
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_244
	LD	BC,300
	LD	(_hero),BC
L_244:
;  499	
;  500				gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  501	
;  502				if(modeKey){
	LD	A,(IX+-52)
	OR	A,A
	JR	Z,L_247
;  503					distance = hero.x - lastStill.x;
	LD	HL,(_hero)
	LD	BC,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	CALL	__itol
	CALL	__ltof
	LD	HL,BC
	LD	BC,-143
	LD	E,A
	CALL	__lstix
;  504					step = floor(distance/6);
	LD	BC,-143
	CALL	__lldix
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,64
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_floor
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	CALL	__ftol
	LD	(IX+-126),BC
;  505	
;  506					gfx_TransparentSprite_NoClip(heroRunRight[ step % 3 ], hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,3
	LD	DE,(_hero)
	PUSH	DE
	LD	HL,(IX+-126)
	CALL	__iremu
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,IX
	LD	DE,-200
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  507				}
L_247:
;  508				if(secondKey){
	LD	A,(IX+-53)
	OR	A,A
	JR	Z,L_386
;  509					distance = lastStill.x - hero.x;
	LD	BC,(_hero)
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	CALL	__itol
	CALL	__ltof
	LD	HL,BC
	LD	BC,-143
	LD	E,A
	CALL	__lstix
;  510					step = floor(distance/6);
	LD	BC,-143
	CALL	__lldix
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,64
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_floor
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	CALL	__ftol
	LD	(IX+-126),BC
;  511	
;  512					gfx_TransparentSprite_NoClip(heroRunLeft[ step % 3 ], hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,3
	LD	DE,(_hero)
	PUSH	DE
	LD	HL,(IX+-126)
	CALL	__iremu
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,IX
	LD	DE,-191
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  513				}
;  514	
;  515			}
;  516			//IF NOTHING IS PRESSED
;  517			else{
	JR	L_386
L_384:
;  518	
;  519				gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  520	
;  521	
;  522				//IF IS IN AIR
;  523				if(!tempBool2 && !inLadder && !ascending){
	LD	A,(IX+-40)
	OR	A,A
	JR	NZ,L_267
	LD	A,(IX+-25)
	OR	A,A
	JR	NZ,L_267
	LD	A,(IX+-32)
	OR	A,A
	JR	NZ,L_267
;  524	
;  525						if(!tempBool1)	hero.y += velocity;
	LD	A,(IX+-77)
	OR	A,A
	JR	NZ,L_254
	LD	BC,(IX+-51)
	LD	HL,(_hero+3)
	ADD	HL,BC
	LD	(_hero+3),HL
;  526						else if(!tempBool2 && tempBool1) hero.y++;
	JR	L_257
L_254:
	LD	A,(IX+-40)
	OR	A,A
	JR	NZ,L_257
	LD	A,(IX+-77)
	OR	A,A
	JR	Z,L_257
	LD	BC,(_hero+3)
	INC	BC
	LD	(_hero+3),BC
L_257:
;  527	
;  528						if(isTouching(rightSide, false, 0, 0, hero.x , hero.y)) hero.x--;
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_260
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
L_260:
;  529						if(isTouching(leftSide, false, 0, 0, hero.x , hero.y)) hero.x++;
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_261
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
L_261:
;  530						gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  531				}
;  532				else if(tempBool2 && !inLadder && !ascending){
	JR	L_280
L_267:
	LD	A,(IX+-40)
	OR	A,A
	JR	Z,L_280
	LD	A,(IX+-25)
	OR	A,A
	JR	NZ,L_280
	LD	A,(IX+-32)
	OR	A,A
	JR	NZ,L_280
;  533					jumpingDir = nothing;
	LD	BC,8
	LD	(IX+-36),BC
;  534					doubleJumped = false;
	LD	(IX+-46),0
;  535					keyIsReleased = false;
	LD	(IX+-41),0
;  536					if(isTouching(bottomFeet, true, 0, 0, hero.x , hero.y)) {
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_280
;  537						isBoosted = true;
	LD	(IX+-33),1
;  538						ascending = true;
	LD	(IX+-32),1
;  539						jumpingDir = nothing;
	LD	BC,8
	LD	(IX+-36),BC
;  540						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-12),BC
;  541						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-9),BC
;  542						doubleJumped = false;
	LD	(IX+-46),0
;  543					}	
;  544				}
L_280:
;  545	
;  546				//IF ASCENDING
;  547				if(ascending){
	LD	A,(IX+-32)
	OR	A,A
	JR	Z,L_293
;  548					inLadder = false;
	LD	(IX+-25),0
;  549					if(!isBoosted) velocity = -2;
	LD	A,(IX+-33)
	OR	A,A
	JR	NZ,L_269
	LD	BC,16777214
	LD	(IX+-51),BC
;  550					else velocity = -10;
	JR	L_271
L_269:
	LD	BC,16777206
	LD	(IX+-51),BC
L_271:
;  551	
;  552					if(!isTouching(topHead, false, velocity + 1, 0, hero.x , hero.y)) hero.y += velocity;
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+-51)
	INC	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_277
	LD	BC,(IX+-51)
	LD	HL,(_hero+3)
	ADD	HL,BC
	LD	(_hero+3),HL
L_277:
;  553					if(((lastStill.y - hero.y > 25 && !isBoosted) || (lastStill.y - hero.y > 160 && isBoosted)) || isTouching(topHead, false, velocity + 1, 0, hero.x , hero.y)) {
	LD	BC,(_hero+3)
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,25
	OR	A,A
	SBC	HL,BC
	JP	P,L_274
	LD	A,(IX+-33)
	OR	A,A
	JR	Z,L_276
L_274:
	LD	BC,(_hero+3)
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,160
	OR	A,A
	SBC	HL,BC
	JP	P,L_275
	LD	A,(IX+-33)
	OR	A,A
	JR	NZ,L_276
L_275:
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+-51)
	INC	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_278
L_276:
;  554						ascending = false;
	LD	(IX+-32),0
;  555						isBoosted = false;
	LD	(IX+-33),0
;  556						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-12),BC
;  557						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-9),BC
;  558					}
L_278:
;  559					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  560				}
L_293:
;  561	
;  562				//MOVING LADDER
;  563				if(inLadder && upKey && !secondKey && !modeKey){
	LD	A,(IX+-25)
	OR	A,A
	JR	Z,L_292
	LD	A,(IX+-47)
	OR	A,A
	JR	Z,L_292
	LD	A,(IX+-53)
	OR	A,A
	JR	NZ,L_292
	LD	A,(IX+-52)
	OR	A,A
	JR	NZ,L_292
;  564					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  565					hero.y -= 2;
	LD	IY,(_hero+3)
	LEA	BC,IY+-2
	LD	(_hero+3),BC
;  566					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  567				}
;  568				else if(inLadder && downKey){
	JR	L_298
L_292:
	LD	A,(IX+-25)
	OR	A,A
	JR	Z,L_298
	LD	A,(IX+-93)
	OR	A,A
	JR	Z,L_298
;  569					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  570					if(hero.y != 140 && mapNum == 1 || mapNum != 1 && hero.y != 200) hero.y += 2;
	LD	BC,140
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_287
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_288
L_287:
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_289
	LD	BC,200
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_289
L_288:
	LD	IY,(_hero+3)
	LEA	BC,IY+2
	LD	(_hero+3),BC
L_289:
;  571					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  572				}
L_298:
;  573	
;  574				if(!(upKey) && !keyIsReleased  && !doubleJumped && jumpingDir != nothing) keyIsReleased = true;
	LD	A,(IX+-47)
	OR	A,A
	JR	NZ,L_307
	LD	A,(IX+-41)
	OR	A,A
	JR	NZ,L_307
	LD	A,(IX+-46)
	OR	A,A
	JR	NZ,L_307
	LD	BC,8
	LD	HL,(IX+-36)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_307
	LD	(IX+-41),1
L_307:
;  575	
;  576				
;  577				//CHECK FOR JUMPING UP
;  578				if(upKey && !doubleJumped && !inLadder && ((keyIsReleased && jumpingDir != nothing) || (!keyIsReleased && jumpingDir == nothing))) {
	LD	A,(IX+-47)
	OR	A,A
	JR	Z,L_382
	LD	A,(IX+-46)
	OR	A,A
	JR	NZ,L_382
	LD	A,(IX+-25)
	OR	A,A
	JR	NZ,L_382
	LD	A,(IX+-41)
	OR	A,A
	JR	Z,L_303
	LD	BC,8
	LD	HL,(IX+-36)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_306
L_303:
	LD	A,(IX+-41)
	OR	A,A
	JR	NZ,L_382
	LD	BC,8
	LD	HL,(IX+-36)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_382
L_306:
;  579					jumpingDir = up;
	LD	BC,2
	LD	(IX+-36),BC
;  580					isBoosted = false;
	LD	(IX+-33),0
;  581					ascending = true;
	LD	(IX+-32),1
;  582	
;  583					lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-12),BC
;  584					lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-9),BC
;  585	
;  586					keyIsReleased = false;
	LD	(IX+-41),0
;  587	
;  588					if(!tempBool2) doubleJumped = true;
	LD	A,(IX+-40)
	OR	A,A
	JR	NZ,L_382
	LD	(IX+-46),1
;  589					
;  590				}
L_382:
;  591				//STANDING STILL ANIMATION
;  592				if(jumpingDir == nothing && !isBoosted){
	LD	BC,8
	LD	HL,(IX+-36)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__198
	LD	A,1
	JR	L__199
L__198:
	XOR	A,A
L__199:
	LD	(IX+-117),A
	OR	A,A
	JR	NZ,L_381
	LD	A,(IX+-33)
	OR	A,A
	JR	NZ,L_381
;  593	
;  594					inLadder = false;
	LD	(IX+-25),0
;  595					if((hero.x >= 106 && hero.x <= 136 && hero.y >= 39 && hero.y <= 140 && mapNum == 1) || (hero.x >= 271 && mapNum == 2 && hero.y >= 120) && jumpingDir == nothing) inLadder = true;
	LD	HL,(_hero)
	LD	BC,106
	OR	A,A
	SBC	HL,BC
	JP	M,L_316
	LD	BC,(_hero)
	LD	HL,136
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_316
	LD	BC,39
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_316
	LD	BC,(_hero+3)
	LD	HL,140
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_316
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_317
L_316:
	LD	BC,271
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_319
	LD	BC,2
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_319
	LD	BC,120
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_319
	LD	A,(IX+-117)
	OR	A,A
	JR	NZ,L_319
L_317:
	LD	(IX+-25),1
L_319:
;  596	
;  597					if(isTouching(bottomFeet, true, 0, 0, hero.x , hero.y)) {
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_320
;  598						isBoosted = true;
	LD	(IX+-33),1
;  599						ascending = true;
	LD	(IX+-32),1
;  600						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-12),BC
;  601						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-9),BC
;  602					}
L_320:
;  603	
;  604					gfx_TransparentSprite_NoClip(HeroStill, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-75)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  605				}
;  606	
;  607				//JUMPING RIGHT ANIMATION
;  608				else if(jumpingDir == right){
	JR	L_386
L_381:
	LD	HL,(IX+-36)
	CALL	__icmpzero
	JR	NZ,L_379
;  609					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  610	
;  611					if(hero.x - lastStill.x <= 50 && !isTouching(rightSide, false, 0, 1, hero.x , hero.y)) hero.x += 2;
	LD	BC,(IX+-12)
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	JP	M,L_327
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_327
	LD	IY,(_hero)
	LEA	BC,IY+2
	LD	(_hero),BC
;  612					else if(hero.x - lastStill.x > 50 && hero.x - lastStill.x <= 65 && !isTouching(rightSide, false, 0, 0, hero.x , hero.y)) hero.x++;
	JR	L_329
L_327:
	LD	HL,(_hero)
	LD	BC,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	JP	P,L_329
	LD	HL,(_hero)
	LD	BC,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,65
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_329
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_329
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
L_329:
;  613	
;  614					if(hero.x > 300) hero.x = 300;
	LD	BC,(_hero)
	LD	HL,300
	OR	A,A
	SBC	HL,BC
	JP	P,L_330
	LD	BC,300
	LD	(_hero),BC
L_330:
;  615	
;  616					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  617	
;  618					if(hero.x - lastStill.x <= 12) gfx_TransparentSprite_NoClip(HeroJumpRight0, hero.x, hero.y);
	LD	BC,(IX+-12)
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_336
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-106)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  619					else if(hero.x - lastStill.x > 12 && hero.x - lastStill.x <= 24) gfx_TransparentSprite_NoClip(HeroJumpRight1, hero.x, hero.y);
	JR	L_386
L_336:
	LD	HL,(_hero)
	LD	BC,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_334
	LD	HL,(_hero)
	LD	BC,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_334
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-112)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  620					else if(hero.x - lastStill.x > 24) gfx_TransparentSprite_NoClip(HeroJumpRight2, hero.x, hero.y);
	JR	L_386
L_334:
	LD	HL,(_hero)
	LD	BC,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_386
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-115)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  621	
;  622					
;  623				}
;  624				//JUMPING LEFT ANIMATION
;  625				else if(jumpingDir == left){
	JR	L_386
L_379:
	LD	BC,1
	LD	HL,(IX+-36)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_377
;  626					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  627	
;  628					if(lastStill.x - hero.x <= 50 && !isTouching(leftSide, false, 0, -1, hero.x , hero.y)) hero.x -= 2;
	LD	HL,(IX+-12)
	LD	BC,(_hero)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_343
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,16777215
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_343
	LD	IY,(_hero)
	LEA	BC,IY+-2
	LD	(_hero),BC
;  629					else if(lastStill.x - hero.x > 50 && lastStill.x - hero.x <= 65 && !isTouching(leftSide, false, 0, 0, hero.x , hero.y)) hero.x--;
	JR	L_345
L_343:
	LD	BC,(_hero)
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	JP	P,L_345
	LD	BC,(_hero)
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,65
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_345
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_345
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
L_345:
;  630	
;  631					if(hero.x < 0) hero.x = 0;
	LD	HL,(_hero)
	CALL	__icmpzero
	JP	P,L_346
	LD	BC,0
	LD	(_hero),BC
L_346:
;  632	
;  633					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  634	
;  635					if(lastStill.x - hero.x <= 12) gfx_TransparentSprite_NoClip(HeroJumpLeft0, hero.x, hero.y);
	LD	HL,(IX+-12)
	LD	BC,(_hero)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_352
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LEA	IY,IX+-128
	LD	BC,(IY+-11)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  636					else if(lastStill.x - hero.x > 12 && lastStill.x - hero.x <= 24) gfx_TransparentSprite_NoClip(HeroJumpLeft1, hero.x, hero.y);
	JR	L_386
L_352:
	LD	BC,(_hero)
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_350
	LD	BC,(_hero)
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_350
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LEA	IY,IX+-128
	LD	BC,(IY+-18)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  637					else if(lastStill.x - hero.x > 24) gfx_TransparentSprite_NoClip(HeroJumpLeft2, hero.x, hero.y);
	JR	L_386
L_350:
	LD	BC,(_hero)
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_386
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LEA	IY,IX+-128
	LD	BC,(IY+-21)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  638				}
;  639				//JUMPING UP ANIMATION
;  640				else if(jumpingDir == up){
	JR	L_386
L_377:
	LD	BC,2
	LD	HL,(IX+-36)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_375
;  641					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  642	
;  643					if(secondKey && !isTouching(leftSide, false, 0, 0, hero.x , hero.y)) {
	LD	A,(IX+-53)
	OR	A,A
	JR	Z,L_359
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_359
;  644						hero.x--;
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
;  645						facingRight = false;
	LD	(IX+-42),0
;  646					}
L_359:
;  647					if(modeKey && !isTouching(rightSide, false, 0, 0, hero.x , hero.y)) {
	LD	A,(IX+-52)
	OR	A,A
	JR	Z,L_360
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_360
;  648						hero.x++;
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
;  649						facingRight = true;
	LD	(IX+-42),1
;  650					}
L_360:
;  651	
;  652					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  653					
;  654					if(facingRight) gfx_TransparentSprite_NoClip(HeroJumpUpRight, hero.x, hero.y);
	LD	A,(IX+-42)
	OR	A,A
	JR	Z,L_362
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-97)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  655					else gfx_TransparentSprite_NoClip(HeroJumpUpLeft, hero.x, hero.y);
	JR	L_386
L_362:
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-123)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  656					
;  657				}
;  658				else if(isBoosted){
	JR	L_386
L_375:
	LD	A,(IX+-33)
	OR	A,A
	JR	Z,L_386
;  659					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  660	
;  661					if(secondKey && !isTouching(leftSide, false, 0, 0, hero.x , hero.y)) {
	LD	A,(IX+-53)
	OR	A,A
	JR	Z,L_369
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_369
;  662						hero.x--;
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
;  663						facingRight = false;
	LD	(IX+-42),0
;  664					}
L_369:
;  665					if(modeKey && !isTouching(rightSide, false, 0, 0, hero.x , hero.y)) {
	LD	A,(IX+-52)
	OR	A,A
	JR	Z,L_370
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_370
;  666						hero.x++;
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
;  667						facingRight = true;
	LD	(IX+-42),1
;  668					}
L_370:
;  669	
;  670					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  671					
;  672					if(facingRight) gfx_TransparentSprite_NoClip(HeroJumpUpRight, hero.x, hero.y);
	LD	A,(IX+-42)
	OR	A,A
	JR	Z,L_372
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-97)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  673					else gfx_TransparentSprite_NoClip(HeroJumpUpLeft, hero.x, hero.y);
	JR	L_386
L_372:
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-123)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  674					
;  675				}
;  676			}
L_386:
;  677			gfx_BlitBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  678		}
L_387:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_388
;  679	
;  680		gfx_End();
	CALL	_gfx_End
;  681	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_isTouching                         IMPORT  -----   function
;_gfx_GetPixel                       IMPORT  -----   function
;_floor                              IMPORT  -----   function
;_gfx_TransparentSprite              IMPORT  -----   function
;_gfx_Sprite                         IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_gfx_Sprite_NoClip                  IMPORT  -----   function
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_gfx_GetSprite                      IMPORT  -----   function
;_horizDistances                     STATIC   4800   variable
;_gfx_PrintInt                       IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_establishAIView                    IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_SetTransparentColor            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_map5_compressed                    IMPORT    236   variable
;_map4_compressed                    IMPORT    188   variable
;_map3_compressed                    IMPORT    126   variable
;_map2_compressed                    IMPORT    241   variable
;_map1_compressed                    IMPORT    204   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_menu_compressed                    IMPORT    294   variable
;_gfx_FillScreen                     IMPORT  -----   function
;_global_palette                     IMPORT    130   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_srand                              IMPORT  -----   function
;_hero                               STATIC      6   variable
;_gfx_FlipSpriteY                    IMPORT  -----   function
;_arrow_compressed                   IMPORT     22   variable
;_HeroJumpUpRight_compressed         IMPORT    134   variable
;_HeroJumpRight2_compressed          IMPORT    177   variable
;_HeroJumpRight1_compressed          IMPORT    138   variable
;_HeroJumpRight0_compressed          IMPORT    130   variable
;_HeroRight2_compressed              IMPORT    144   variable
;_HeroRight1_compressed              IMPORT    142   variable
;_HeroRight0_compressed              IMPORT    136   variable
;_HeroStill_compressed               IMPORT    115   variable
;_zx7_Decompress                     IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;heroJumpRight                       IX-209      9   variable
;heroRunRight                        IX-200      9   variable
;heroRunLeft                         IX-191      9   variable
;arrowSprTiltLeft                    IX-182      3   variable
;arrowSprTiltRight                   IX-179      3   variable
;HeroLeft1                           IX-176      3   variable
;HeroLeft0                           IX-173      3   variable
;temp123                             IX-170      3   variable
;temp89                              IX-167      3   variable
;temp84                              IX-164      3   variable
;temp79                              IX-161      3   variable
;temp73                              IX-158      3   variable
;temp48                              IX-155      3   variable
;HeroLeft2                           IX-152      3   variable
;HeroJumpLeft2                       IX-149      3   variable
;HeroJumpLeft1                       IX-146      3   variable
;distance                            IX-143      4   variable
;HeroJumpLeft0                       IX-139      3   variable
;HeroRight0                          IX-136      3   variable
;prevkey                             IX-133      1   variable
;HeroRight2                          IX-132      3   variable
;HeroRight1                          IX-129      3   variable
;step                                IX-126      3   variable
;HeroJumpUpLeft                      IX-123      3   variable
;behindDot                           IX-120      3   variable
;G_2                                 IX-117      1   variable
;G_1                                 IX-116      1   variable
;HeroJumpRight2                      IX-115      3   variable
;HeroJumpRight1                      IX-112      3   variable
;arrowSprLeft                        IX-109      3   variable
;HeroJumpRight0                      IX-106      3   variable
;arrowInit                           IX-103      6   variable
;HeroJumpUpRight                      IX-97      3   variable
;key                                  IX-94      1   variable
;downKey                              IX-93      1   variable
;arrowTouchingTip                     IX-92      1   variable
;arrowTouchingBottom                  IX-91      1   variable
;arrowDistance                        IX-90      4   variable
;y                                    IX-86      3   variable
;arrowSpr                             IX-83      3   variable
;x                                    IX-80      3   variable
;tempBool1                            IX-77      1   variable
;leftKey                              IX-76      1   variable
;HeroStill                            IX-75      3   variable
;enemy                                IX-72     18   variable
;rightKey                             IX-54      1   variable
;secondKey                            IX-53      1   variable
;modeKey                              IX-52      1   variable
;velocity                             IX-51      3   variable
;shootingReleased                     IX-48      1   variable
;upKey                                IX-47      1   variable
;doubleJumped                         IX-46      1   variable
;behindArrow                          IX-45      3   variable
;facingRight                          IX-42      1   variable
;keyIsReleased                        IX-41      1   variable
;tempBool2                            IX-40      1   variable
;shootingDir                          IX-39      3   variable
;jumpingDir                           IX-36      3   variable
;isBoosted                            IX-33      1   variable
;ascending                            IX-32      1   variable
;map                                  IX-31      3   variable
;i                                    IX-28      3   variable
;inLadder                             IX-25      1   variable
;behind_sprite                        IX-24      3   variable
;dot                                  IX-21      6   variable
;mapNum                               IX-15      3   variable
;lastStill                            IX-12      6   variable
;arrow                                 IX-6      6   variable


; Stack Frame Size: 239 (bytes)
;       Spill Code: -16 (instruction)


	SEGMENT STRSECT
L__9:
	DB	"Map1"
	DB	0
L__10:
	DB	"Map2"
	DB	0
L__11:
	DB	"Map3"
	DB	0
L__12:
	DB	"Map4"
	DB	0
L__13:
	DB	"Map5"
	DB	0
	SEGMENT CODE
;  682	
;  683	bool isTouching(enum bodyParts part, bool checkForPad, int yVelocity, int xVelocity, int x, int y){
_isTouching:
	LD	HL,-5
	CALL	__frameset
;  684		int f;
;  685	
;  686		bool check;
;  687		check = true;
	LD	(IX+-5),1
;  688		if(part == leftSide){
	LD	HL,(IX+6)
	CALL	__icmpzero
	JR	NZ,L_429
;  689			for(f = 3; f <= 40; f += 3) {
	LD	BC,3
	LD	(IX+-3),BC
	JR	L_395
L_393:
;  690				if(gfx_GetPixel(x + 2 + xVelocity, y + f + yVelocity) == 0 || x + xVelocity == 0) return true;
	LD	B,(IX+-3)
	LD	A,(IX+21)
	ADD	A,B
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	IY,(IX+18)
	LEA	HL,IY+2
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_392
	LD	BC,(IX+15)
	LD	HL,(IX+18)
	ADD	HL,BC
	CALL	__icmpzero
	JR	NZ,L_394
L_392:
	LD	A,1
	JR	L_431
;  691			}
L_394:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_395:
	LD	BC,(IX+-3)
	LD	HL,40
	OR	A,A
	SBC	HL,BC
	JP	P,L_393
	JR	L_430
;  692		}
;  693		else if(part == rightSide){
L_429:
	LD	BC,1
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_427
;  694			for(f = 3; f <= 40; f += 3) {
	LD	BC,3
	LD	(IX+-3),BC
	JR	L_400
L_398:
;  695				if(gfx_GetPixel(x + 17 + xVelocity, y + f + yVelocity) == 0 || x + 20 + xVelocity== 320) return true;
	LD	B,(IX+-3)
	LD	A,(IX+21)
	ADD	A,B
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	IY,(IX+18)
	LEA	HL,IY+17
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_397
	LD	IY,(IX+18)
	LEA	HL,IY+20
	LD	BC,(IX+15)
	ADD	HL,BC
	OR	A,A
	LD	BC,320
	SBC	HL,BC
	JR	NZ,L_399
L_397:
	LD	A,1
	JR	L_431
;  696			}
L_399:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_400:
	LD	BC,(IX+-3)
	LD	HL,40
	OR	A,A
	SBC	HL,BC
	JP	P,L_398
	JR	L_430
;  697		}
;  698		else if(part == topHead){
L_427:
	LD	BC,2
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_425
;  699			for(f = 3; f <= 16; f += 3) {
	LD	BC,3
	LD	(IX+-3),BC
	JR	L_405
L_403:
;  700				if(gfx_GetPixel(x + f + xVelocity, y + yVelocity) == 0 || y + yVelocity < 0) return true;
	LD	B,(IX+12)
	LD	A,(IX+21)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+18)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_402
	LD	BC,(IX+12)
	LD	HL,(IX+21)
	ADD	HL,BC
	CALL	__icmpzero
	JP	P,L_404
L_402:
	LD	A,1
	JR	L_431
;  701			}
L_404:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_405:
	LD	BC,(IX+-3)
	LD	HL,16
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_403
	JR	L_430
;  702		}
;  703		else if(part == bottomFeet && !checkForPad){
L_425:
	LD	BC,3
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__261
	LD	A,1
	JR	L__262
L__261:
	XOR	A,A
L__262:
	LD	(IX+-4),A
	OR	A,A
	JR	NZ,L_423
	LD	A,(IX+9)
	OR	A,A
	JR	NZ,L_423
;  704			for(f = 6; f <= 14; f += 3) {
	LD	BC,6
	LD	(IX+-3),BC
	JR	L_413
L_411:
;  705				if(gfx_GetPixel(x + f + xVelocity, y + 40 + yVelocity) == 0 || y + 41 + yVelocity > 240 || gfx_GetPixel(x + f + xVelocity, y + 40 + yVelocity) == 3 || gfx_GetPixel(hero.x + f + xVelocity, hero.y + 40 + yVelocity) == 4) return true;
	LD	A,(IX+21)
	ADD	A,40
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+18)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_410
	LD	IY,(IX+21)
	LEA	HL,IY+41
	LD	BC,(IX+12)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,240
	OR	A,A
	SBC	HL,BC
	JP	M,L_410
	LD	A,(IX+21)
	ADD	A,40
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+18)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	Z,L_410
	LD	A,(_hero+3)
	ADD	A,40
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_412
L_410:
	LD	A,1
	JR	L_431
;  706			}
L_412:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_413:
	LD	BC,(IX+-3)
	LD	HL,14
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_411
	JR	L_430
;  707		}
;  708		else if(part == bottomFeet && checkForPad){
L_423:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_430
	LD	A,(IX+9)
	OR	A,A
	JR	Z,L_430
;  709			for(f = 6; f <= 14; f += 3) {
	LD	BC,6
	LD	(IX+-3),BC
	JR	L_419
L_417:
;  710				if(gfx_GetPixel(x + f + xVelocity, y + 41 + yVelocity) != 3 || gfx_GetPixel(x + f + xVelocity, y + 40 + yVelocity) == 4) check = false;
	LD	A,(IX+21)
	ADD	A,41
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+18)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_416
	LD	A,(IX+21)
	ADD	A,40
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+18)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_418
L_416:
	LD	(IX+-5),0
;  711			}
L_418:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_419:
	LD	BC,(IX+-3)
	LD	HL,14
	OR	A,A
	SBC	HL,BC
	JP	P,L_417
;  712			return check;
	LD	A,(IX+-5)
	JR	L_431
;  713		}
L_430:
;  714		return false;
	XOR	A,A
;  715	}	
L_431:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _isTouching ***************************
;Name                         Addr/Register   Size   Type
;_hero                               STATIC      6   variable
;_gfx_GetPixel                       IMPORT  -----   function
;check                                 IX-5      1   variable
;G_3                                   IX-4      1   variable
;f                                     IX-3      3   variable
;y                                    IX+21      3   parameter
;x                                    IX+18      3   parameter
;xVelocity                            IX+15      3   parameter
;yVelocity                            IX+12      3   parameter
;checkForPad                           IX+9      1   parameter
;part                                  IX+6      3   parameter


; Stack Frame Size: 29 (bytes)
;       Spill Code: -16 (instruction)


;  716	void establishAIView(int numOfMap){
_establishAIView:
	LD	HL,-98
	CALL	__frameset
;  717		int x;
;  718		int y;
;  719	
;  720		int color;
;  721	
;  722		int distance;
;  723	
;  724		int map1colors[4] = {0, 5, 6, 7};
	LEA	DE,IX+-49
	LD	HL,_0temp432
	LD	BC,12
	LDIR	
;  725		int map2colors[9] = {0, 8, 9, 10, 11, 12, 13, 14, 15};
	LEA	DE,IX+-76
	LD	HL,_1temp433
	LD	BC,27
	LDIR	
;  726		int map3colors[2] = {0, 43};
	LEA	DE,IX+-19
	LD	HL,_2temp434
	LD	BC,6
	LDIR	
;  727		int map4colors[3] = {0, 17, 61};
	LEA	DE,IX+-37
	LD	HL,_3temp435
	LD	BC,9
	LDIR	
;  728		int map5colors[3] = {0, 19, 20};
	LEA	DE,IX+-28
	LD	HL,_4temp436
	LD	BC,9
	LDIR	
;  729	
;  730		distance = -1;
	LD	BC,16777215
	LD	(IX+-12),BC
;  731		for(y = 0; x < 240; y += 4){
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_488
L_486:
;  732			for(x = 0; y < 320; x += 4){
	LD	BC,0
	LD	(IX+-9),BC
	JR	L_485
L_483:
;  733	
;  734				if(distance != -1 && gfx_GetPixel(x, y) != 0) distance++;
	LD	BC,16777215
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L__277
	LD	A,1
	JR	L__278
L__277:
	XOR	A,A
L__278:
	LD	(IX+-13),A
	OR	A,A
	JR	NZ,L_446
	LD	C,(IX+-6)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_446
	LD	BC,(IX+-12)
	INC	BC
	LD	(IX+-12),BC
;  735				else if(distance == -1 && gfx_GetPixel(x, y) == 0) distance++;
	JR	L_447
L_446:
	LD	BC,16777215
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_444
	LD	C,(IX+-6)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_444
	LD	BC,(IX+-12)
	INC	BC
	LD	(IX+-12),BC
;  736				else if(distance != -1 && gfx_GetPixel(x, y) == 0) distance = -1;
	JR	L_447
L_444:
	LD	A,(IX+-13)
	OR	A,A
	JR	NZ,L_447
	LD	C,(IX+-6)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_447
	LD	BC,16777215
	LD	(IX+-12),BC
L_447:
;  737	
;  738				horizDistances[y / 4][x / 4] = distance;
	LD	BC,4
	LD	HL,(IX+-6)
	CALL	__idivs
	LD	BC,HL
	LD	HL,80
	CALL	__imulu
	LD	DE,HL
	LD	HL,(IX+-9)
	LD	BC,4
	CALL	__idivs
	LD	BC,HL
	LD	HL,DE
	LD	(IX+-79),BC	; spill
	LD	(IX+-82),BC	; spill
	LD	BC,(IX+-79)	; unspill
;  739	
;  740				boundaries[y/4][x/4] = false;
	LD	(IX+-85),BC	; spill
	LD	(IX+-88),BC	; spill
	LD	BC,(IX+-85)	; unspill
	LD	A,(IX+-12)
	LD	(IX+-91),BC	; spill
	LD	BC,_horizDistances
	LD	(IX+-94),BC	; spill
	ADD	HL,BC
	LD	BC,(IX+-82)	; unspill
	ADD	HL,BC
	LD	(HL),A
	LD	HL,DE
	LD	DE,_boundaries
	ADD	HL,DE
	LD	BC,(IX+-88)	; unspill
	ADD	HL,BC
	LD	(HL),0
;  741				switch(numOfMap){
	LD	HL,(IX+6)
	CALL	__seqcase
L__285:
	DW	5
	DW	1
	DB	0
	DW24	L_448	

	DW24	L_455	

	DW24	L_462	

	DW24	L_469	

	DW24	L_476	

	DW24	L_484	

;  742					case 1:
L_448:
;  743						for(color = 0; color < 4; color++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_453
L_451:
;  744							if(gfx_GetPixel(x, y) == map1colors[color])	boundaries[y / 4][x / 4] = true; 
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-49
	ADD	HL,BC
	LD	DE,HL
	LD	C,(IX+-6)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	LD	(IX+-97),DE
	LD	(IX+-98),D
	CALL	_gfx_GetPixel
	LD	DE,(IX+-97)
	LD	D,(IX+-98)
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	LD	HL,(HL)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_452
	LD	BC,4
	LD	HL,(IX+-6)
	CALL	__idivs
	LD	A,80
	CALL	__imul_b
	LD	BC,_boundaries
	ADD	HL,BC
	LD	DE,HL
	LD	HL,(IX+-9)
	LD	BC,4
	CALL	__idivs
	ADD	HL,DE
	LD	(HL),1
;  745						}
L_452:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_453:
	LD	BC,4
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L_451
;  746						break;
	JR	L_484
;  747					case 2:
L_455:
;  748						for(color = 0; color < 9; color++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_460
L_458:
;  749							if(gfx_GetPixel(x, y) == map2colors[color])	boundaries[y / 4][x / 4] = true; 
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-76
	ADD	HL,BC
	LD	DE,HL
	LD	C,(IX+-6)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	LD	(IX+-97),DE
	LD	(IX+-98),D
	CALL	_gfx_GetPixel
	LD	DE,(IX+-97)
	LD	D,(IX+-98)
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	LD	HL,(HL)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_459
	LD	BC,4
	LD	HL,(IX+-6)
	CALL	__idivs
	LD	A,80
	CALL	__imul_b
	LD	BC,_boundaries
	ADD	HL,BC
	LD	DE,HL
	LD	HL,(IX+-9)
	LD	BC,4
	CALL	__idivs
	ADD	HL,DE
	LD	(HL),1
;  750						}
L_459:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_460:
	LD	BC,9
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_458
;  751						break;
	JR	L_484
;  752					case 3:
L_462:
;  753						for(color = 0; color < 2; color++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_467
L_465:
;  754							if(gfx_GetPixel(x, y) == map3colors[color])	boundaries[y / 4][x / 4] = true; 
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-19
	ADD	HL,BC
	LD	DE,HL
	LD	C,(IX+-6)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	LD	(IX+-97),DE
	LD	(IX+-98),D
	CALL	_gfx_GetPixel
	LD	DE,(IX+-97)
	LD	D,(IX+-98)
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	LD	HL,(HL)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_466
	LD	BC,4
	LD	HL,(IX+-6)
	CALL	__idivs
	LD	A,80
	CALL	__imul_b
	LD	BC,_boundaries
	ADD	HL,BC
	LD	DE,HL
	LD	HL,(IX+-9)
	LD	BC,4
	CALL	__idivs
	ADD	HL,DE
	LD	(HL),1
;  755						}
L_466:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_467:
	LD	BC,2
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_465
;  756						break;
	JR	L_484
;  757					case 4:
L_469:
;  758						for(color = 0; color < 3; color++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_474
L_472:
;  759							if(gfx_GetPixel(x, y) == map4colors[color])	boundaries[y / 4][x / 4] = true;
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-37
	ADD	HL,BC
	LD	DE,HL
	LD	C,(IX+-6)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	LD	(IX+-97),DE
	LD	(IX+-98),D
	CALL	_gfx_GetPixel
	LD	DE,(IX+-97)
	LD	D,(IX+-98)
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	LD	HL,(HL)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_473
	LD	BC,4
	LD	HL,(IX+-6)
	CALL	__idivs
	LD	A,80
	CALL	__imul_b
	LD	BC,_boundaries
	ADD	HL,BC
	LD	DE,HL
	LD	HL,(IX+-9)
	LD	BC,4
	CALL	__idivs
	ADD	HL,DE
	LD	(HL),1
;  760						}
L_473:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_474:
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_472
;  761						break;
	JR	L_484
;  762					case 5:
L_476:
;  763						for(color = 0; color < 3; color++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_481
L_479:
;  764							if(gfx_GetPixel(x, y) == map5colors[color])	boundaries[y / 4][x / 4] = true; 
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-28
	ADD	HL,BC
	LD	DE,HL
	LD	C,(IX+-6)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	LD	(IX+-97),DE
	LD	(IX+-98),D
	CALL	_gfx_GetPixel
	LD	DE,(IX+-97)
	LD	D,(IX+-98)
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	LD	HL,(HL)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_480
	LD	BC,4
	LD	HL,(IX+-6)
	CALL	__idivs
	LD	A,80
	CALL	__imul_b
	LD	BC,_boundaries
	ADD	HL,BC
	LD	DE,HL
	LD	HL,(IX+-9)
	LD	BC,4
	CALL	__idivs
	ADD	HL,DE
	LD	(HL),1
;  765						}
L_480:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_481:
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_479
;  766						break;
;  767				}
;  768			}
L_484:
	LD	IY,(IX+-9)
	LEA	IY,IY+4
	LD	(IX+-9),IY
L_485:
	LD	BC,320
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_483
	LD	IY,(IX+-6)
	LEA	IY,IY+4
	LD	(IX+-6),IY
;  769		}
L_488:
	LD	BC,240
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_486
	LD	SP,IX
	POP	IX
	RET	


;**************************** _establishAIView ***************************
;Name                         Addr/Register   Size   Type
;_boundaries                         STATIC   4800   variable
;_horizDistances                     STATIC   4800   variable
;_gfx_GetPixel                       IMPORT  -----   function
;_4temp436                           STATIC      9   variable
;_3temp435                           STATIC      9   variable
;_2temp434                           STATIC      6   variable
;_1temp433                           STATIC     27   variable
;_0temp432                           STATIC     12   variable
;map2colors                           IX-76     27   variable
;map1colors                           IX-49     12   variable
;map4colors                           IX-37      9   variable
;map5colors                           IX-28      9   variable
;map3colors                           IX-19      6   variable
;G_4                                  IX-13      1   variable
;distance                             IX-12      3   variable
;x                                     IX-9      3   variable
;y                                     IX-6      3   variable
;color                                 IX-3      3   variable
;numOfMap                              IX+6      3   parameter


; Stack Frame Size: 107 (bytes)
;       Spill Code: -18 (instruction)


	SEGMENT TEXT
_0temp432:
	DW	0
	DB	0
	DW	5
	DB	0
	DW	6
	DB	0
	DW	7
	DB	0
_1temp433:
	DW	0
	DB	0
	DW	8
	DB	0
	DW	9
	DB	0
	DW	10
	DB	0
	DW	11
	DB	0
	DW	12
	DB	0
	DW	13
	DB	0
	DW	14
	DB	0
	DW	15
	DB	0
_2temp434:
	DW	0
	DB	0
	DW	43
	DB	0
_3temp435:
	DW	0
	DB	0
	DW	17
	DB	0
	DW	61
	DB	0
_4temp436:
	DW	0
	DB	0
	DW	19
	DB	0
	DW	20
	DB	0
	XREF _menu_compressed:ROM
	XREF _arrow_compressed:ROM
	XREF _map5_compressed:ROM
	XREF _map4_compressed:ROM
	XREF _map3_compressed:ROM
	XREF _map2_compressed:ROM
	XREF _map1_compressed:ROM
	XREF _HeroJumpUpRight_compressed:ROM
	XREF _HeroJumpRight2_compressed:ROM
	XREF _HeroJumpRight1_compressed:ROM
	XREF _HeroJumpRight0_compressed:ROM
	XREF _HeroRight2_compressed:ROM
	XREF _HeroRight1_compressed:ROM
	XREF _HeroRight0_compressed:ROM
	XREF _HeroStill_compressed:ROM
	XREF _global_palette:ROM
	XREF _zx7_Decompress:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_FlipSpriteY:ROM
	XREF _gfx_ScaledSprite_NoClip:ROM
	XREF _gfx_GetSprite:ROM
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_Sprite_NoClip:ROM
	XREF _gfx_Sprite:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_PrintInt:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_GetPixel:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetTransparentColor:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _srand:ROM
	XREF _malloc:ROM
	XREF _floor:ROM
	XREF __idivs:ROM
	XREF __imulu:ROM
	XREF __ineg:ROM
	XREF __iremu:ROM
	XREF __fadd:ROM
	XREF __fsub:ROM
	XREF __fmul:ROM
	XREF __fdiv:ROM
	XREF __fcmp:ROM
	XREF __ftol:ROM
	XREF __ltof:ROM
	XREF __itol:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __lldix:ROM
	XREF __lstix:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __seqcase:ROM
	XREF __imul_b:ROM
	XDEF _establishAIView
	XDEF _isTouching
	XDEF _main
	XDEF _horizDistances
	XDEF _boundaries
	XDEF _enemy
	XDEF _hero
	END
