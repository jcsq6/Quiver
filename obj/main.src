; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT BSS
_hero:
	DS	6
_enemy:
	DS	6
_boundaries:
	DS	4800
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <math.h>
;    6	#include <stdio.h>
;    7	#include <stdlib.h>
;    8	#include <string.h>
;    9	
;   10	#include <graphx.h>
;   11	#include <keypadc.h>
;   12	#include <debug.h>
;   13	
;   14	#include <compression.h>
;   15	
;   16	#include "gfx/gfx.h"
;   17	
;   18	bool isTouching(enum bodyParts part, bool checkForPad, int yVelocity, int xVelocity, int x, int y);
;   19	void establishBoundaries(int numOfMap);
;   20	
;   21	enum direction{
;   22		right,
;   23		left,
;   24		up,
;   25		down,
;   26		upLeft,
;   27		upRight,
;   28		downLeft,
;   29		downRight,
;   30		nothing
;   31	};
;   32	
;   33	enum bodyParts{
;   34		leftSide,
;   35		rightSide,
;   36		topHead,
;   37		bottomFeet
;   38	};
;   39	
;   40	gfx_point_t hero;
;   41	gfx_point_t enemy;
;   42	
;   43	bool boundaries[60][80];
	SEGMENT CODE
;   44	
;   45	void main(void) {
_main:
	LD	HL,-215
	CALL	__frameset
;   46	
;   47		int x, y, i, mapNum, velocity;
;   48	
;   49		gfx_point_t lastStill;
;   50		gfx_point_t arrow, arrowInit;
;   51	
;   52		gfx_sprite_t *map;
;   53	
;   54		gfx_sprite_t *HeroStill, *HeroLeft0, *HeroLeft1, *HeroLeft2, *HeroRight0, *HeroRight1, *HeroRight2,*HeroJumpRight0, *HeroJumpRight1, *HeroJumpRight2, *HeroJumpUpRight, *HeroJumpUpLeft, *HeroJumpLeft0, *HeroJumpLeft1, *HeroJumpLeft2, *arrowSpr, *behindArrow, *arrowSprLeft, *arrowSprTiltRight, *arrowSprTiltLeft;
;   55	
;   56		double distance, arrowDistance;
;   57		unsigned int step;
;   58	
;   59		enum direction jumpingDir;
;   60		enum direction shootingDir;
;   61	
;   62		bool doubleJumped, keyIsReleased, inLadder, facingRight, ascending, key, prevkey, isBoosted, tempBool1, tempBool2;
;   63	
;   64		bool alphaKey, leftKey, rightKey, downKey, upKey, modeKey, secondKey, rightKeyNotAlpha, leftKeyNotAlpha, downKeyNotAlpha, upKeyNotAlpha, alphaReleased, standing, arrowTouchingBottom, arrowTouchingTip;
;   65	
;   66		gfx_sprite_t *heroRunRight[3];
;   67		gfx_sprite_t *heroRunLeft[3];
;   68	
;   69		gfx_sprite_t *heroJumpRight[3];
;   70	
;   71		gfx_sprite_t *behind_sprite;
;   72	
;   73		gfx_sprite_t *tempPerson;
;   74	
;   75		map = gfx_MallocSprite(80, 60);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,80
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-35),HL
;   76	
;   77		HeroStill = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-51),HL
;   78		HeroLeft0 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-112),HL
;   79		HeroLeft1 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-115),HL
;   80		HeroLeft2 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LEA	IY,IX+-128
;   81		HeroRight0 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	(IY+-33),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-108),HL
;   82		HeroRight1 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-102),HL
;   83		HeroRight2 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-105),HL
;   84		HeroJumpRight0 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-75),HL
;   85		HeroJumpRight1 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-81),HL
;   86		HeroJumpRight2 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-84),HL
;   87		HeroJumpUpRight = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-89),HL
;   88		HeroJumpUpLeft = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-96),HL
;   89		HeroJumpLeft0 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-122),HL
;   90		HeroJumpLeft1 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-125),HL
;   91		HeroJumpLeft2 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LEA	IY,IX+-128
;   92		behindArrow = gfx_MallocSprite(20, 4);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,4
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	(IY+-30),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-44),HL
;   93		arrowSpr = gfx_MallocSprite(20, 4);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,4
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-66),HL
;   94		arrowSprLeft = gfx_MallocSprite(20, 4);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,4
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-78),HL
;   95		arrowSprTiltLeft = gfx_MallocSprite(20, 4);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,4
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LEA	IY,IX+-128
;   96		arrowSprTiltRight = gfx_MallocSprite(20, 4);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,4
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	(IY+-36),HL
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LEA	IY,IX+-128
;   97	
;   98	
;   99		zx7_Decompress( HeroStill, HeroStill_compressed );
	LD	BC,_HeroStill_compressed
	PUSH	BC
	LD	(IY+-39),HL
	LD	BC,(IX+-51)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  100		zx7_Decompress( HeroRight0, HeroRight0_compressed );
	LD	BC,_HeroRight0_compressed
	PUSH	BC
	LD	BC,(IX+-108)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  101		zx7_Decompress( HeroRight1, HeroRight1_compressed );
	LD	BC,_HeroRight1_compressed
	PUSH	BC
	LD	BC,(IX+-102)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  102		zx7_Decompress( HeroRight2, HeroRight2_compressed );
	LD	BC,_HeroRight2_compressed
	PUSH	BC
	LD	BC,(IX+-105)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  103		zx7_Decompress( HeroJumpRight0, HeroJumpRight0_compressed );
	LD	BC,_HeroJumpRight0_compressed
	PUSH	BC
	LD	BC,(IX+-75)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  104		zx7_Decompress( HeroJumpRight1, HeroJumpRight1_compressed );
	LD	BC,_HeroJumpRight1_compressed
	PUSH	BC
	LD	BC,(IX+-81)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  105		zx7_Decompress( HeroJumpRight2, HeroJumpRight2_compressed );
	LD	BC,_HeroJumpRight2_compressed
	PUSH	BC
	LD	BC,(IX+-84)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  106		zx7_Decompress( HeroJumpUpRight, HeroJumpUpRight_compressed );
	LD	BC,_HeroJumpUpRight_compressed
	PUSH	BC
	LD	BC,(IX+-89)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  107		zx7_Decompress( arrowSpr, arrow_compressed );
	LD	BC,_arrow_compressed
	PUSH	BC
	LD	BC,(IX+-66)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  108	
;  109		gfx_FlipSpriteY(HeroRight0, HeroLeft0);
	LD	BC,(IX+-112)
	PUSH	BC
	LD	BC,(IX+-108)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  110		gfx_FlipSpriteY(HeroRight1, HeroLeft1);
	LD	BC,(IX+-115)
	PUSH	BC
	LD	BC,(IX+-102)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  111		gfx_FlipSpriteY(HeroRight2, HeroLeft2);
	LEA	IY,IX+-128
	LD	BC,(IY+-33)
	PUSH	BC
	LD	BC,(IX+-105)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  112		gfx_FlipSpriteY(HeroJumpRight0, HeroJumpLeft0);
	LD	BC,(IX+-122)
	PUSH	BC
	LD	BC,(IX+-75)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  113		gfx_FlipSpriteY(HeroJumpRight1, HeroJumpLeft1);
	LD	BC,(IX+-125)
	PUSH	BC
	LD	BC,(IX+-81)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  114		gfx_FlipSpriteY(HeroJumpRight2, HeroJumpLeft2);
	LEA	IY,IX+-128
	LD	BC,(IY+-30)
	PUSH	BC
	LD	BC,(IX+-84)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  115		gfx_FlipSpriteY(HeroJumpUpRight, HeroJumpUpLeft);
	LD	BC,(IX+-96)
	PUSH	BC
	LD	BC,(IX+-89)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  116		gfx_FlipSpriteY(arrowSpr, arrowSprLeft);
	LD	BC,(IX+-78)
	PUSH	BC
	LD	BC,(IX+-66)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  117	
;  118		velocity = 2;
	LD	BC,2
	LD	(IX+-41),BC
;  119	
;  120		jumpingDir = nothing;
	LD	BC,8
	LD	(IX+-30),BC
;  121	
;  122		ascending = doubleJumped = inLadder = isBoosted = keyIsReleased = false;
	LD	(IX+-38),0
	LD	(IX+-27),0
	LD	(IX+-19),0
	LD	(IX+-45),0
	LD	(IX+-26),0
;  123	
;  124		facingRight = alphaReleased = standing = true;
	LD	(IX+-37),1
	LD	(IX+-32),1
	LD	(IX+-36),1
;  125	
;  126		heroRunRight[0] = HeroRight0;
	LD	BC,(IX+-108)
	LEA	IY,IX+-128
	LD	(IY+-57),BC
;  127		heroRunRight[1] = HeroRight1;
	LD	IY,IX
	LD	BC,-185
	ADD	IY,BC
	LEA	HL,IY+3
;  128		heroRunRight[2] = HeroRight2;
	LD	IY,IX
	LD	BC,(IX+-102)
	LD	DE,-185
	ADD	IY,DE
	LD	(HL),BC
	LD	BC,(IX+-105)
	LEA	HL,IY+6
	LD	(HL),BC
;  129	
;  130		heroRunLeft[0] = HeroLeft0;
	LD	BC,(IX+-112)
	LEA	IY,IX+-128
	LD	(IY+-48),BC
;  131		heroRunLeft[1] = HeroLeft1;
	LD	IY,IX
	LD	BC,-176
	ADD	IY,BC
	LEA	HL,IY+3
;  132		heroRunLeft[2] = HeroLeft2;
	LD	IY,IX
	ADD	IY,BC
	PUSH	BC
	PUSH	HL
	LEA	HL,IY+6
	LD	BC,-212	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	BC,(IX+-115)
	LD	(HL),BC
	LEA	IY,IX+-128
	LD	BC,(IY+-33)
	PUSH	BC
	LD	BC,-212	; unspill
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	LD	(IY),BC
;  133	
;  134		heroJumpRight[0] = HeroJumpRight0;
	LD	BC,(IX+-75)
	LEA	IY,IX+-128
	LD	(IY+-66),BC
;  135		heroJumpRight[1] = HeroJumpRight1;
	LD	IY,IX
	LD	BC,-194
	ADD	IY,BC
	LEA	HL,IY+3
	LD	BC,(IX+-81)
	LD	(HL),BC
;  136		heroJumpRight[2] = HeroJumpRight2;
	LD	IY,IX
	LD	BC,(IX+-84)
;  137	
;  138		behind_sprite = gfx_MallocSprite(20, 40);
	LD	DE,_malloc
	PUSH	DE
	LD	DE,40
	PUSH	DE
	LD	DE,20
	PUSH	DE
	LD	DE,-194
	ADD	IY,DE
	LEA	HL,IY+6
	LD	(HL),BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-18),HL
;  139	
;  140		lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-12),BC
;  141		lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-9),BC
;  142	
;  143		arrow.x = 0;
	LD	BC,0
	LD	(IX+-6),BC
;  144		arrow.y = 0;
	LD	(IX+-3),BC
;  145	
;  146		arrowDistance = 80;
;  147	
;  148		shootingDir = nothing;
	LD	BC,8
	LD	(IX+-22),BC
;  149	
;  150		srand(rtc_Time());
	LD	BC,(15925316)
	PUSH	BC
	CALL	_srand
	POP	BC
;  151	
;  152		gfx_Begin();
	CALL	_gfx_Begin
;  153	
;  154		gfx_SetPalette(global_palette, sizeof_global_palette, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,128
	PUSH	BC
	LD	BC,_global_palette
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  155	
;  156		mapNum = 1;
	LD	BC,1
	LD	(IX+-15),BC
;  157	
;  158		gfx_FillScreen(1);
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  159	
;  160		while(!(kb_Data[6] & kb_Enter)){
	JR	L_17
L_18:
;  161			kb_Scan();
	CALL	_kb_Scan
;  162	
;  163	   		key = kb_Data[7] == kb_Down;
	LD	A,(16056350)
	CP	A,1
	JR	NZ,L__1
	LD	A,1
	JR	L__2
L__1:
	XOR	A,A
L__2:
	LD	(IX+-86),A
;  164	
;  165			if(key && !prevkey) {
	OR	A,A
	JR	Z,L_5
	LD	A,(IX+-92)
	OR	A,A
	JR	NZ,L_5
;  166				if(mapNum == 5) mapNum = 0;
	LD	BC,5
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_3
	LD	BC,0
	LD	(IX+-15),BC
L_3:
;  167				mapNum++;
	LD	BC,(IX+-15)
	INC	BC
	LD	(IX+-15),BC
;  168				gfx_SetColor(1);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  169	
;  170				gfx_FillRectangle(0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  171				gfx_FillRectangle(0, 20, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  172				gfx_FillRectangle(0, 40, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  173				gfx_FillRectangle(0, 60, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  174				gfx_FillRectangle(0, 80, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  175	
;  176	
;  177				gfx_SetColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  178			}
L_5:
;  179	
;  180			gfx_PrintStringXY("Map1", 20, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__6
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  181			gfx_PrintStringXY("Map2", 20, 20);
	LD	BC,20
	PUSH	BC
	PUSH	BC
	LD	BC,L__7
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  182			gfx_PrintStringXY("Map3", 20, 40);
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__8
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  183			gfx_PrintStringXY("Map4", 20, 60);
	LD	BC,60
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__9
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  184			gfx_PrintStringXY("Map5", 20, 80);
	LD	BC,80
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__10
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  185	
;  186			if(mapNum == 1)	gfx_FillRectangle(0, 0, 4, 4);
	LD	HL,(IX+-15)
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_14
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  187			else if(mapNum == 2) gfx_FillRectangle(0, 20, 4, 4);			
	JR	L_15
L_14:
	LD	BC,2
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_12
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  188			else if(mapNum == 3) gfx_FillRectangle(0, 40, 4, 4);
	JR	L_15
L_12:
	LD	BC,3
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_10
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  189			else if(mapNum == 4) gfx_FillRectangle(0, 60, 4, 4);
	JR	L_15
L_10:
	LD	BC,4
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_8
	PUSH	BC
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  190			else if(mapNum == 5) gfx_FillRectangle(0, 80, 4, 4);
	JR	L_15
L_8:
	LD	BC,5
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_15
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_15:
;  191	
;  192			prevkey = key;
	LD	A,(IX+-86)
	LD	(IX+-92),A
;  193	
;  194			dbg_ClearConsole();
;  195			dbg_sprintf(dbgout, "%d", mapNum);
;  196		}
L_17:
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_18
;  197	
;  198		if(mapNum == 1)	{
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_27
;  199			zx7_Decompress( map, map1_compressed );
	LD	BC,_map1_compressed
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  200			hero.x = 0;
	LD	BC,0
	LD	(_hero),BC
;  201			hero.y = 150;
	LD	BC,150
	LD	(_hero+3),BC
;  202		}
;  203		else if(mapNum == 2) {
	JR	L_29
L_27:
	LD	BC,2
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_25
;  204			zx7_Decompress( map, map2_compressed );		
	LD	BC,_map2_compressed
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  205			hero.x = 0;
	LD	BC,0
	LD	(_hero),BC
;  206			hero.y = 180;
	LD	BC,180
	LD	(_hero+3),BC
;  207		}
;  208		else if(mapNum == 3) {
	JR	L_29
L_25:
	LD	BC,3
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_23
;  209			zx7_Decompress( map, map3_compressed );
	LD	BC,_map3_compressed
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  210			hero.x = 0;
	LD	BC,0
	LD	(_hero),BC
;  211			hero.y = 180;
	LD	BC,180
	LD	(_hero+3),BC
;  212		}
;  213		else if(mapNum == 4) {
	JR	L_29
L_23:
	LD	BC,4
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_21
;  214			zx7_Decompress( map, map4_compressed );
	LD	BC,_map4_compressed
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  215			hero.x = 50;
	LD	BC,50
	LD	(_hero),BC
;  216			hero.y = 100;
	LD	BC,100
	LD	(_hero+3),BC
;  217		}		
;  218		else if(mapNum == 5) {
	JR	L_29
L_21:
	LD	BC,5
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_29
;  219			zx7_Decompress( map, map5_compressed );
	LD	BC,_map5_compressed
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  220			hero.x = 80;
	LD	BC,80
	LD	(_hero),BC
;  221			hero.y = 180;
	LD	BC,180
	LD	(_hero+3),BC
;  222		}
L_29:
;  223	
;  224		gfx_ScaledSprite_NoClip(map, 0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  225	
;  226		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  227		
;  228		gfx_SetTransparentColor(1);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTransparentColor
	POP	BC
;  229	
;  230		gfx_ScaledSprite_NoClip(map, 0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  231	
;  232		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  233	
;  234		establishBoundaries(mapNum);
	LD	BC,(IX+-15)
	PUSH	BC
	CALL	_establishBoundaries
	POP	BC
;  235		gfx_SetColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  236	
;  237		gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  238		gfx_GetSprite(behindArrow, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-44)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  239		gfx_TransparentSprite_NoClip(HeroStill, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-51)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  240	
;  241		while(!(kb_Data[6] & kb_Clear)){
	JR	L_398
L_399:
;  242	
;  243			kb_Scan();
	CALL	_kb_Scan
;  244	
;  245			alphaKey = kb_Data[2] & kb_Alpha;
	LD	A,(16056340)
	AND	A,128
	LD	(IX+-46),A
;  246			secondKey = kb_Data[1] & kb_2nd;
	LD	A,(16056338)
	AND	A,32
	LD	(IX+-57),A
;  247			modeKey = kb_Data[1] & kb_Mode;
	LD	A,(16056338)
	AND	A,64
	LD	(IX+-56),A
;  248			upKey = kb_Data[7] & kb_Up;
	LD	A,(16056350)
	AND	A,8
	LD	(IX+-85),A
;  249			downKey = kb_Data[7] & kb_Down;
	LD	A,(16056350)
	AND	A,1
	LD	(IX+-93),A
;  250			leftKey = kb_Data[7] & kb_Left;
	LD	A,(16056350)
	AND	A,2
	LD	(IX+-47),A
;  251			rightKey = kb_Data[7] & kb_Right;
	LD	A,(16056350)
	AND	A,4
	LD	(IX+-48),A
;  252	
;  253			if(shootingDir == nothing && (alphaKey || kb_Data[3] & kb_0) && (rightKey || leftKey) && alphaReleased){
	LD	HL,(IX+-22)
	OR	A,A
	LD	BC,8
	SBC	HL,BC
	JR	NZ,L_103
	LD	A,(IX+-46)
	OR	A,A
	JR	NZ,L_33
	LD	A,(16056342)
	AND	A,1
	JR	Z,L_103
L_33:
	LD	A,(IX+-48)
	OR	A,A
	JR	NZ,L_34
	LD	A,(IX+-47)
	OR	A,A
	JR	Z,L_103
L_34:
	LD	A,(IX+-32)
	OR	A,A
	JR	Z,L_103
;  254				gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  255				gfx_Sprite(behindArrow, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-44)
	PUSH	BC
	CALL	_gfx_Sprite
	POP	BC
	POP	BC
	POP	BC
;  256				gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  257				
;  258				alphaReleased = false;
	LD	(IX+-32),0
;  259				if(rightKey) {
	LD	A,(IX+-48)
	OR	A,A
	JR	Z,L_51
;  260					if(!rightKeyNotAlpha) standing = false;
	LD	A,(IX+-52)
	OR	A,A
	JR	NZ,L_36
	LD	(IX+-37),0
L_36:
;  261					shootingDir = right;
	LD	BC,0
	LD	(IX+-22),BC
;  262					arrow.x = hero.x + 20;
	LD	IY,(_hero)
	LEA	BC,IY+20
	LD	(IX+-6),BC
;  263					arrow.y = hero.y + 8;
	LD	IY,(_hero+3)
	LEA	BC,IY+8
	LD	(IX+-3),BC
;  264					arrowInit.x = hero.x + 20;
	LD	IY,(_hero)
	LEA	BC,IY+20
	LD	(IX+-72),BC
;  265					arrowInit.y = hero.y + 8;
	LD	IY,(_hero+3)
	LEA	IY,IY+8
	LD	(IX+-69),IY
;  266					if(arrow.x >= 300){
	LD	HL,(IX+-6)
	LD	BC,300
	OR	A,A
	SBC	HL,BC
	JP	M,L_43
;  267						arrow.x -= arrow.x - 301;
	LD	BC,16776915
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-6),HL
;  268						if(mapNum == 4) arrow.x = 284;
	LD	HL,(IX+-15)
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_38
	LD	BC,284
	LD	(IX+-6),BC
L_38:
;  269						shootingDir = nothing;
	LD	BC,8
	LD	(IX+-22),BC
;  270						gfx_ScaledSprite_NoClip(map, 0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  271						gfx_GetSprite(behindArrow, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-44)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  272						gfx_TransparentSprite(arrowSpr, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-66)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  273						gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  274						gfx_TransparentSprite_NoClip(HeroStill, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-51)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  275						goto pastDisplaySprite;
	JR	L_103
;  276					}
;  277					else if(mapNum == 4 && arrow.x > 300) arrow.x += arrow.x - 300;
L_43:
	LD	BC,4
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_51
	LD	BC,(IX+-6)
	LD	HL,300
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_51
	LD	HL,(IX+-6)
	LD	BC,(IX+-6)
	LD	DE,16776916
	ADD	HL,DE
	ADD	HL,BC
	LD	(IX+-6),HL
;  278				}
L_51:
;  279				if(leftKey) {
	LD	A,(IX+-47)
	OR	A,A
	JR	Z,L_52
;  280					if(!leftKeyNotAlpha) standing = false;
	LD	A,(IX+-53)
	OR	A,A
	JR	NZ,L_46
	LD	(IX+-37),0
L_46:
;  281					shootingDir = left;
	LD	BC,1
	LD	(IX+-22),BC
;  282					arrow.x = hero.x - 20;
	LD	IY,(_hero)
	LEA	BC,IY+-20
	LD	(IX+-6),BC
;  283					arrow.y = hero.y + 8;
	LD	IY,(_hero+3)
	LEA	BC,IY+8
	LD	(IX+-3),BC
;  284					arrowInit.x = hero.x - 20;
	LD	IY,(_hero)
	LEA	BC,IY+-20
	LD	(IX+-72),BC
;  285					arrowInit.y = hero.y + 8;
	LD	IY,(_hero+3)
	LEA	IY,IY+8
	LD	(IX+-69),IY
;  286					if(arrow.x < 0){
	LD	HL,(IX+-6)
	CALL	__icmpzero
	JP	P,L_52
;  287						arrow.x += 0 - arrow.x;
	LD	HL,(IX+-6)
	CALL	__ineg
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	(IX+-6),HL
;  288						if(mapNum == 4) arrow.x = 20;
	LD	HL,(IX+-15)
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_48
	LD	BC,20
	LD	(IX+-6),BC
L_48:
;  289						shootingDir = nothing;
	LD	BC,8
	LD	(IX+-22),BC
;  290						gfx_ScaledSprite_NoClip(map, 0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  291						gfx_GetSprite(behindArrow, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-44)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  292						gfx_TransparentSprite(arrowSprLeft, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-78)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  293						gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  294						gfx_TransparentSprite_NoClip(HeroStill, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-51)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  295						goto pastDisplaySprite;
	JR	L_103
;  296					}
;  297				}
L_52:
;  298				gfx_GetSprite(behindArrow, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-44)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  299				pastDisplaySprite:
;  300					0;
;  301			}
L_103:
;  302			if(shootingDir != nothing){
	LD	BC,8
	LD	HL,(IX+-22)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_111
;  303				gfx_Sprite_NoClip(behindArrow, arrow.x, arrow.y);
	LD	C,(IX+-3)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-44)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  304				if(shootingDir == right){
	LD	HL,(IX+-22)
	CALL	__icmpzero
	JR	NZ,L_58
;  305					arrow.x += 4;
	LD	IY,(IX+-6)
	LEA	IY,IY+4
	LD	(IX+-6),IY
;  306					arrowDistance = arrow.x - arrowInit.x;
	LD	BC,(IX+-72)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	CALL	__itol
	CALL	__ltof
	LD	(IX+-61),BC
	LD	(IX+-58),A
;  307					if(arrowDistance >= 100) arrow.y = arrowInit.y + floor((arrowDistance - 100)*(arrowDistance - 100) / 1000 + 10);
	LD	HL,BC
	LD	BC,13107200
	LD	E,(IX+-58)
	LD	A,66
	CALL	__fcmp
	JP	M,L_58
	LD	HL,13107200
	LD	E,66
	LD	BC,(IX+-61)
	LD	A,(IX+-58)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
	CALL	__fmul
	LD	HL,7995392
	LD	E,68
	CALL	__fdiv
	LD	HL,2097152
	LD	E,65
	CALL	__fadd
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-215
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_floor
	PUSH	BC
	LD	BC,-215
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-69)
	CALL	__itol
	CALL	__ltof
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-67),H
	LD	(IY+-75),E	; unspill
	LD	H,(IY+-67)
	LD	(IY+-71),HL
	LD	(IY+-78),HL	; unspill
	LD	HL,(IY+-71)
	POP	IY
	LD	HL,BC
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-67),H
	LD	H,(IY+-75)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-67)
	LD	(IY+-71),HL
	LD	HL,(IY+-78)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-71)
	POP	IY
	CALL	__fadd
	CALL	__ftol
	LD	(IX+-3),BC
;  308				}
L_58:
;  309				if(shootingDir == left){
	LD	BC,1
	LD	HL,(IX+-22)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__42
	LD	A,1
	JR	L__43
L__42:
	XOR	A,A
L__43:
	LD	(IX+-90),A
	OR	A,A
	JR	NZ,L_59
;  310					arrow.x -= 4;
	LD	IY,(IX+-6)
	LEA	IY,IY+-4
	LD	(IX+-6),IY
;  311					arrowDistance = arrowInit.x -  arrow.x;
	LD	BC,IY
	LD	HL,(IX+-72)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	CALL	__itol
	CALL	__ltof
	LD	(IX+-61),BC
	LD	(IX+-58),A
;  312					if(arrowDistance >= 100) arrow.y = arrowInit.y + floor((arrowDistance - 100)*(arrowDistance - 100) / 1000 + 10);
	LD	HL,BC
	LD	BC,13107200
	LD	E,(IX+-58)
	LD	A,66
	CALL	__fcmp
	JP	M,L_59
	LD	HL,13107200
	LD	E,66
	LD	BC,(IX+-61)
	LD	A,(IX+-58)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
	CALL	__fmul
	LD	HL,7995392
	LD	E,68
	CALL	__fdiv
	LD	HL,2097152
	LD	E,65
	CALL	__fadd
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-215
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_floor
	PUSH	BC
	LD	BC,-215
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-69)
	CALL	__itol
	CALL	__ltof
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-67),H
	LD	(IY+-68),E	; unspill
	LD	H,(IY+-67)
	LD	(IY+-71),HL
	LD	(IY+-74),HL	; unspill
	LD	HL,(IY+-71)
	POP	IY
	LD	HL,BC
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-67),H
	LD	H,(IY+-68)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-67)
	LD	(IY+-71),HL
	LD	HL,(IY+-74)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-71)
	POP	IY
	CALL	__fadd
	CALL	__ftol
	LD	(IX+-3),BC
;  313				}
L_59:
;  314				gfx_GetSprite(behindArrow, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-44)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  315				if(shootingDir == right) gfx_TransparentSprite(arrowSpr, arrow.x, arrow.y);
	LD	HL,(IX+-22)
	CALL	__icmpzero
	JR	NZ,L_62
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-66)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
L_62:
;  316				if(shootingDir == left) gfx_TransparentSprite(arrowSprLeft, arrow.x, arrow.y);
	LD	A,(IX+-90)
	OR	A,A
	JR	NZ,L_101
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-78)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
L_101:
;  317				for(i = 0; i <= 20; i += 4){
	LD	BC,0
	LD	(IX+-25),BC
	JR	L_100
L_98:
;  318					arrowTouchingTip = gfx_GetPixel(arrow.x+i, arrow.y - 1) == 0 || gfx_GetPixel(arrow.x+i, arrow.y) == 0 || gfx_GetPixel(arrow.x+i, arrow.y + 1) == 0 || gfx_GetPixel(arrow.x+i, arrow.y + 2) == 0;
	LD	C,(IX+-3)
	DEC	C
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	LD	HL,(IX+-6)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_66
	LD	C,(IX+-3)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	LD	HL,(IX+-6)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_66
	LD	C,(IX+-3)
	INC	C
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	LD	HL,(IX+-6)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_66
	LD	C,(IX+-3)
	INC	C
	INC	C
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	LD	HL,(IX+-6)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_67
L_66:
	LD	BC,1
	LD	(IX+-128),BC
	JR	L_68
L_67:
	LD	BC,0
	LD	(IX+-128),BC
L_68:
	LD	A,(IX+-128)
	LD	(IX+-63),A
;  319					arrowTouchingBottom = gfx_GetPixel(arrow.x+i, arrow.y + 3) == 0;
	LD	A,(IX+-3)
	ADD	A,3
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-25)
	LD	HL,(IX+-6)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L__53
	LD	A,1
	JR	L__54
L__53:
	XOR	A,A
L__54:
	LD	(IX+-62),A
;  320					if(arrowTouchingTip || arrow.x < 0 || arrow.y < 0 || arrow.y > 240 || arrow.x > 300 || arrowTouchingBottom) {
	LD	A,(IX+-63)
	OR	A,A
	JR	NZ,L_97
	LD	HL,(IX+-6)
	CALL	__icmpzero
	JP	M,L_97
	LD	HL,(IX+-3)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_97
	LD	BC,(IX+-3)
	LD	HL,240
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_97
	LD	BC,(IX+-6)
	LD	HL,300
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_97
	LD	A,(IX+-62)
	OR	A,A
	JR	Z,L_99
L_97:
;  321						//dbg_ClearConsole();
;  322						//dbg_sprintf(dbgout, "i = %d\n", i);
;  323						//dbg_sprintf(dbgout, "arrowTouchingTip = %d\n", arrowTouchingTip);
;  324						//dbg_sprintf(dbgout, "arrowTouchingBottom = %d\n", arrowTouchingBottom);
;  325						//while(!os_GetCSC());
;  326						if(shootingDir == right && i <= 16 && !(arrow.x > 300) && !(arrow.x < 0) && !(arrow.y < 0) && !(arrow.y > 240) && arrowTouchingTip && (!arrowTouchingBottom || i >= 3))	{
	LD	HL,(IX+-22)
	CALL	__icmpzero
	JR	NZ,L_93
	LD	BC,(IX+-25)
	LD	HL,16
	OR	A,A
	SBC	HL,BC
	JP	M,L_93
	LD	BC,(IX+-6)
	LD	HL,300
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_93
	LD	HL,(IX+-6)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_93
	LD	HL,(IX+-3)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_93
	LD	BC,(IX+-3)
	LD	HL,240
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_93
	LD	A,(IX+-63)
	OR	A,A
	JR	Z,L_93
	LD	A,(IX+-62)
	OR	A,A
	JR	Z,L_83
	LD	BC,3
	LD	HL,(IX+-25)
	OR	A,A
	SBC	HL,BC
	JP	M,L_93
L_83:
;  327							arrow.x -= 20 - i;
	LD	HL,20
	LD	BC,(IX+-25)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-6),HL
;  328	
;  329							gfx_ScaledSprite_NoClip(map, 0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  330							gfx_GetSprite(behindArrow, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-44)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  331							gfx_TransparentSprite(arrowSpr, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-66)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  332							gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  333							gfx_TransparentSprite_NoClip(HeroStill, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-51)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  334	
;  335						}
L_93:
;  336						if(shootingDir == left && i >= 2 && !(arrow.x > 300) && !(arrow.x < 0) && !(arrow.y < 0) && !(arrow.y > 240) && arrowTouchingTip && (!arrowTouchingBottom || i >= 3)) {
	LD	BC,1
	LD	HL,(IX+-22)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_94
	LD	BC,2
	LD	HL,(IX+-25)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_94
	LD	BC,(IX+-6)
	LD	HL,300
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_94
	LD	HL,(IX+-6)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_94
	LD	HL,(IX+-3)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_94
	LD	BC,(IX+-3)
	LD	HL,240
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_94
	LD	A,(IX+-63)
	OR	A,A
	JR	Z,L_94
	LD	A,(IX+-62)
	OR	A,A
	JR	Z,L_92
	LD	BC,3
	LD	HL,(IX+-25)
	OR	A,A
	SBC	HL,BC
	JP	M,L_94
L_92:
;  337							arrow.x += i;
	LD	BC,(IX+-25)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-6),HL
;  338	
;  339							gfx_ScaledSprite_NoClip(map, 0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-35)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  340							gfx_GetSprite(behindArrow, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-44)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  341							gfx_TransparentSprite(arrowSprLeft, arrow.x, arrow.y);
	LD	BC,(IX+-3)
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,(IX+-78)
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  342							gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  343							gfx_TransparentSprite_NoClip(HeroStill, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-51)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  344						}
L_94:
;  345						shootingDir = nothing;
	LD	BC,8
	LD	(IX+-22),BC
;  346						arrowDistance = 80;
	LD	BC,10485760
	LD	(IX+-61),BC
	LD	A,66
	LD	(IX+-58),A
;  347						if(alphaReleased) standing = true;
	LD	A,(IX+-32)
	OR	A,A
	JR	Z,L_111
	LD	(IX+-37),1
;  348						break;
	JR	L_111
;  349					}
;  350				}
L_99:
	LD	IY,(IX+-25)
	LEA	IY,IY+4
	LD	(IX+-25),IY
L_100:
	LD	BC,(IX+-25)
	LD	HL,20
	OR	A,A
	SBC	HL,BC
	JP	P,L_98
;  351			}
L_111:
;  352	
;  353			if(!alphaKey && !kb_Data[3] & kb_0 && !alphaReleased) {
	LD	A,(IX+-46)
	OR	A,A
	JR	NZ,L_126
	LD	A,(16056342)
	OR	A,A
	JR	NZ,L_105
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-3),BC
	JR	L_106
L_105:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-3),BC
L_106:
	LEA	IY,IX+-128
	LD	A,(IY+-3)
	AND	A,1
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_126
	LD	A,(IX+-32)
	OR	A,A
	JR	NZ,L_126
;  354				alphaReleased = true;
	LD	(IX+-32),1
;  355				standing = true;
	LD	(IX+-37),1
;  356			}
L_126:
;  357	
;  358			rightKeyNotAlpha = (modeKey || rightKey) && (!(alphaKey && !kb_Data[3] & kb_0) || (shootingDir != nothing)) && (alphaReleased || standing);
	LD	A,(IX+-56)
	OR	A,A
	JR	NZ,L_119
	LD	A,(IX+-48)
	OR	A,A
	JR	Z,L_123
L_119:
	LD	A,(IX+-46)
	OR	A,A
	JR	Z,L_121
	LD	A,(16056342)
	OR	A,A
	JR	NZ,L_114
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-6),BC
	JR	L_115
L_114:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-6),BC
L_115:
	LEA	IY,IX+-128
	LD	A,(IY+-6)
	AND	A,1
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_121
	LD	BC,8
	LD	HL,(IX+-22)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_123
L_121:
	LD	A,(IX+-32)
	OR	A,A
	JR	NZ,L_122
	LD	A,(IX+-37)
	OR	A,A
	JR	Z,L_123
L_122:
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-9),BC
	JR	L_124
L_123:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-9),BC
L_124:
	LEA	IY,IX+-128
	LD	A,(IY+-9)
	LD	(IX+-52),A
;  359			leftKeyNotAlpha = (secondKey || leftKey) && (!(alphaKey && !kb_Data[3] & kb_0) || (shootingDir != nothing)) && (alphaReleased || standing);
	LD	A,(IX+-57)
	OR	A,A
	JR	NZ,L_134
	LD	A,(IX+-47)
	OR	A,A
	JR	Z,L_138
L_134:
	LD	A,(IX+-46)
	OR	A,A
	JR	Z,L_136
	LD	A,(16056342)
	OR	A,A
	JR	NZ,L_129
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-12),BC
	JR	L_130
L_129:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-12),BC
L_130:
	LEA	IY,IX+-128
	LD	A,(IY+-12)
	AND	A,1
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_136
	LD	BC,8
	LD	HL,(IX+-22)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_138
L_136:
	LD	A,(IX+-32)
	OR	A,A
	JR	NZ,L_137
	LD	A,(IX+-37)
	OR	A,A
	JR	Z,L_138
L_137:
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-15),BC
	JR	L_139
L_138:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-15),BC
L_139:
	LEA	IY,IX+-128
	LD	A,(IY+-15)
	LD	(IX+-53),A
;  360			downKeyNotAlpha = downKey && (!(alphaKey && !kb_Data[3] & kb_0) || (shootingDir != nothing)) && (alphaReleased || standing);
	LD	A,(IX+-93)
	OR	A,A
	JR	Z,L_151
	LD	A,(IX+-46)
	OR	A,A
	JR	Z,L_149
	LD	A,(16056342)
	OR	A,A
	JR	NZ,L_142
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-18),BC
	JR	L_143
L_142:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-18),BC
L_143:
	LEA	IY,IX+-128
	LD	A,(IY+-18)
	AND	A,1
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_149
	LD	BC,8
	LD	HL,(IX+-22)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_151
L_149:
	LD	A,(IX+-32)
	OR	A,A
	JR	NZ,L_150
	LD	A,(IX+-37)
	OR	A,A
	JR	Z,L_151
L_150:
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-21),BC
	JR	L_152
L_151:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-21),BC
L_152:
	LEA	IY,IX+-128
	LD	A,(IY+-21)
	LD	(IX+-109),A
;  361			upKeyNotAlpha = upKey && (!(alphaKey && !kb_Data[3] & kb_0) || (shootingDir != nothing)) && (alphaReleased || standing);
	LD	A,(IX+-85)
	OR	A,A
	JR	Z,L_164
	LD	A,(IX+-46)
	OR	A,A
	JR	Z,L_162
	LD	A,(16056342)
	OR	A,A
	JR	NZ,L_155
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-24),BC
	JR	L_156
L_155:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-24),BC
L_156:
	LEA	IY,IX+-128
	LD	A,(IY+-24)
	AND	A,1
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_162
	LD	BC,8
	LD	HL,(IX+-22)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_164
L_162:
	LD	A,(IX+-32)
	OR	A,A
	JR	NZ,L_163
	LD	A,(IX+-37)
	OR	A,A
	JR	Z,L_164
L_163:
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-27),BC
	JR	L_165
L_164:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-27),BC
L_165:
	LEA	IY,IX+-128
	LD	A,(IY+-27)
	LD	(IX+-54),A
;  362			
;  363			tempBool1 = isTouching(bottomFeet, false, velocity - 1, 0, hero.x , hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+-41)
	DEC	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-55),A
;  364			tempBool2 = isTouching(bottomFeet, false, 0, 0, hero.x , hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-31),A
;  365			velocity = (hero.y - lastStill.y ) / 50 + 2;
	LD	HL,(_hero+3)
	LD	BC,(IX+-9)
	OR	A,A
	SBC	HL,BC
	LD	BC,50
	CALL	__idivs
	INC	HL
	INC	HL
	LD	(IX+-41),HL
;  366	
;  367			dbg_ClearConsole();
;  368			dbg_sprintf(dbgout, "hero = (%d, %d)\n", hero.x, hero.y);
;  369			dbg_sprintf(dbgout, "velocity = %d\n", velocity);
;  370			dbg_sprintf(dbgout, "keyIsReleased = %d\n", keyIsReleased);
;  371			dbg_sprintf(dbgout, "ascending = %d\n", ascending);
;  372			dbg_sprintf(dbgout, "inLadder = %d\n", inLadder);
;  373			dbg_sprintf(dbgout, "doubleJumped = %d\n", doubleJumped);
;  374			dbg_sprintf(dbgout, "jumpingDir = %d\n", jumpingDir);
;  375			dbg_sprintf(dbgout, "tempBool1 = %d\n", tempBool1);
;  376			dbg_sprintf(dbgout, "tempBool2 = %d\n", tempBool2);
;  377			dbg_sprintf(dbgout, "shootingDir = %d\n", shootingDir);
;  378			dbg_sprintf(dbgout, "arrowInit = (%d, %d)\n", arrowInit.x, arrowInit.y);
;  379	
;  380			if(((rightKeyNotAlpha && !isTouching(rightSide, false, 0, 1, hero.x , hero.y)) || (leftKeyNotAlpha && !isTouching(leftSide, false, 0, -1, hero.x , hero.y))) && jumpingDir == nothing && !(inLadder && hero.y < 59 && hero.y > 41 && mapNum == 1) && !isBoosted && !ascending)  {
	LD	A,(IX+-52)
	OR	A,A
	JR	Z,L_190
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_191
L_190:
	LD	A,(IX+-53)
	OR	A,A
	JR	Z,L_395
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,16777215
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_395
L_191:
	LD	BC,8
	LD	HL,(IX+-30)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_395
	LD	A,(IX+-19)
	OR	A,A
	JR	Z,L_196
	LD	BC,59
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JP	P,L_196
	LD	BC,(_hero+3)
	LD	HL,41
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_196
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_395
L_196:
	LD	A,(IX+-27)
	OR	A,A
	JR	NZ,L_395
	LD	A,(IX+-26)
	OR	A,A
	JR	NZ,L_395
;  381				gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  382	
;  383				//IF RIGHT IS PRESSED
;  384				if(modeKey || rightKey) {
	LD	A,(IX+-56)
	OR	A,A
	JR	NZ,L_207
	LD	A,(IX+-48)
	OR	A,A
	JR	Z,L_208
L_207:
;  385					facingRight = true;
	LD	(IX+-36),1
;  386					if((upKeyNotAlpha) && (!inLadder || (mapNum == 1 && hero.y == 40) || (mapNum == 2 && hero.y == 120))) {
	LD	A,(IX+-54)
	OR	A,A
	JR	Z,L_206
	LD	A,(IX+-19)
	OR	A,A
	JR	Z,L_205
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_202
	LD	BC,40
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_205
L_202:
	LD	BC,2
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_206
	LD	BC,120
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_206
L_205:
;  387						jumpingDir = right;
	LD	BC,0
	LD	(IX+-30),BC
;  388						ascending = true;
	LD	(IX+-26),1
;  389						keyIsReleased = false;
	LD	(IX+-38),0
;  390						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-12),BC
;  391						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-9),BC
;  392						if(!tempBool2) doubleJumped = true;
	LD	A,(IX+-31)
	OR	A,A
	JR	NZ,L_206
	LD	(IX+-45),1
;  393					}
L_206:
;  394					hero.x += 2;
	LD	IY,(_hero)
	LEA	BC,IY+2
	LD	(_hero),BC
;  395				};
L_208:
;  396				//IF LEFT IS PRESSED
;  397				if(secondKey || leftKey){ 
	LD	A,(IX+-57)
	OR	A,A
	JR	NZ,L_218
	LD	A,(IX+-47)
	OR	A,A
	JR	Z,L_235
L_218:
;  398					facingRight = false;
	LD	(IX+-36),0
;  399					if((upKeyNotAlpha) && (!inLadder || (mapNum == 1 && hero.y == 40) || (mapNum == 2 && hero.y == 120))) {
	LD	A,(IX+-54)
	OR	A,A
	JR	Z,L_217
	LD	A,(IX+-19)
	OR	A,A
	JR	Z,L_216
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_213
	LD	BC,40
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_216
L_213:
	LD	BC,2
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_217
	LD	BC,120
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_217
L_216:
;  400						jumpingDir = left;
	LD	BC,1
	LD	(IX+-30),BC
;  401						ascending = true;
	LD	(IX+-26),1
;  402						keyIsReleased = false;
	LD	(IX+-38),0
;  403	
;  404						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-12),BC
;  405						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-9),BC
;  406						if(!tempBool2) doubleJumped = true;
	LD	A,(IX+-31)
	OR	A,A
	JR	NZ,L_217
	LD	(IX+-45),1
;  407					}				
L_217:
;  408					hero.x -= 2;
	LD	IY,(_hero)
	LEA	BC,IY+-2
	LD	(_hero),BC
;  409				}
L_235:
;  410	
;  411				//IF IS IN AIR
;  412				if(!tempBool2 && !inLadder){
	LD	A,(IX+-31)
	OR	A,A
	JR	NZ,L_234
	LD	A,(IX+-19)
	OR	A,A
	JR	NZ,L_234
;  413						if(!tempBool1)	hero.y += velocity;
	LD	A,(IX+-55)
	OR	A,A
	JR	NZ,L_224
	LD	BC,(IX+-41)
	LD	HL,(_hero+3)
	ADD	HL,BC
	LD	(_hero+3),HL
;  414						else if(!tempBool2 && tempBool1) hero.y++;
	JR	L_227
L_224:
	LD	A,(IX+-31)
	OR	A,A
	JR	NZ,L_227
	LD	A,(IX+-55)
	OR	A,A
	JR	Z,L_227
	LD	BC,(_hero+3)
	INC	BC
	LD	(_hero+3),BC
L_227:
;  415	
;  416						if(isTouching(rightSide, false, 0, 0, hero.x , hero.y)) hero.x--;
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_230
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
L_230:
;  417						if(isTouching(leftSide, false, 0, 0, hero.x , hero.y)) hero.x++;
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_237
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
;  418				}
;  419				else if(!inLadder && tempBool2){
	JR	L_237
L_234:
	LD	A,(IX+-19)
	OR	A,A
	JR	NZ,L_237
	LD	A,(IX+-31)
	OR	A,A
	JR	Z,L_237
;  420					lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-9),BC
;  421				}
L_237:
;  422	
;  423				if(isTouching(bottomFeet, true, 0, 0, hero.x , hero.y)) {
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_238
;  424					isBoosted = true;
	LD	(IX+-27),1
;  425					ascending = true;
	LD	(IX+-26),1
;  426					lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-12),BC
;  427					lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-9),BC
;  428				}
L_238:
;  429	
;  430				inLadder = false;
	LD	(IX+-19),0
;  431				if((hero.x >= 106 && hero.x <= 136 && hero.y >= 39 && hero.y <= 140 && mapNum == 1) || (hero.x >= 271 && mapNum == 2 && hero.y >= 120)) inLadder = true;
	LD	HL,(_hero)
	LD	BC,106
	OR	A,A
	SBC	HL,BC
	JP	M,L_245
	LD	BC,(_hero)
	LD	HL,136
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_245
	LD	BC,39
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_245
	LD	BC,(_hero+3)
	LD	HL,140
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_245
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_246
L_245:
	LD	BC,271
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_248
	LD	BC,2
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_248
	LD	BC,120
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_248
L_246:
	LD	(IX+-19),1
L_248:
;  432	
;  433				if(hero.x < 0) hero.x = 0;
	LD	HL,(_hero)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_250
	LD	BC,0
	LD	(_hero),BC
L_250:
;  434				if(hero.x > 300) hero.x = 300;
	LD	BC,(_hero)
	LD	HL,300
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_251
	LD	BC,300
	LD	(_hero),BC
L_251:
;  435	
;  436				gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  437	
;  438				if(rightKey || modeKey){
	LD	A,(IX+-48)
	OR	A,A
	JR	NZ,L_253
	LD	A,(IX+-56)
	OR	A,A
	JR	Z,L_256
L_253:
;  439					distance = hero.x - lastStill.x;
	LD	HL,(_hero)
	LD	BC,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	CALL	__itol
	CALL	__ltof
	LD	(IX+-119),BC
	LD	(IX+-116),A
;  440					step = floor(distance/6);
	LD	HL,12582912
	LD	E,64
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_floor
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	CALL	__ftol
	LD	(IX+-99),BC
;  441	
;  442					gfx_TransparentSprite_NoClip(heroRunRight[ step % 3 ], hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,3
	LD	DE,(_hero)
	PUSH	DE
	LD	HL,(IX+-99)
	CALL	__iremu
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,IX
	LD	DE,-185
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  443				}
L_256:
;  444				if(secondKey || leftKey){
	LD	A,(IX+-57)
	OR	A,A
	JR	NZ,L_255
	LD	A,(IX+-47)
	OR	A,A
	JR	Z,L_397
L_255:
;  445					distance = lastStill.x - hero.x;
	LD	BC,(_hero)
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	CALL	__itol
	CALL	__ltof
	LD	(IX+-119),BC
	LD	(IX+-116),A
;  446					step = floor(distance/6);
	LD	HL,12582912
	LD	E,64
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_floor
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	CALL	__ftol
	LD	(IX+-99),BC
;  447	
;  448					gfx_TransparentSprite_NoClip(heroRunLeft[ step % 3 ], hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,3
	LD	DE,(_hero)
	PUSH	DE
	LD	HL,(IX+-99)
	CALL	__iremu
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,IX
	LD	DE,-176
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  449				}
;  450	
;  451			}
;  452			//IF NOTHING IS PRESSED
;  453			else{
	JR	L_397
L_395:
;  454	
;  455				gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  456	
;  457	
;  458				//IF IS IN AIR
;  459				if(!tempBool2 && !inLadder && !ascending){
	LD	A,(IX+-31)
	OR	A,A
	JR	NZ,L_276
	LD	A,(IX+-19)
	OR	A,A
	JR	NZ,L_276
	LD	A,(IX+-26)
	OR	A,A
	JR	NZ,L_276
;  460	
;  461						if(!tempBool1)	hero.y += velocity;
	LD	A,(IX+-55)
	OR	A,A
	JR	NZ,L_263
	LD	BC,(IX+-41)
	LD	HL,(_hero+3)
	ADD	HL,BC
	LD	(_hero+3),HL
;  462						else if(!tempBool2 && tempBool1) hero.y++;
	JR	L_266
L_263:
	LD	A,(IX+-31)
	OR	A,A
	JR	NZ,L_266
	LD	A,(IX+-55)
	OR	A,A
	JR	Z,L_266
	LD	BC,(_hero+3)
	INC	BC
	LD	(_hero+3),BC
L_266:
;  463	
;  464						if(isTouching(rightSide, false, 0, 0, hero.x , hero.y)) hero.x--;
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_269
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
L_269:
;  465						if(isTouching(leftSide, false, 0, 0, hero.x , hero.y)) hero.x++;
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_270
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
L_270:
;  466						gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  467				}
;  468				else if(tempBool2 && !inLadder && !ascending){
	JR	L_289
L_276:
	LD	A,(IX+-31)
	OR	A,A
	JR	Z,L_289
	LD	A,(IX+-19)
	OR	A,A
	JR	NZ,L_289
	LD	A,(IX+-26)
	OR	A,A
	JR	NZ,L_289
;  469					jumpingDir = nothing;
	LD	BC,8
	LD	(IX+-30),BC
;  470					doubleJumped = false;
	LD	(IX+-45),0
;  471					keyIsReleased = false;
	LD	(IX+-38),0
;  472					if(isTouching(bottomFeet, true, 0, 0, hero.x , hero.y)) {
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_289
;  473						isBoosted = true;
	LD	(IX+-27),1
;  474						ascending = true;
	LD	(IX+-26),1
;  475						jumpingDir = nothing;
	LD	BC,8
	LD	(IX+-30),BC
;  476						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-12),BC
;  477						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-9),BC
;  478						doubleJumped = false;
	LD	(IX+-45),0
;  479					}	
;  480				}
L_289:
;  481	
;  482				//IF ASCENDING
;  483				if(ascending){
	LD	A,(IX+-26)
	OR	A,A
	JR	Z,L_304
;  484					inLadder = false;
	LD	(IX+-19),0
;  485					if(!isBoosted) velocity = -2;
	LD	A,(IX+-27)
	OR	A,A
	JR	NZ,L_278
	LD	BC,16777214
	LD	(IX+-41),BC
;  486					else velocity = -10;
	JR	L_280
L_278:
	LD	BC,16777206
	LD	(IX+-41),BC
L_280:
;  487	
;  488					if(!isTouching(topHead, false, velocity + 1, 0, hero.x , hero.y)) hero.y += velocity;
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+-41)
	INC	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_286
	LD	BC,(IX+-41)
	LD	HL,(_hero+3)
	ADD	HL,BC
	LD	(_hero+3),HL
L_286:
;  489					if(((lastStill.y - hero.y > 25 && !isBoosted) || (lastStill.y - hero.y > 160 && isBoosted)) || isTouching(topHead, false, velocity + 1, 0, hero.x , hero.y)) {
	LD	BC,(_hero+3)
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,25
	OR	A,A
	SBC	HL,BC
	JP	P,L_283
	LD	A,(IX+-27)
	OR	A,A
	JR	Z,L_285
L_283:
	LD	BC,(_hero+3)
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,160
	OR	A,A
	SBC	HL,BC
	JP	P,L_284
	LD	A,(IX+-27)
	OR	A,A
	JR	NZ,L_285
L_284:
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+-41)
	INC	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_287
L_285:
;  490						ascending = false;
	LD	(IX+-26),0
;  491						isBoosted = false;
	LD	(IX+-27),0
;  492						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-12),BC
;  493						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-9),BC
;  494					}
L_287:
;  495					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  496				}
L_304:
;  497	
;  498				//MOVING LADDER
;  499				if(inLadder && (upKeyNotAlpha) && !(leftKey || secondKey) && !(rightKey || modeKey)){
	LD	A,(IX+-19)
	OR	A,A
	JR	Z,L_303
	LD	A,(IX+-54)
	OR	A,A
	JR	Z,L_303
	LD	A,(IX+-47)
	OR	A,A
	JR	NZ,L_303
	LD	A,(IX+-57)
	OR	A,A
	JR	NZ,L_303
	LD	A,(IX+-48)
	OR	A,A
	JR	NZ,L_303
	LD	A,(IX+-56)
	OR	A,A
	JR	NZ,L_303
;  500					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  501					hero.y -= 2;
	LD	IY,(_hero+3)
	LEA	BC,IY+-2
	LD	(_hero+3),BC
;  502					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  503				}
;  504				else if(inLadder && downKeyNotAlpha){
	JR	L_309
L_303:
	LD	A,(IX+-19)
	OR	A,A
	JR	Z,L_309
	LD	A,(IX+-109)
	OR	A,A
	JR	Z,L_309
;  505					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  506					if(hero.y != 140 && mapNum == 1 || mapNum != 1 && hero.y != 200) hero.y += 2;
	LD	BC,140
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_298
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_299
L_298:
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_300
	LD	BC,200
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_300
L_299:
	LD	IY,(_hero+3)
	LEA	BC,IY+2
	LD	(_hero+3),BC
L_300:
;  507					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  508				}
L_309:
;  509	
;  510				if(!(upKey) && !keyIsReleased  && !doubleJumped && jumpingDir != nothing) keyIsReleased = true;
	LD	A,(IX+-85)
	OR	A,A
	JR	NZ,L_318
	LD	A,(IX+-38)
	OR	A,A
	JR	NZ,L_318
	LD	A,(IX+-45)
	OR	A,A
	JR	NZ,L_318
	LD	BC,8
	LD	HL,(IX+-30)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_318
	LD	(IX+-38),1
L_318:
;  511	
;  512				
;  513				//CHECK FOR JUMPING UP
;  514				if(upKeyNotAlpha && !doubleJumped && !inLadder && ((keyIsReleased && jumpingDir != nothing) || (!keyIsReleased && jumpingDir == nothing))) {
	LD	A,(IX+-54)
	OR	A,A
	JR	Z,L_393
	LD	A,(IX+-45)
	OR	A,A
	JR	NZ,L_393
	LD	A,(IX+-19)
	OR	A,A
	JR	NZ,L_393
	LD	A,(IX+-38)
	OR	A,A
	JR	Z,L_314
	LD	BC,8
	LD	HL,(IX+-30)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_317
L_314:
	LD	A,(IX+-38)
	OR	A,A
	JR	NZ,L_393
	LD	BC,8
	LD	HL,(IX+-30)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_393
L_317:
;  515					jumpingDir = up;
	LD	BC,2
	LD	(IX+-30),BC
;  516					isBoosted = false;
	LD	(IX+-27),0
;  517					ascending = true;
	LD	(IX+-26),1
;  518	
;  519					lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-12),BC
;  520					lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-9),BC
;  521	
;  522					keyIsReleased = false;
	LD	(IX+-38),0
;  523	
;  524					if(!tempBool2) doubleJumped = true;
	LD	A,(IX+-31)
	OR	A,A
	JR	NZ,L_393
	LD	(IX+-45),1
;  525					
;  526				}
L_393:
;  527				//STANDING STILL ANIMATION
;  528				if(jumpingDir == nothing && !isBoosted){
	LD	BC,8
	LD	HL,(IX+-30)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__213
	LD	A,1
	JR	L__214
L__213:
	XOR	A,A
L__214:
	LD	(IX+-91),A
	OR	A,A
	JR	NZ,L_392
	LD	A,(IX+-27)
	OR	A,A
	JR	NZ,L_392
;  529	
;  530					inLadder = false;
	LD	(IX+-19),0
;  531					if((hero.x >= 106 && hero.x <= 136 && hero.y >= 39 && hero.y <= 140 && mapNum == 1) || (hero.x >= 271 && mapNum == 2 && hero.y >= 120) && jumpingDir == nothing) inLadder = true;
	LD	HL,(_hero)
	LD	BC,106
	OR	A,A
	SBC	HL,BC
	JP	M,L_327
	LD	BC,(_hero)
	LD	HL,136
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_327
	LD	BC,39
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_327
	LD	BC,(_hero+3)
	LD	HL,140
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_327
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_328
L_327:
	LD	BC,271
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_330
	LD	BC,2
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_330
	LD	BC,120
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_330
	LD	A,(IX+-91)
	OR	A,A
	JR	NZ,L_330
L_328:
	LD	(IX+-19),1
L_330:
;  532	
;  533					if(isTouching(bottomFeet, true, 0, 0, hero.x , hero.y)) {
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_331
;  534						isBoosted = true;
	LD	(IX+-27),1
;  535						ascending = true;
	LD	(IX+-26),1
;  536						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-12),BC
;  537						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-9),BC
;  538					}
L_331:
;  539	
;  540					gfx_TransparentSprite_NoClip(HeroStill, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-51)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  541				}
;  542	
;  543				//JUMPING RIGHT ANIMATION
;  544				else if(jumpingDir == right){
	JR	L_397
L_392:
	LD	HL,(IX+-30)
	CALL	__icmpzero
	JR	NZ,L_390
;  545					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  546	
;  547					if(hero.x - lastStill.x <= 50 && !isTouching(rightSide, false, 0, 1, hero.x , hero.y)) hero.x += 2;
	LD	BC,(IX+-12)
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	JP	M,L_338
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_338
	LD	IY,(_hero)
	LEA	BC,IY+2
	LD	(_hero),BC
;  548					else if(hero.x - lastStill.x > 50 && hero.x - lastStill.x <= 65 && !isTouching(rightSide, false, 0, 0, hero.x , hero.y)) hero.x++;
	JR	L_340
L_338:
	LD	HL,(_hero)
	LD	BC,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	JP	P,L_340
	LD	HL,(_hero)
	LD	BC,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,65
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_340
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_340
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
L_340:
;  549	
;  550					if(hero.x > 300) hero.x = 300;
	LD	BC,(_hero)
	LD	HL,300
	OR	A,A
	SBC	HL,BC
	JP	P,L_341
	LD	BC,300
	LD	(_hero),BC
L_341:
;  551	
;  552					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  553	
;  554					if(hero.x - lastStill.x <= 12) gfx_TransparentSprite_NoClip(HeroJumpRight0, hero.x, hero.y);
	LD	BC,(IX+-12)
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_347
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-75)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  555					else if(hero.x - lastStill.x > 12 && hero.x - lastStill.x <= 24) gfx_TransparentSprite_NoClip(HeroJumpRight1, hero.x, hero.y);
	JR	L_397
L_347:
	LD	HL,(_hero)
	LD	BC,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_345
	LD	HL,(_hero)
	LD	BC,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_345
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-81)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  556					else if(hero.x - lastStill.x > 24) gfx_TransparentSprite_NoClip(HeroJumpRight2, hero.x, hero.y);
	JR	L_397
L_345:
	LD	HL,(_hero)
	LD	BC,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_397
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-84)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  557	
;  558					
;  559				}
;  560				//JUMPING LEFT ANIMATION
;  561				else if(jumpingDir == left){
	JR	L_397
L_390:
	LD	BC,1
	LD	HL,(IX+-30)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_388
;  562					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  563	
;  564					if(lastStill.x - hero.x <= 50 && !isTouching(leftSide, false, 0, -1, hero.x , hero.y)) hero.x -= 2;
	LD	HL,(IX+-12)
	LD	BC,(_hero)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_354
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,16777215
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_354
	LD	IY,(_hero)
	LEA	BC,IY+-2
	LD	(_hero),BC
;  565					else if(lastStill.x - hero.x > 50 && lastStill.x - hero.x <= 65 && !isTouching(leftSide, false, 0, 0, hero.x , hero.y)) hero.x--;
	JR	L_356
L_354:
	LD	BC,(_hero)
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	JP	P,L_356
	LD	BC,(_hero)
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,65
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_356
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_356
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
L_356:
;  566	
;  567					if(hero.x < 0) hero.x = 0;
	LD	HL,(_hero)
	CALL	__icmpzero
	JP	P,L_357
	LD	BC,0
	LD	(_hero),BC
L_357:
;  568	
;  569					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  570	
;  571					if(lastStill.x - hero.x <= 12) gfx_TransparentSprite_NoClip(HeroJumpLeft0, hero.x, hero.y);
	LD	HL,(IX+-12)
	LD	BC,(_hero)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_363
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-122)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  572					else if(lastStill.x - hero.x > 12 && lastStill.x - hero.x <= 24) gfx_TransparentSprite_NoClip(HeroJumpLeft1, hero.x, hero.y);
	JR	L_397
L_363:
	LD	BC,(_hero)
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_361
	LD	BC,(_hero)
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_361
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-125)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  573					else if(lastStill.x - hero.x > 24) gfx_TransparentSprite_NoClip(HeroJumpLeft2, hero.x, hero.y);
	JR	L_397
L_361:
	LD	BC,(_hero)
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_397
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LEA	IY,IX+-128
	LD	BC,(IY+-30)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  574				}
;  575				//JUMPING UP ANIMATION
;  576				else if(jumpingDir == up){
	JR	L_397
L_388:
	LD	BC,2
	LD	HL,(IX+-30)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_386
;  577					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  578	
;  579					if(leftKeyNotAlpha && !isTouching(leftSide, false, 0, 0, hero.x , hero.y)) {
	LD	A,(IX+-53)
	OR	A,A
	JR	Z,L_370
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_370
;  580						hero.x--;
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
;  581						facingRight = false;
	LD	(IX+-36),0
;  582					}
L_370:
;  583					if(rightKeyNotAlpha && !isTouching(rightSide, false, 0, 0, hero.x , hero.y)) {
	LD	A,(IX+-52)
	OR	A,A
	JR	Z,L_371
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_371
;  584						hero.x++;
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
;  585						facingRight = true;
	LD	(IX+-36),1
;  586					}
L_371:
;  587	
;  588					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  589					
;  590					if(facingRight) gfx_TransparentSprite_NoClip(HeroJumpUpRight, hero.x, hero.y);
	LD	A,(IX+-36)
	OR	A,A
	JR	Z,L_373
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-89)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  591					else gfx_TransparentSprite_NoClip(HeroJumpUpLeft, hero.x, hero.y);
	JR	L_397
L_373:
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-96)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  592					
;  593				}
;  594				else if(isBoosted){
	JR	L_397
L_386:
	LD	A,(IX+-27)
	OR	A,A
	JR	Z,L_397
;  595					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  596	
;  597					if(leftKeyNotAlpha && !isTouching(leftSide, false, 0, 0, hero.x , hero.y)) {
	LD	A,(IX+-53)
	OR	A,A
	JR	Z,L_380
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_380
;  598						hero.x--;
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
;  599						facingRight = false;
	LD	(IX+-36),0
;  600					}
L_380:
;  601					if(rightKeyNotAlpha && !isTouching(rightSide, false, 0, 0, hero.x , hero.y)) {
	LD	A,(IX+-52)
	OR	A,A
	JR	Z,L_381
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_381
;  602						hero.x++;
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
;  603						facingRight = true;
	LD	(IX+-36),1
;  604					}
L_381:
;  605	
;  606					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  607					
;  608					if(facingRight) gfx_TransparentSprite_NoClip(HeroJumpUpRight, hero.x, hero.y);
	LD	A,(IX+-36)
	OR	A,A
	JR	Z,L_383
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-89)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  609					else gfx_TransparentSprite_NoClip(HeroJumpUpLeft, hero.x, hero.y);
	JR	L_397
L_383:
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-96)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  610					
;  611				}
;  612			}
L_397:
;  613			gfx_BlitBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  614		}
L_398:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_399
;  615	
;  616		gfx_End();
	CALL	_gfx_End
;  617	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_isTouching                         IMPORT  -----   function
;_gfx_GetPixel                       IMPORT  -----   function
;_floor                              IMPORT  -----   function
;_gfx_TransparentSprite              IMPORT  -----   function
;_gfx_Sprite                         IMPORT  -----   function
;_gfx_Sprite_NoClip                  IMPORT  -----   function
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_gfx_GetSprite                      IMPORT  -----   function
;_establishBoundaries                IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_SetTransparentColor            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_map5_compressed                    IMPORT    236   variable
;_map4_compressed                    IMPORT    188   variable
;_map3_compressed                    IMPORT    126   variable
;_map2_compressed                    IMPORT    241   variable
;_map1_compressed                    IMPORT    204   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_global_palette                     IMPORT    128   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_srand                              IMPORT  -----   function
;_hero                               STATIC      6   variable
;_gfx_FlipSpriteY                    IMPORT  -----   function
;_arrow_compressed                   IMPORT     22   variable
;_HeroJumpUpRight_compressed         IMPORT    134   variable
;_HeroJumpRight2_compressed          IMPORT    177   variable
;_HeroJumpRight1_compressed          IMPORT    138   variable
;_HeroJumpRight0_compressed          IMPORT    130   variable
;_HeroRight2_compressed              IMPORT    144   variable
;_HeroRight1_compressed              IMPORT    142   variable
;_HeroRight0_compressed              IMPORT    136   variable
;_HeroStill_compressed               IMPORT    115   variable
;_zx7_Decompress                     IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;heroJumpRight                       IX-194      9   variable
;heroRunRight                        IX-185      9   variable
;heroRunLeft                         IX-176      9   variable
;arrowSprTiltRight                   IX-167      3   variable
;arrowSprTiltLeft                    IX-164      3   variable
;HeroLeft2                           IX-161      3   variable
;HeroJumpLeft2                       IX-158      3   variable
;temp166                             IX-155      3   variable
;temp157                             IX-152      3   variable
;temp153                             IX-149      3   variable
;temp144                             IX-146      3   variable
;temp140                             IX-143      3   variable
;temp131                             IX-140      3   variable
;temp125                             IX-137      3   variable
;temp116                             IX-134      3   variable
;temp107                             IX-131      3   variable
;temp69                              IX-128      3   variable
;HeroJumpLeft1                       IX-125      3   variable
;HeroJumpLeft0                       IX-122      3   variable
;distance                            IX-119      4   variable
;HeroLeft1                           IX-115      3   variable
;HeroLeft0                           IX-112      3   variable
;downKeyNotAlpha                     IX-109      1   variable
;HeroRight0                          IX-108      3   variable
;HeroRight2                          IX-105      3   variable
;HeroRight1                          IX-102      3   variable
;step                                 IX-99      3   variable
;HeroJumpUpLeft                       IX-96      3   variable
;downKey                              IX-93      1   variable
;prevkey                              IX-92      1   variable
;G_1                                  IX-91      1   variable
;G_0                                  IX-90      1   variable
;HeroJumpUpRight                      IX-89      3   variable
;key                                  IX-86      1   variable
;upKey                                IX-85      1   variable
;HeroJumpRight2                       IX-84      3   variable
;HeroJumpRight1                       IX-81      3   variable
;arrowSprLeft                         IX-78      3   variable
;HeroJumpRight0                       IX-75      3   variable
;arrowInit                            IX-72      6   variable
;arrowSpr                             IX-66      3   variable
;arrowTouchingTip                     IX-63      1   variable
;arrowTouchingBottom                  IX-62      1   variable
;arrowDistance                        IX-61      4   variable
;secondKey                            IX-57      1   variable
;modeKey                              IX-56      1   variable
;tempBool1                            IX-55      1   variable
;upKeyNotAlpha                        IX-54      1   variable
;leftKeyNotAlpha                      IX-53      1   variable
;rightKeyNotAlpha                     IX-52      1   variable
;HeroStill                            IX-51      3   variable
;rightKey                             IX-48      1   variable
;leftKey                              IX-47      1   variable
;alphaKey                             IX-46      1   variable
;doubleJumped                         IX-45      1   variable
;behindArrow                          IX-44      3   variable
;velocity                             IX-41      3   variable
;keyIsReleased                        IX-38      1   variable
;standing                             IX-37      1   variable
;facingRight                          IX-36      1   variable
;map                                  IX-35      3   variable
;alphaReleased                        IX-32      1   variable
;tempBool2                            IX-31      1   variable
;jumpingDir                           IX-30      3   variable
;isBoosted                            IX-27      1   variable
;ascending                            IX-26      1   variable
;i                                    IX-25      3   variable
;shootingDir                          IX-22      3   variable
;inLadder                             IX-19      1   variable
;behind_sprite                        IX-18      3   variable
;mapNum                               IX-15      3   variable
;lastStill                            IX-12      6   variable
;arrow                                 IX-6      6   variable


; Stack Frame Size: 221 (bytes)
;       Spill Code: -16 (instruction)


	SEGMENT STRSECT
L__6:
	DB	"Map1"
	DB	0
L__7:
	DB	"Map2"
	DB	0
L__8:
	DB	"Map3"
	DB	0
L__9:
	DB	"Map4"
	DB	0
L__10:
	DB	"Map5"
	DB	0
	SEGMENT CODE
;  618	
;  619	bool isTouching(enum bodyParts part, bool checkForPad, int yVelocity, int xVelocity, int x, int y){
_isTouching:
	LD	HL,-5
	CALL	__frameset
;  620		int f;
;  621	
;  622		bool check;
;  623		check = true;
	LD	(IX+-5),1
;  624		if(part == leftSide){
	LD	HL,(IX+6)
	CALL	__icmpzero
	JR	NZ,L_440
;  625			for(f = 3; f <= 40; f += 3) {
	LD	BC,3
	LD	(IX+-3),BC
	JR	L_406
L_404:
;  626				if(gfx_GetPixel(x + 2 + xVelocity, y + f + yVelocity) == 0 || x + xVelocity == 0) return true;
	LD	B,(IX+-3)
	LD	A,(IX+21)
	ADD	A,B
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	IY,(IX+18)
	LEA	HL,IY+2
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_403
	LD	BC,(IX+15)
	LD	HL,(IX+18)
	ADD	HL,BC
	CALL	__icmpzero
	JR	NZ,L_405
L_403:
	LD	A,1
	JR	L_442
;  627			}
L_405:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_406:
	LD	BC,(IX+-3)
	LD	HL,40
	OR	A,A
	SBC	HL,BC
	JP	P,L_404
	JR	L_441
;  628		}
;  629		else if(part == rightSide){
L_440:
	LD	BC,1
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_438
;  630			for(f = 3; f <= 40; f += 3) {
	LD	BC,3
	LD	(IX+-3),BC
	JR	L_411
L_409:
;  631				if(gfx_GetPixel(x + 17 + xVelocity, y + f + yVelocity) == 0 || x + 20 + xVelocity== 320) return true;
	LD	B,(IX+-3)
	LD	A,(IX+21)
	ADD	A,B
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	IY,(IX+18)
	LEA	HL,IY+17
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_408
	LD	IY,(IX+18)
	LEA	HL,IY+20
	LD	BC,(IX+15)
	ADD	HL,BC
	OR	A,A
	LD	BC,320
	SBC	HL,BC
	JR	NZ,L_410
L_408:
	LD	A,1
	JR	L_442
;  632			}
L_410:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_411:
	LD	BC,(IX+-3)
	LD	HL,40
	OR	A,A
	SBC	HL,BC
	JP	P,L_409
	JR	L_441
;  633		}
;  634		else if(part == topHead){
L_438:
	LD	BC,2
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_436
;  635			for(f = 3; f <= 16; f += 3) {
	LD	BC,3
	LD	(IX+-3),BC
	JR	L_416
L_414:
;  636				if(gfx_GetPixel(x + f + xVelocity, y + yVelocity) == 0 || y + yVelocity < 0) return true;
	LD	B,(IX+12)
	LD	A,(IX+21)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+18)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_413
	LD	BC,(IX+12)
	LD	HL,(IX+21)
	ADD	HL,BC
	CALL	__icmpzero
	JP	P,L_415
L_413:
	LD	A,1
	JR	L_442
;  637			}
L_415:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_416:
	LD	BC,(IX+-3)
	LD	HL,16
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_414
	JR	L_441
;  638		}
;  639		else if(part == bottomFeet && !checkForPad){
L_436:
	LD	BC,3
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__276
	LD	A,1
	JR	L__277
L__276:
	XOR	A,A
L__277:
	LD	(IX+-4),A
	OR	A,A
	JR	NZ,L_434
	LD	A,(IX+9)
	OR	A,A
	JR	NZ,L_434
;  640			for(f = 6; f <= 14; f += 3) {
	LD	BC,6
	LD	(IX+-3),BC
	JR	L_424
L_422:
;  641				if(gfx_GetPixel(x + f + xVelocity, y + 40 + yVelocity) == 0 || y + 41 + yVelocity > 240 || gfx_GetPixel(x + f + xVelocity, y + 40 + yVelocity) == 3 || gfx_GetPixel(hero.x + f + xVelocity, hero.y + 40 + yVelocity) == 4) return true;
	LD	A,(IX+21)
	ADD	A,40
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+18)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_421
	LD	IY,(IX+21)
	LEA	HL,IY+41
	LD	BC,(IX+12)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,240
	OR	A,A
	SBC	HL,BC
	JP	M,L_421
	LD	A,(IX+21)
	ADD	A,40
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+18)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	Z,L_421
	LD	A,(_hero+3)
	ADD	A,40
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_423
L_421:
	LD	A,1
	JR	L_442
;  642			}
L_423:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_424:
	LD	BC,(IX+-3)
	LD	HL,14
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_422
	JR	L_441
;  643		}
;  644		else if(part == bottomFeet && checkForPad){
L_434:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_441
	LD	A,(IX+9)
	OR	A,A
	JR	Z,L_441
;  645			for(f = 6; f <= 14; f += 3) {
	LD	BC,6
	LD	(IX+-3),BC
	JR	L_430
L_428:
;  646				if(gfx_GetPixel(x + f + xVelocity, y + 41 + yVelocity) != 3 || gfx_GetPixel(x + f + xVelocity, y + 40 + yVelocity) == 4) check = false;
	LD	A,(IX+21)
	ADD	A,41
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+18)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_427
	LD	A,(IX+21)
	ADD	A,40
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+18)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_429
L_427:
	LD	(IX+-5),0
;  647			}
L_429:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_430:
	LD	BC,(IX+-3)
	LD	HL,14
	OR	A,A
	SBC	HL,BC
	JP	P,L_428
;  648			return check;
	LD	A,(IX+-5)
	JR	L_442
;  649		}
L_441:
;  650		return false;
	XOR	A,A
;  651	}	
L_442:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _isTouching ***************************
;Name                         Addr/Register   Size   Type
;_hero                               STATIC      6   variable
;_gfx_GetPixel                       IMPORT  -----   function
;check                                 IX-5      1   variable
;G_2                                   IX-4      1   variable
;f                                     IX-3      3   variable
;y                                    IX+21      3   parameter
;x                                    IX+18      3   parameter
;xVelocity                            IX+15      3   parameter
;yVelocity                            IX+12      3   parameter
;checkForPad                           IX+9      1   parameter
;part                                  IX+6      3   parameter


; Stack Frame Size: 29 (bytes)
;       Spill Code: -16 (instruction)


;  652	void establishBoundaries(int numOfMap){
_establishBoundaries:
	LD	HL,-76
	CALL	__frameset
;  653		int x;
;  654		int y;
;  655	
;  656		int color;
;  657	
;  658		int map1colors[4] = {0, 5, 6, 7};
	LEA	DE,IX+-45
	LD	HL,_0temp443
	LD	BC,12
	LDIR	
;  659		int map2colors[9] = {0, 8, 9, 10, 11, 12, 13, 14, 15};
	LEA	DE,IX+-72
	LD	HL,_1temp444
	LD	BC,27
	LDIR	
;  660		int map3colors[2] = {0, 43};
	LEA	DE,IX+-15
	LD	HL,_2temp445
	LD	BC,6
	LDIR	
;  661		int map4colors[3] = {0, 17, 61};
	LEA	DE,IX+-24
	LD	HL,_3temp446
	LD	BC,9
	LDIR	
;  662		int map5colors[3] = {0, 19, 20};
	LEA	DE,IX+-33
	LD	HL,_4temp447
	LD	BC,9
	LDIR	
;  663	
;  664		for(x = 0; x < 320; x += 4){
	LD	BC,0
	LD	(IX+-9),BC
	JR	L_488
L_486:
;  665			for(y = 0; y < 240; y += 4){
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_485
L_483:
;  666				boundaries[y/4][x/4] = false;
	LD	BC,4
	LD	HL,(IX+-6)
	CALL	__idivs
	LD	BC,4
	LD	A,80
	CALL	__imul_b
	LD	DE,_boundaries
	ADD	HL,DE
	LD	DE,HL
	LD	HL,(IX+-9)
	CALL	__idivs
	ADD	HL,DE
	LD	(HL),0
;  667				switch(numOfMap){
	LD	HL,(IX+6)
	CALL	__seqcase
L__291:
	DW	5
	DW	1
	DB	0
	DW24	L_448	

	DW24	L_455	

	DW24	L_462	

	DW24	L_469	

	DW24	L_476	

	DW24	L_484	

;  668					case 1:
L_448:
;  669						for(color = 0; color < 4; color++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_453
L_451:
;  670							if(gfx_GetPixel(x, y) == map1colors[color])	boundaries[y / 4][x / 4] = true; 
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-45
	ADD	HL,BC
	LD	DE,HL
	LD	C,(IX+-6)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	LD	(IX+-75),DE
	LD	(IX+-76),D
	CALL	_gfx_GetPixel
	LD	DE,(IX+-75)
	LD	D,(IX+-76)
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	LD	HL,(HL)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_452
	LD	BC,4
	LD	HL,(IX+-6)
	CALL	__idivs
	LD	A,80
	CALL	__imul_b
	LD	BC,_boundaries
	ADD	HL,BC
	LD	DE,HL
	LD	HL,(IX+-9)
	LD	BC,4
	CALL	__idivs
	ADD	HL,DE
	LD	(HL),1
;  671						}
L_452:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_453:
	LD	BC,4
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_451
;  672						break;
	JR	L_484
;  673					case 2:
L_455:
;  674						for(color = 0; color < 9; color++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_460
L_458:
;  675							if(gfx_GetPixel(x, y) == map2colors[color])	boundaries[y / 4][x / 4] = true; 
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-72
	ADD	HL,BC
	LD	DE,HL
	LD	C,(IX+-6)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	LD	(IX+-75),DE
	LD	(IX+-76),D
	CALL	_gfx_GetPixel
	LD	DE,(IX+-75)
	LD	D,(IX+-76)
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	LD	HL,(HL)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_459
	LD	BC,4
	LD	HL,(IX+-6)
	CALL	__idivs
	LD	A,80
	CALL	__imul_b
	LD	BC,_boundaries
	ADD	HL,BC
	LD	DE,HL
	LD	HL,(IX+-9)
	LD	BC,4
	CALL	__idivs
	ADD	HL,DE
	LD	(HL),1
;  676						}
L_459:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_460:
	LD	BC,9
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_458
;  677						break;
	JR	L_484
;  678					case 3:
L_462:
;  679						for(color = 0; color < 2; color++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_467
L_465:
;  680							if(gfx_GetPixel(x, y) == map3colors[color])	boundaries[y / 4][x / 4] = true; 
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-15
	ADD	HL,BC
	LD	DE,HL
	LD	C,(IX+-6)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	LD	(IX+-75),DE
	LD	(IX+-76),D
	CALL	_gfx_GetPixel
	LD	DE,(IX+-75)
	LD	D,(IX+-76)
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	LD	HL,(HL)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_466
	LD	BC,4
	LD	HL,(IX+-6)
	CALL	__idivs
	LD	A,80
	CALL	__imul_b
	LD	BC,_boundaries
	ADD	HL,BC
	LD	DE,HL
	LD	HL,(IX+-9)
	LD	BC,4
	CALL	__idivs
	ADD	HL,DE
	LD	(HL),1
;  681						}
L_466:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_467:
	LD	BC,2
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_465
;  682						break;
	JR	L_484
;  683					case 4:
L_469:
;  684						for(color = 0; color < 3; color++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_474
L_472:
;  685							if(gfx_GetPixel(x, y) == map4colors[color])	boundaries[y / 4][x / 4] = true;
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-24
	ADD	HL,BC
	LD	DE,HL
	LD	C,(IX+-6)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	LD	(IX+-75),DE
	LD	(IX+-76),D
	CALL	_gfx_GetPixel
	LD	DE,(IX+-75)
	LD	D,(IX+-76)
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	LD	HL,(HL)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_473
	LD	BC,4
	LD	HL,(IX+-6)
	CALL	__idivs
	LD	A,80
	CALL	__imul_b
	LD	BC,_boundaries
	ADD	HL,BC
	LD	DE,HL
	LD	HL,(IX+-9)
	LD	BC,4
	CALL	__idivs
	ADD	HL,DE
	LD	(HL),1
;  686						}
L_473:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_474:
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_472
;  687						break;
	JR	L_484
;  688					case 5:
L_476:
;  689						for(color = 0; color < 3; color++) {
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_481
L_479:
;  690							if(gfx_GetPixel(x, y) == map5colors[color])	boundaries[y / 4][x / 4] = true; 
	LD	HL,(IX+-3)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-33
	ADD	HL,BC
	LD	DE,HL
	LD	C,(IX+-6)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	LD	(IX+-75),DE
	LD	(IX+-76),D
	CALL	_gfx_GetPixel
	LD	DE,(IX+-75)
	LD	D,(IX+-76)
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,DE
	LD	HL,(HL)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_480
	LD	BC,4
	LD	HL,(IX+-6)
	CALL	__idivs
	LD	A,80
	CALL	__imul_b
	LD	BC,_boundaries
	ADD	HL,BC
	LD	DE,HL
	LD	HL,(IX+-9)
	LD	BC,4
	CALL	__idivs
	ADD	HL,DE
	LD	(HL),1
;  691						}
L_480:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_481:
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_479
;  692						break;
;  693				}
;  694			}
L_484:
	LD	IY,(IX+-6)
	LEA	IY,IY+4
	LD	(IX+-6),IY
L_485:
	LD	BC,240
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_483
	LD	IY,(IX+-9)
	LEA	IY,IY+4
	LD	(IX+-9),IY
;  695		}
L_488:
	LD	BC,320
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_486
	LD	SP,IX
	POP	IX
	RET	


;**************************** _establishBoundaries ***************************
;Name                         Addr/Register   Size   Type
;_gfx_GetPixel                       IMPORT  -----   function
;_boundaries                         STATIC   4800   variable
;_4temp447                           STATIC      9   variable
;_3temp446                           STATIC      9   variable
;_2temp445                           STATIC      6   variable
;_1temp444                           STATIC     27   variable
;_0temp443                           STATIC     12   variable
;map2colors                           IX-72     27   variable
;map1colors                           IX-45     12   variable
;map5colors                           IX-33      9   variable
;map4colors                           IX-24      9   variable
;map3colors                           IX-15      6   variable
;x                                     IX-9      3   variable
;y                                     IX-6      3   variable
;color                                 IX-3      3   variable
;numOfMap                              IX+6      3   parameter


; Stack Frame Size: 85 (bytes)
;       Spill Code: -16 (instruction)


	SEGMENT TEXT
_0temp443:
	DW	0
	DB	0
	DW	5
	DB	0
	DW	6
	DB	0
	DW	7
	DB	0
_1temp444:
	DW	0
	DB	0
	DW	8
	DB	0
	DW	9
	DB	0
	DW	10
	DB	0
	DW	11
	DB	0
	DW	12
	DB	0
	DW	13
	DB	0
	DW	14
	DB	0
	DW	15
	DB	0
_2temp445:
	DW	0
	DB	0
	DW	43
	DB	0
_3temp446:
	DW	0
	DB	0
	DW	17
	DB	0
	DW	61
	DB	0
_4temp447:
	DW	0
	DB	0
	DW	19
	DB	0
	DW	20
	DB	0
	XREF _arrow_compressed:ROM
	XREF _map5_compressed:ROM
	XREF _map4_compressed:ROM
	XREF _map3_compressed:ROM
	XREF _map2_compressed:ROM
	XREF _map1_compressed:ROM
	XREF _HeroJumpUpRight_compressed:ROM
	XREF _HeroJumpRight2_compressed:ROM
	XREF _HeroJumpRight1_compressed:ROM
	XREF _HeroJumpRight0_compressed:ROM
	XREF _HeroRight2_compressed:ROM
	XREF _HeroRight1_compressed:ROM
	XREF _HeroRight0_compressed:ROM
	XREF _HeroStill_compressed:ROM
	XREF _global_palette:ROM
	XREF _zx7_Decompress:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_FlipSpriteY:ROM
	XREF _gfx_ScaledSprite_NoClip:ROM
	XREF _gfx_GetSprite:ROM
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_Sprite_NoClip:ROM
	XREF _gfx_Sprite:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_GetPixel:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetTransparentColor:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _srand:ROM
	XREF _malloc:ROM
	XREF _floor:ROM
	XREF __idivs:ROM
	XREF __ineg:ROM
	XREF __iremu:ROM
	XREF __fadd:ROM
	XREF __fsub:ROM
	XREF __fmul:ROM
	XREF __fdiv:ROM
	XREF __fcmp:ROM
	XREF __ftol:ROM
	XREF __ltof:ROM
	XREF __itol:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __seqcase:ROM
	XREF __imul_b:ROM
	XDEF _establishBoundaries
	XDEF _isTouching
	XDEF _main
	XDEF _boundaries
	XDEF _enemy
	XDEF _hero
	END
