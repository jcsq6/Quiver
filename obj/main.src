; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT BSS
_hero:
	DS	6
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <math.h>
;    6	#include <stdio.h>
;    7	#include <stdlib.h>
;    8	#include <string.h>
;    9	
;   10	#include <graphx.h>
;   11	#include <keypadc.h>
;   12	#include <debug.h>
;   13	
;   14	#include <compression.h>
;   15	
;   16	#include "gfx/gfx.h"
;   17	
;   18	bool isTouching(enum bodyParts part, bool checkForPad, int yVelocity, int xVelocity);
;   19	
;   20	enum direction{
;   21		right,
;   22		left,
;   23		up,
;   24		down,
;   25		upLeft,
;   26		upRight,
;   27		downLeft,
;   28		downRight,
;   29		nothing
;   30	};
;   31	
;   32	enum bodyParts{
;   33		leftSide,
;   34		rightSide,
;   35		topHead,
;   36		bottomFeet
;   37	};
;   38	
;   39	gfx_point_t hero;
	SEGMENT CODE
;   40	
;   41	void main(void) {
_main:
	LD	HL,-185
	CALL	__frameset
;   42	
;   43		int x, y, i, mapNum, velocity;
;   44	
;   45		gfx_point_t lastStill;
;   46		gfx_point_t arrow, arrowInit;
;   47	
;   48		gfx_sprite_t *map;
;   49	
;   50		gfx_sprite_t *HeroStill, *HeroLeft0, *HeroLeft1, *HeroLeft2, *HeroRight0, *HeroRight1, *HeroRight2,*HeroJumpRight0, *HeroJumpRight1, *HeroJumpRight2, *HeroJumpUpRight, *HeroJumpUpLeft, *HeroJumpLeft0, *HeroJumpLeft1, *HeroJumpLeft2, *arrowSpr, *behindArrow;
;   51	
;   52		double distance, arrowDistance;
;   53		unsigned int step;
;   54	
;   55		enum direction jumpingDir;
;   56		enum direction shootingDir;
;   57	
;   58		bool doubleJumped, keyIsReleased, inLadder, facingRight, ascending, key, prevkey, isBoosted, tempBool1, tempBool2;
;   59	
;   60		bool alphaKey, leftKey, rightKey, downKey, upKey, modeKey, secondKey, rightKeyNotAlpha, leftKeyNotAlpha, downKeyNotAlpha, upKeyNotAlpha;
;   61	
;   62		gfx_sprite_t *heroRunRight[3];
;   63		gfx_sprite_t *heroRunLeft[3];
;   64	
;   65		gfx_sprite_t *heroJumpRight[3];
;   66	
;   67		gfx_sprite_t *behind_sprite;
;   68	
;   69		gfx_sprite_t *tempPerson;
;   70	
;   71		map = gfx_MallocSprite(80, 60);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,80
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-47),HL
;   72	
;   73		HeroStill = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-77),HL
;   74		HeroLeft0 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-98),HL
;   75		HeroLeft1 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-101),HL
;   76		HeroLeft2 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-116),HL
;   77		HeroRight0 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-83),HL
;   78		HeroRight1 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-87),HL
;   79		HeroRight2 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-91),HL
;   80		HeroJumpRight0 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-61),HL
;   81		HeroJumpRight1 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-64),HL
;   82		HeroJumpRight2 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-67),HL
;   83		HeroJumpUpRight = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-70),HL
;   84		HeroJumpUpLeft = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-74),HL
;   85		HeroJumpLeft0 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-104),HL
;   86		HeroJumpLeft1 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-107),HL
;   87		HeroJumpLeft2 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-110),HL
;   88		behindArrow = gfx_MallocSprite(20, 4);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,4
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-56),HL
;   89		arrowSpr = gfx_MallocSprite(20, 4);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,4
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-113),HL
;   90	
;   91	
;   92		zx7_Decompress( HeroStill, HeroStill_compressed );
	LD	BC,_HeroStill_compressed
	PUSH	BC
	LD	BC,(IX+-77)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   93		zx7_Decompress( HeroRight0, HeroRight0_compressed );
	LD	BC,_HeroRight0_compressed
	PUSH	BC
	LD	BC,(IX+-83)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   94		zx7_Decompress( HeroRight1, HeroRight1_compressed );
	LD	BC,_HeroRight1_compressed
	PUSH	BC
	LD	BC,(IX+-87)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   95		zx7_Decompress( HeroRight2, HeroRight2_compressed );
	LD	BC,_HeroRight2_compressed
	PUSH	BC
	LD	BC,(IX+-91)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   96		zx7_Decompress( HeroJumpRight0, HeroJumpRight0_compressed );
	LD	BC,_HeroJumpRight0_compressed
	PUSH	BC
	LD	BC,(IX+-61)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   97		zx7_Decompress( HeroJumpRight1, HeroJumpRight1_compressed );
	LD	BC,_HeroJumpRight1_compressed
	PUSH	BC
	LD	BC,(IX+-64)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   98		zx7_Decompress( HeroJumpRight2, HeroJumpRight2_compressed );
	LD	BC,_HeroJumpRight2_compressed
	PUSH	BC
	LD	BC,(IX+-67)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   99		zx7_Decompress( HeroJumpUpRight, HeroJumpUpRight_compressed );
	LD	BC,_HeroJumpUpRight_compressed
	PUSH	BC
	LD	BC,(IX+-70)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  100		zx7_Decompress( arrowSpr, arrow_compressed );
	LD	BC,_arrow_compressed
	PUSH	BC
	LD	BC,(IX+-113)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  101	
;  102		gfx_FlipSpriteY(HeroRight0, HeroLeft0);
	LD	BC,(IX+-98)
	PUSH	BC
	LD	BC,(IX+-83)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  103		gfx_FlipSpriteY(HeroRight1, HeroLeft1);
	LD	BC,(IX+-101)
	PUSH	BC
	LD	BC,(IX+-87)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  104		gfx_FlipSpriteY(HeroRight2, HeroLeft2);
	LD	BC,(IX+-116)
	PUSH	BC
	LD	BC,(IX+-91)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  105		gfx_FlipSpriteY(HeroJumpRight0, HeroJumpLeft0);
	LD	BC,(IX+-104)
	PUSH	BC
	LD	BC,(IX+-61)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  106		gfx_FlipSpriteY(HeroJumpRight1, HeroJumpLeft1);
	LD	BC,(IX+-107)
	PUSH	BC
	LD	BC,(IX+-64)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  107		gfx_FlipSpriteY(HeroJumpRight2, HeroJumpLeft2);
	LD	BC,(IX+-110)
	PUSH	BC
	LD	BC,(IX+-67)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  108		gfx_FlipSpriteY(HeroJumpUpRight, HeroJumpUpLeft);
	LD	BC,(IX+-74)
	PUSH	BC
	LD	BC,(IX+-70)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  109	
;  110		velocity = 2;
	LD	BC,2
	LD	(IX+-42),BC
;  111	
;  112		jumpingDir = nothing;
	LD	BC,8
	LD	(IX+-27),BC
;  113	
;  114		ascending = doubleJumped = inLadder = isBoosted = keyIsReleased = false;
	LD	(IX+-35),0
	LD	(IX+-24),0
	LD	(IX+-19),0
	LD	(IX+-39),0
	LD	(IX+-23),0
;  115	
;  116		facingRight = true;
	LD	(IX+-38),1
;  117	
;  118		heroRunRight[0] = HeroRight0;
	LD	BC,(IX+-83)
	LEA	IY,IX+-128
	LD	(IY+-34),BC
;  119		heroRunRight[1] = HeroRight1;
	LD	IY,IX
	LD	BC,-162
	ADD	IY,BC
	LEA	HL,IY+3
;  120		heroRunRight[2] = HeroRight2;
	LD	IY,IX
	LD	BC,(IX+-87)
	LD	DE,-162
	ADD	IY,DE
	LD	(HL),BC
	LD	BC,(IX+-91)
	LEA	HL,IY+6
	LD	(HL),BC
;  121	
;  122		heroRunLeft[0] = HeroLeft0;
	LD	BC,(IX+-98)
	LEA	IY,IX+-128
	LD	(IY+-25),BC
;  123		heroRunLeft[1] = HeroLeft1;
	LD	IY,IX
	LD	BC,-153
	ADD	IY,BC
	LEA	HL,IY+3
;  124		heroRunLeft[2] = HeroLeft2;
	LD	IY,IX
	LD	BC,(IX+-101)
	LD	DE,-153
	ADD	IY,DE
	LD	(HL),BC
	LD	BC,(IX+-116)
	LEA	HL,IY+6
	LD	(HL),BC
;  125	
;  126		heroJumpRight[0] = HeroJumpRight0;
	LD	BC,(IX+-61)
	LEA	IY,IX+-128
	LD	(IY+-43),BC
;  127		heroJumpRight[1] = HeroJumpRight1;
	LD	IY,IX
	LD	BC,-171
	ADD	IY,BC
	LEA	HL,IY+3
	LD	BC,(IX+-64)
	LD	(HL),BC
;  128		heroJumpRight[2] = HeroJumpRight2;
	LD	IY,IX
	LD	BC,(IX+-67)
;  129	
;  130		behind_sprite = gfx_MallocSprite(20, 40);
	LD	DE,_malloc
	PUSH	DE
	LD	DE,40
	PUSH	DE
	LD	DE,20
	PUSH	DE
	LD	DE,-171
	ADD	IY,DE
	LEA	HL,IY+6
	LD	(HL),BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-18),HL
;  131	
;  132		lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  133		lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  134	
;  135		arrow.x = 0;
	LD	BC,0
	LD	(IX+-12),BC
;  136		arrow.y = 0;
	LD	(IX+-9),BC
;  137	
;  138		shootingDir = nothing;
	LD	BC,8
	LD	(IX+-22),BC
;  139	
;  140		srand(rtc_Time());
	LD	BC,(15925316)
	PUSH	BC
	CALL	_srand
	POP	BC
;  141	
;  142		gfx_Begin();
	CALL	_gfx_Begin
;  143	
;  144		gfx_SetPalette(global_palette, sizeof_global_palette, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,116
	PUSH	BC
	LD	BC,_global_palette
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  145	
;  146		mapNum = 1;
	LD	BC,1
	LD	(IX+-15),BC
;  147	
;  148		gfx_FillScreen(1);
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  149	
;  150		while(!(kb_Data[6] & kb_Enter)){
	JR	L_17
L_18:
;  151			kb_Scan();
	CALL	_kb_Scan
;  152	
;  153	   		key = kb_Data[7] == kb_Down;
	LD	A,(16056350)
	CP	A,1
	JR	NZ,L__1
	LD	A,1
	JR	L__2
L__1:
	XOR	A,A
L__2:
	LD	(IX+-58),A
;  154	
;  155			if(key && !prevkey) {
	OR	A,A
	JR	Z,L_5
	LD	A,(IX+-88)
	OR	A,A
	JR	NZ,L_5
;  156				if(mapNum == 7) mapNum = 0;
	LD	BC,7
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_3
	LD	BC,0
	LD	(IX+-15),BC
L_3:
;  157				mapNum++;
	LD	BC,(IX+-15)
	INC	BC
	LD	(IX+-15),BC
;  158				gfx_SetColor(1);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  159	
;  160				gfx_FillRectangle(0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  161				gfx_FillRectangle(0, 20, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  162				gfx_FillRectangle(0, 40, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  163				gfx_FillRectangle(0, 60, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  164				gfx_FillRectangle(0, 80, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  165	
;  166	
;  167				gfx_SetColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  168			}
L_5:
;  169	
;  170			gfx_PrintStringXY("Map1", 20, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__6
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  171			gfx_PrintStringXY("Map2", 20, 20);
	LD	BC,20
	PUSH	BC
	PUSH	BC
	LD	BC,L__7
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  172			gfx_PrintStringXY("Map3", 20, 40);
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__8
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  173			gfx_PrintStringXY("Map4", 20, 60);
	LD	BC,60
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__9
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  174			gfx_PrintStringXY("Map5", 20, 80);
	LD	BC,80
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__10
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  175	
;  176			if(mapNum == 1)	gfx_FillRectangle(0, 0, 4, 4);
	LD	HL,(IX+-15)
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_14
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  177			else if(mapNum == 2) gfx_FillRectangle(0, 20, 4, 4);			
	JR	L_15
L_14:
	LD	BC,2
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_12
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  178			else if(mapNum == 3) gfx_FillRectangle(0, 40, 4, 4);
	JR	L_15
L_12:
	LD	BC,3
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_10
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  179			else if(mapNum == 4) gfx_FillRectangle(0, 60, 4, 4);
	JR	L_15
L_10:
	LD	BC,4
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_8
	PUSH	BC
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  180			else if(mapNum == 5) gfx_FillRectangle(0, 80, 4, 4);
	JR	L_15
L_8:
	LD	BC,5
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_15
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_15:
;  181	
;  182			prevkey = key;
	LD	A,(IX+-58)
	LD	(IX+-88),A
;  183	
;  184			dbg_ClearConsole();
;  185			dbg_sprintf(dbgout, "%d", mapNum);
;  186		}
L_17:
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_18
;  187	
;  188		if(mapNum == 1)	{
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_27
;  189			zx7_Decompress( map, map1_compressed );
	LD	BC,_map1_compressed
	PUSH	BC
	LD	BC,(IX+-47)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  190			hero.x = 0;
	LD	BC,0
	LD	(_hero),BC
;  191			hero.y = 150;
	LD	BC,150
	LD	(_hero+3),BC
;  192		}
;  193		else if(mapNum == 2) {
	JR	L_29
L_27:
	LD	BC,2
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_25
;  194			zx7_Decompress( map, map2_compressed );		
	LD	BC,_map2_compressed
	PUSH	BC
	LD	BC,(IX+-47)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  195			hero.x = 0;
	LD	BC,0
	LD	(_hero),BC
;  196			hero.y = 180;
	LD	BC,180
	LD	(_hero+3),BC
;  197		}
;  198		else if(mapNum == 3) {
	JR	L_29
L_25:
	LD	BC,3
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_23
;  199			zx7_Decompress( map, map3_compressed );
	LD	BC,_map3_compressed
	PUSH	BC
	LD	BC,(IX+-47)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  200			hero.x = 0;
	LD	BC,0
	LD	(_hero),BC
;  201			hero.y = 180;
	LD	BC,180
	LD	(_hero+3),BC
;  202		}
;  203		else if(mapNum == 4) {
	JR	L_29
L_23:
	LD	BC,4
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_21
;  204			zx7_Decompress( map, map4_compressed );
	LD	BC,_map4_compressed
	PUSH	BC
	LD	BC,(IX+-47)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  205			hero.x = 50;
	LD	BC,50
	LD	(_hero),BC
;  206			hero.y = 100;
	LD	BC,100
	LD	(_hero+3),BC
;  207		}		
;  208		else if(mapNum == 5) {
	JR	L_29
L_21:
	LD	BC,5
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_29
;  209			zx7_Decompress( map, map5_compressed );
	LD	BC,_map5_compressed
	PUSH	BC
	LD	BC,(IX+-47)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  210			hero.x = 80;
	LD	BC,80
	LD	(_hero),BC
;  211			hero.y = 180;
	LD	BC,180
	LD	(_hero+3),BC
;  212		}
L_29:
;  213	
;  214		gfx_ScaledSprite_NoClip(map, 0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-47)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  215	
;  216		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  217		
;  218		gfx_SetTransparentColor(1);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTransparentColor
	POP	BC
;  219	
;  220		gfx_ScaledSprite_NoClip(map, 0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-47)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  221	
;  222		gfx_BlitBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  223	
;  224		gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  225		gfx_GetSprite(behindArrow, arrow.x, arrow.y);
	LD	BC,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	BC,(IX+-56)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  226		gfx_TransparentSprite_NoClip(HeroStill, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-77)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  227	
;  228		while(!(kb_Data[6] & kb_Clear)){
	JR	L_338
L_339:
;  229	
;  230			kb_Scan();
	CALL	_kb_Scan
;  231	
;  232			alphaKey = kb_Data[2] & kb_Alpha;
	LD	A,(16056340)
	AND	A,128
	LD	(IX+-43),A
;  233			secondKey = kb_Data[1] & kb_2nd;
	LD	A,(16056338)
	AND	A,32
	LD	(IX+-50),A
;  234			modeKey = kb_Data[1] & kb_Mode;
	LD	A,(16056338)
	AND	A,64
	LD	(IX+-49),A
;  235			upKey = kb_Data[7] & kb_Up;
	LD	A,(16056350)
	AND	A,8
	LD	(IX+-44),A
;  236			downKey = kb_Data[7] & kb_Down;
	LD	A,(16056350)
	AND	A,1
	LD	(IX+-52),A
;  237			leftKey = kb_Data[7] & kb_Left;
	LD	A,(16056350)
	AND	A,2
	LD	(IX+-36),A
;  238			rightKey = kb_Data[7] & kb_Right;
	LD	A,(16056350)
	AND	A,4
	LD	(IX+-37),A
;  239	
;  240			if(shootingDir == nothing && (alphaKey || kb_Data[3] & kb_0) && (rightKey || leftKey || upKey || downKey)){
	LD	HL,(IX+-22)
	OR	A,A
	LD	BC,8
	SBC	HL,BC
	JR	NZ,L_64
	LD	A,(IX+-43)
	OR	A,A
	JR	NZ,L_35
	LD	A,(16056342)
	AND	A,1
	JR	Z,L_64
L_35:
	LD	A,(IX+-37)
	OR	A,A
	JR	NZ,L_52
	LD	A,(IX+-36)
	OR	A,A
	JR	NZ,L_52
	LD	A,(IX+-44)
	OR	A,A
	JR	NZ,L_52
	LD	A,(IX+-52)
	OR	A,A
	JR	Z,L_64
L_52:
;  241				gfx_Sprite_NoClip(behindArrow, arrow.x, arrow.y);
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	BC,(IX+-56)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  242				if(rightKey) {
	LD	A,(IX+-37)
	OR	A,A
	JR	Z,L_38
;  243					shootingDir = right;
	LD	BC,0
	LD	(IX+-22),BC
;  244					arrow.x = hero.x + 20;
	LD	IY,(_hero)
	LEA	BC,IY+20
	LD	(IX+-12),BC
;  245					arrow.y = hero.y + 8;
	LD	IY,(_hero+3)
	LEA	BC,IY+8
	LD	(IX+-9),BC
;  246					arrowInit.x = hero.x + 15;
	LD	IY,(_hero)
	LEA	BC,IY+15
	LD	(IX+-34),BC
;  247					arrowInit.y = hero.y + 8;
	LD	IY,(_hero+3)
	LEA	IY,IY+8
	LD	(IX+-31),IY
;  248				}
L_38:
;  249				if(leftKey) {
	LD	A,(IX+-36)
	OR	A,A
	JR	Z,L_41
;  250					shootingDir = left;
	LD	BC,1
	LD	(IX+-22),BC
;  251					arrow.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-12),BC
;  252					arrow.y = hero.y + 8;
	LD	IY,(_hero+3)
	LEA	BC,IY+8
	LD	(IX+-9),BC
;  253					arrowInit.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-34),BC
;  254					arrowInit.y = hero.y + 8;
	LD	IY,(_hero+3)
	LEA	IY,IY+8
	LD	(IX+-31),IY
;  255				}
L_41:
;  256				if(upKey && leftKey){
	LD	A,(IX+-44)
	OR	A,A
	JR	Z,L_44
	LD	A,(IX+-36)
	OR	A,A
	JR	Z,L_44
;  257					shootingDir = upLeft;
	LD	BC,4
	LD	(IX+-22),BC
;  258					arrow.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-12),BC
;  259					arrow.y = hero.y + 8;
	LD	IY,(_hero+3)
	LEA	BC,IY+8
	LD	(IX+-9),BC
;  260					arrowInit.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-34),BC
;  261					arrowInit.y = hero.y + 8;
	LD	IY,(_hero+3)
	LEA	IY,IY+8
	LD	(IX+-31),IY
;  262				}
L_44:
;  263				if(upKey && rightKey) {
	LD	A,(IX+-44)
	OR	A,A
	JR	Z,L_47
	LD	A,(IX+-37)
	OR	A,A
	JR	Z,L_47
;  264					shootingDir = upRight;
	LD	BC,5
	LD	(IX+-22),BC
;  265					arrow.x = hero.x + 20;
	LD	IY,(_hero)
	LEA	BC,IY+20
	LD	(IX+-12),BC
;  266					arrow.y = hero.y + 8;
	LD	IY,(_hero+3)
	LEA	BC,IY+8
	LD	(IX+-9),BC
;  267					arrowInit.x = hero.x + 20;
	LD	IY,(_hero)
	LEA	BC,IY+20
	LD	(IX+-34),BC
;  268					arrowInit.y = hero.y + 8;
	LD	IY,(_hero+3)
	LEA	IY,IY+8
	LD	(IX+-31),IY
;  269				}
L_47:
;  270				if(downKey && leftKey) {
	LD	A,(IX+-52)
	OR	A,A
	JR	Z,L_50
	LD	A,(IX+-36)
	OR	A,A
	JR	Z,L_50
;  271					shootingDir = downLeft;
	LD	BC,6
	LD	(IX+-22),BC
;  272					arrow.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-12),BC
;  273					arrow.y = hero.y + 8;
	LD	IY,(_hero+3)
	LEA	BC,IY+8
	LD	(IX+-9),BC
;  274					arrowInit.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-34),BC
;  275					arrowInit.y = hero.y + 8;
	LD	IY,(_hero+3)
	LEA	IY,IY+8
	LD	(IX+-31),IY
;  276				}
L_50:
;  277				if(downKey && rightKey) {
	LD	A,(IX+-52)
	OR	A,A
	JR	Z,L_51
	LD	A,(IX+-37)
	OR	A,A
	JR	Z,L_51
;  278					shootingDir = downRight;
	LD	BC,7
	LD	(IX+-22),BC
;  279					arrow.x = hero.x + 20;
	LD	IY,(_hero)
	LEA	BC,IY+20
	LD	(IX+-12),BC
;  280					arrow.y = hero.y + 8;
	LD	IY,(_hero+3)
	LEA	BC,IY+8
	LD	(IX+-9),BC
;  281					arrowInit.x = hero.x + 20;
	LD	IY,(_hero)
	LEA	BC,IY+20
	LD	(IX+-34),BC
;  282					arrowInit.y = hero.y + 8;
	LD	IY,(_hero+3)
	LEA	IY,IY+8
	LD	(IX+-31),IY
;  283				}
L_51:
;  284				gfx_GetSprite(behindArrow, arrow.x, arrow.y);
	LD	BC,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	BC,(IX+-56)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  285			}
L_64:
;  286			if(shootingDir != nothing){
	LD	BC,8
	LD	HL,(IX+-22)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_77
;  287				gfx_Sprite_NoClip(behindArrow, arrow.x, arrow.y);
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	BC,(IX+-56)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  288				if(shootingDir == right){
	LD	HL,(IX+-22)
	CALL	__icmpzero
	JR	NZ,L_57
;  289					arrow.x += 5;
	LD	IY,(IX+-12)
	LEA	IY,IY+5
	LD	(IX+-12),IY
;  290					arrowDistance = arrow.x - arrowInit.x;
	LD	BC,(IX+-34)
	LD	HL,(IX+-12)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	CALL	__itol
	CALL	__ltof
	LD	(IX+-95),BC
	LD	(IX+-92),A
;  291					if(arrowDistance < 100) y = arrowInit.y + 10;
	LD	HL,BC
	LD	BC,13107200
	LD	E,(IX+-92)
	LD	A,66
	CALL	__fcmp
;  292					if(arrowDistance >= 100) arrow.y = arrowInit.y + floor((arrowDistance - 100)*(arrowDistance - 100) / 500 + 10);
	LD	HL,(IX+-95)
	LD	E,(IX+-92)
	LD	BC,13107200
	LD	A,66
	CALL	__fcmp
	JP	M,L_57
	LD	HL,13107200
	LD	E,66
	LD	BC,(IX+-95)
	LD	A,(IX+-92)
	CALL	__fsub
	LD	E,A
	LD	HL,BC
	CALL	__fmul
	LD	HL,16384000
	LD	E,67
	CALL	__fdiv
	LD	HL,2097152
	LD	E,65
	CALL	__fadd
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-185
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_floor
	PUSH	BC
	LD	BC,-185
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-31)
	CALL	__itol
	CALL	__ltof
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-50),H
	LD	(IY+-51),E	; unspill
	LD	H,(IY+-50)
	LD	(IY+-46),HL
	LD	(IY+-54),HL	; unspill
	LD	HL,(IY+-46)
	POP	IY
	LD	HL,BC
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-50),H
	LD	H,(IY+-51)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-50)
	LD	(IY+-46),HL
	LD	HL,(IY+-54)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-46)
	POP	IY
	CALL	__fadd
	CALL	__ftol
	LD	(IX+-9),BC
;  293				}
L_57:
;  294				gfx_GetSprite(behindArrow, arrow.x, arrow.y);
	LD	BC,(IX+-9)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	BC,(IX+-56)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  295				gfx_TransparentSprite_NoClip(arrowSpr, arrow.x, arrow.y);
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	LD	BC,(IX+-113)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  296				if(gfx_GetPixel(arrow.x+20, arrow.y) == 0 || arrow.x > 300 || arrow.x < 0 || arrow.y < 0 || arrow.y > 240) shootingDir = nothing;
	LD	C,(IX+-9)
	LD	B,0
	PUSH	BC
	LD	IY,(IX+-12)
	LEA	BC,IY+20
	PUSH	BC
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_62
	LD	BC,(IX+-12)
	LD	HL,300
	OR	A,A
	SBC	HL,BC
	JP	M,L_62
	LD	HL,(IX+-12)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_62
	LD	HL,(IX+-9)
	CALL	__icmpzero
	CALL	__setflag
	JP	M,L_62
	LD	BC,(IX+-9)
	LD	HL,240
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_77
L_62:
	LD	BC,8
	LD	(IX+-22),BC
;  297			}
L_77:
;  298	
;  299			rightKeyNotAlpha = (modeKey || rightKey) && (!(alphaKey && !kb_Data[3] & kb_0) || shootingDir != nothing);
	LD	A,(IX+-49)
	OR	A,A
	JR	NZ,L_72
	LD	A,(IX+-37)
	OR	A,A
	JR	Z,L_74
L_72:
	LD	A,(IX+-43)
	OR	A,A
	JR	Z,L_73
	LD	A,(16056342)
	OR	A,A
	JR	NZ,L_67
	LD	BC,1
	LD	(IX+-119),BC
	JR	L_68
L_67:
	LD	BC,0
	LD	(IX+-119),BC
L_68:
	LD	A,(IX+-119)
	AND	A,1
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_73
	LD	BC,8
	LD	HL,(IX+-22)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_74
L_73:
	LD	BC,1
	LD	(IX+-122),BC
	JR	L_75
L_74:
	LD	BC,0
	LD	(IX+-122),BC
L_75:
	LD	A,(IX+-122)
	LD	(IX+-57),A
;  300			leftKeyNotAlpha = (secondKey || leftKey) && (!(alphaKey && !kb_Data[3] & kb_0) || shootingDir != nothing);
	LD	A,(IX+-50)
	OR	A,A
	JR	NZ,L_85
	LD	A,(IX+-36)
	OR	A,A
	JR	Z,L_87
L_85:
	LD	A,(IX+-43)
	OR	A,A
	JR	Z,L_86
	LD	A,(16056342)
	OR	A,A
	JR	NZ,L_80
	LD	BC,1
	LD	(IX+-125),BC
	JR	L_81
L_80:
	LD	BC,0
	LD	(IX+-125),BC
L_81:
	LD	A,(IX+-125)
	AND	A,1
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_86
	LD	BC,8
	LD	HL,(IX+-22)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_87
L_86:
	LD	BC,1
	LD	(IX+-128),BC
	JR	L_88
L_87:
	LD	BC,0
	LD	(IX+-128),BC
L_88:
	LD	A,(IX+-128)
	LD	(IX+-53),A
;  301			downKeyNotAlpha = downKey && (!(alphaKey && !kb_Data[3] & kb_0) || shootingDir != nothing);
	LD	A,(IX+-52)
	OR	A,A
	JR	Z,L_98
	LD	A,(IX+-43)
	OR	A,A
	JR	Z,L_97
	LD	A,(16056342)
	OR	A,A
	JR	NZ,L_91
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-3),BC
	JR	L_92
L_91:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-3),BC
L_92:
	LEA	IY,IX+-128
	LD	A,(IY+-3)
	AND	A,1
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_97
	LD	BC,8
	LD	HL,(IX+-22)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_98
L_97:
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-6),BC
	JR	L_99
L_98:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-6),BC
L_99:
	LEA	IY,IX+-128
	LD	A,(IY+-6)
	LD	(IX+-84),A
;  302			upKeyNotAlpha = upKey && (!(alphaKey && !kb_Data[3] & kb_0) || shootingDir != nothing);
	LD	A,(IX+-44)
	OR	A,A
	JR	Z,L_109
	LD	A,(IX+-43)
	OR	A,A
	JR	Z,L_108
	LD	A,(16056342)
	OR	A,A
	JR	NZ,L_102
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-9),BC
	JR	L_103
L_102:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-9),BC
L_103:
	LEA	IY,IX+-128
	LD	A,(IY+-9)
	AND	A,1
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_108
	LD	BC,8
	LD	HL,(IX+-22)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_109
L_108:
	LD	BC,1
	LEA	IY,IX+-128
	LD	(IY+-12),BC
	JR	L_110
L_109:
	LD	BC,0
	LEA	IY,IX+-128
	LD	(IY+-12),BC
L_110:
	LEA	IY,IX+-128
	LD	A,(IY+-12)
	LD	(IX+-51),A
;  303			
;  304	
;  305			
;  306	
;  307	
;  308			tempBool1 = isTouching(bottomFeet, false, velocity - 1, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+-42)
	DEC	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,3
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-185
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-185
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-48),A
;  309			tempBool2 = isTouching(bottomFeet, false, 0, 0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,3
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-185
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-185
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-28),A
;  310			velocity = (hero.y - lastStill.y ) / 50 + 2;
	LD	HL,(_hero+3)
	LD	DE,(IX+-3)
	LD	BC,50
;  311	
;  312			dbg_ClearConsole();
;  313			dbg_sprintf(dbgout, "hero = (%d, %d)\n", hero.x, hero.y);
;  314			dbg_sprintf(dbgout, "velocity = %d\n", velocity);
;  315			dbg_sprintf(dbgout, "keyIsReleased = %d\n", keyIsReleased);
;  316			dbg_sprintf(dbgout, "ascending = %d\n", ascending);
;  317			dbg_sprintf(dbgout, "inLadder = %d\n", inLadder);
;  318			dbg_sprintf(dbgout, "doubleJumped = %d\n", doubleJumped);
;  319			dbg_sprintf(dbgout, "jumpingDir = %d\n", jumpingDir);
;  320			dbg_sprintf(dbgout, "tempBool1 = %d\n", tempBool1);
;  321			dbg_sprintf(dbgout, "tempBool2 = %d\n", tempBool2);
;  322			gfx_BlitBuffer();
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-46),HL
	POP	IY
	LD	HL,1
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-49),HL	; unspill
	LD	HL,(IY+-46)
	POP	IY
	OR	A,A
	SBC	HL,DE
	CALL	__idivs
	INC	HL
	INC	HL
	LD	(IX+-42),HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-49)
	POP	IY
	PUSH	HL
	CALL	_gfx_Blit
	POP	BC
;  323			//while(!os_GetCSC());
;  324	
;  325			if(((rightKeyNotAlpha && !isTouching(rightSide, false, 0, 1)) || (leftKeyNotAlpha && !isTouching(leftSide, false, 0, -1))) && jumpingDir == nothing && !(inLadder && hero.y < 59 && hero.y > 41 && mapNum == 1) && !isBoosted && !ascending)  {
	LD	A,(IX+-57)
	OR	A,A
	JR	Z,L_132
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_133
L_132:
	LD	A,(IX+-53)
	OR	A,A
	JR	Z,L_337
	LD	BC,16777215
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_337
L_133:
	LD	BC,8
	LD	HL,(IX+-27)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_337
	LD	A,(IX+-19)
	OR	A,A
	JR	Z,L_138
	LD	BC,59
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JP	P,L_138
	LD	BC,(_hero+3)
	LD	HL,41
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_138
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_337
L_138:
	LD	A,(IX+-24)
	OR	A,A
	JR	NZ,L_337
	LD	A,(IX+-23)
	OR	A,A
	JR	NZ,L_337
;  326				gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  327	
;  328				//IF RIGHT IS PRESSED
;  329				if(modeKey || rightKey) {
	LD	A,(IX+-49)
	OR	A,A
	JR	NZ,L_149
	LD	A,(IX+-37)
	OR	A,A
	JR	Z,L_150
L_149:
;  330					facingRight = true;
	LD	(IX+-38),1
;  331					if((upKeyNotAlpha) && (!inLadder || (mapNum == 1 && hero.y == 40) || (mapNum == 2 && hero.y == 120))) {
	LD	A,(IX+-51)
	OR	A,A
	JR	Z,L_148
	LD	A,(IX+-19)
	OR	A,A
	JR	Z,L_147
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_144
	LD	BC,40
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_147
L_144:
	LD	BC,2
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_148
	LD	BC,120
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_148
L_147:
;  332						jumpingDir = right;
	LD	BC,0
	LD	(IX+-27),BC
;  333						ascending = true;
	LD	(IX+-23),1
;  334						keyIsReleased = false;
	LD	(IX+-35),0
;  335						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  336						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  337						if(!tempBool2) doubleJumped = true;
	LD	A,(IX+-28)
	OR	A,A
	JR	NZ,L_148
	LD	(IX+-39),1
;  338					}
L_148:
;  339					hero.x += 2;
	LD	IY,(_hero)
	LEA	BC,IY+2
	LD	(_hero),BC
;  340				};
L_150:
;  341				//IF LEFT IS PRESSED
;  342				if(secondKey || leftKey){ 
	LD	A,(IX+-50)
	OR	A,A
	JR	NZ,L_160
	LD	A,(IX+-36)
	OR	A,A
	JR	Z,L_177
L_160:
;  343					facingRight = false;
	LD	(IX+-38),0
;  344					if((upKeyNotAlpha) && (!inLadder || (mapNum == 1 && hero.y == 40) || (mapNum == 2 && hero.y == 120))) {
	LD	A,(IX+-51)
	OR	A,A
	JR	Z,L_159
	LD	A,(IX+-19)
	OR	A,A
	JR	Z,L_158
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_155
	LD	BC,40
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_158
L_155:
	LD	BC,2
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_159
	LD	BC,120
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_159
L_158:
;  345						jumpingDir = left;
	LD	BC,1
	LD	(IX+-27),BC
;  346						ascending = true;
	LD	(IX+-23),1
;  347						keyIsReleased = false;
	LD	(IX+-35),0
;  348	
;  349						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  350						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  351						if(!tempBool2) doubleJumped = true;
	LD	A,(IX+-28)
	OR	A,A
	JR	NZ,L_159
	LD	(IX+-39),1
;  352					}				
L_159:
;  353					hero.x -= 2;
	LD	IY,(_hero)
	LEA	BC,IY+-2
	LD	(_hero),BC
;  354				}
L_177:
;  355	
;  356				//IF IS IN AIR
;  357				if(!tempBool2 && !inLadder){
	LD	A,(IX+-28)
	OR	A,A
	JR	NZ,L_176
	LD	A,(IX+-19)
	OR	A,A
	JR	NZ,L_176
;  358						if(!tempBool1)	hero.y += velocity;
	LD	A,(IX+-48)
	OR	A,A
	JR	NZ,L_166
	LD	BC,(IX+-42)
	LD	HL,(_hero+3)
	ADD	HL,BC
	LD	(_hero+3),HL
;  359						else if(!tempBool2 && tempBool1) hero.y++;
	JR	L_169
L_166:
	LD	A,(IX+-28)
	OR	A,A
	JR	NZ,L_169
	LD	A,(IX+-48)
	OR	A,A
	JR	Z,L_169
	LD	BC,(_hero+3)
	INC	BC
	LD	(_hero+3),BC
L_169:
;  360	
;  361						if(isTouching(rightSide, false, 0, 0)) hero.x--;
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_172
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
L_172:
;  362						if(isTouching(leftSide, false, 0, 0)) hero.x++;
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_179
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
;  363				}
;  364				else if(!inLadder && tempBool2){
	JR	L_179
L_176:
	LD	A,(IX+-19)
	OR	A,A
	JR	NZ,L_179
	LD	A,(IX+-28)
	OR	A,A
	JR	Z,L_179
;  365					lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  366				}
L_179:
;  367	
;  368				if(isTouching(bottomFeet, true, 0, 0)) {
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_180
;  369					isBoosted = true;
	LD	(IX+-24),1
;  370					ascending = true;
	LD	(IX+-23),1
;  371					lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  372					lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  373				}
L_180:
;  374	
;  375				inLadder = false;
	LD	(IX+-19),0
;  376				if((hero.x >= 106 && hero.x <= 136 && hero.y >= 39 && hero.y <= 140 && mapNum == 1) || (hero.x >= 271 && mapNum == 2 && hero.y >= 120)) inLadder = true;
	LD	HL,(_hero)
	LD	BC,106
	OR	A,A
	SBC	HL,BC
	JP	M,L_187
	LD	BC,(_hero)
	LD	HL,136
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_187
	LD	BC,39
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_187
	LD	BC,(_hero+3)
	LD	HL,140
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_187
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_188
L_187:
	LD	BC,271
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_190
	LD	BC,2
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_190
	LD	BC,120
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_190
L_188:
	LD	(IX+-19),1
L_190:
;  377	
;  378				if(hero.x < 0) hero.x = 0;
	LD	HL,(_hero)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_192
	LD	BC,0
	LD	(_hero),BC
L_192:
;  379				if(hero.x > 300) hero.x = 300;
	LD	BC,(_hero)
	LD	HL,300
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_193
	LD	BC,300
	LD	(_hero),BC
L_193:
;  380	
;  381				gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  382	
;  383				if(rightKey || modeKey){
	LD	A,(IX+-37)
	OR	A,A
	JR	NZ,L_195
	LD	A,(IX+-49)
	OR	A,A
	JR	Z,L_198
L_195:
;  384					distance = hero.x - lastStill.x;
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	CALL	__itol
	CALL	__ltof
	LD	HL,BC
	LD	BC,-144
	LD	E,A
	CALL	__lstix
;  385					step = floor(distance/6);
	LD	BC,-144
	CALL	__lldix
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,64
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_floor
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	CALL	__ftol
	LD	(IX+-80),BC
;  386	
;  387					gfx_TransparentSprite_NoClip(heroRunRight[ step % 3 ], hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,3
	LD	DE,(_hero)
	PUSH	DE
	LD	HL,(IX+-80)
	CALL	__iremu
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,IX
	LD	DE,-162
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  388				}
L_198:
;  389				if(secondKey || leftKey){
	LD	A,(IX+-50)
	OR	A,A
	JR	NZ,L_197
	LD	A,(IX+-36)
	OR	A,A
	JR	Z,L_338
L_197:
;  390					distance = lastStill.x - hero.x;
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	CALL	__itol
	CALL	__ltof
	LD	HL,BC
	LD	BC,-144
	LD	E,A
	CALL	__lstix
;  391					step = floor(distance/6);
	LD	BC,-144
	CALL	__lldix
	LD	A,E
	LD	BC,HL
	LD	HL,12582912
	LD	E,64
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_floor
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	CALL	__ftol
	LD	(IX+-80),BC
;  392	
;  393					gfx_TransparentSprite_NoClip(heroRunLeft[ step % 3 ], hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,3
	LD	DE,(_hero)
	PUSH	DE
	LD	HL,(IX+-80)
	CALL	__iremu
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,IX
	LD	DE,-153
	ADD	HL,DE
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  394				}
;  395	
;  396			}
;  397			//IF NOTHING IS PRESSED
;  398			else{
	JR	L_338
L_337:
;  399	
;  400				gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  401	
;  402	
;  403				//IF IS IN AIR
;  404				if(!tempBool2 && !inLadder && !ascending){
	LD	A,(IX+-28)
	OR	A,A
	JR	NZ,L_218
	LD	A,(IX+-19)
	OR	A,A
	JR	NZ,L_218
	LD	A,(IX+-23)
	OR	A,A
	JR	NZ,L_218
;  405	
;  406						if(!tempBool1)	hero.y += velocity;
	LD	A,(IX+-48)
	OR	A,A
	JR	NZ,L_205
	LD	BC,(IX+-42)
	LD	HL,(_hero+3)
	ADD	HL,BC
	LD	(_hero+3),HL
;  407						else if(!tempBool2 && tempBool1) hero.y++;
	JR	L_208
L_205:
	LD	A,(IX+-28)
	OR	A,A
	JR	NZ,L_208
	LD	A,(IX+-48)
	OR	A,A
	JR	Z,L_208
	LD	BC,(_hero+3)
	INC	BC
	LD	(_hero+3),BC
L_208:
;  408	
;  409						if(isTouching(rightSide, false, 0, 0)) hero.x--;
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_211
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
L_211:
;  410						if(isTouching(leftSide, false, 0, 0)) hero.x++;
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_212
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
L_212:
;  411						gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  412				}
;  413				else if(tempBool2 && !inLadder && !ascending){
	JR	L_231
L_218:
	LD	A,(IX+-28)
	OR	A,A
	JR	Z,L_231
	LD	A,(IX+-19)
	OR	A,A
	JR	NZ,L_231
	LD	A,(IX+-23)
	OR	A,A
	JR	NZ,L_231
;  414					jumpingDir = nothing;
	LD	BC,8
	LD	(IX+-27),BC
;  415					doubleJumped = false;
	LD	(IX+-39),0
;  416					keyIsReleased = false;
	LD	(IX+-35),0
;  417					if(isTouching(bottomFeet, true, 0, 0)) {
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_231
;  418						isBoosted = true;
	LD	(IX+-24),1
;  419						ascending = true;
	LD	(IX+-23),1
;  420						jumpingDir = nothing;
	LD	BC,8
	LD	(IX+-27),BC
;  421						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  422						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  423						doubleJumped = false;
	LD	(IX+-39),0
;  424					}	
;  425				}
L_231:
;  426	
;  427				//IF ASCENDING
;  428				if(ascending){
	LD	A,(IX+-23)
	OR	A,A
	JR	Z,L_246
;  429					inLadder = false;
	LD	(IX+-19),0
;  430					if(!isBoosted) velocity = -2;
	LD	A,(IX+-24)
	OR	A,A
	JR	NZ,L_220
	LD	BC,16777214
	LD	(IX+-42),BC
;  431					else velocity = -10;
	JR	L_222
L_220:
	LD	BC,16777206
	LD	(IX+-42),BC
L_222:
;  432	
;  433					if(!isTouching(topHead, false, velocity + 1, 0)) hero.y += velocity;
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+-42)
	INC	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_228
	LD	BC,(IX+-42)
	LD	HL,(_hero+3)
	ADD	HL,BC
	LD	(_hero+3),HL
L_228:
;  434					if(((lastStill.y - hero.y > 25 && !isBoosted) || (lastStill.y - hero.y > 160 && isBoosted)) || isTouching(topHead, false, velocity + 1, 0)) {
	LD	BC,(_hero+3)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,25
	OR	A,A
	SBC	HL,BC
	JP	P,L_225
	LD	A,(IX+-24)
	OR	A,A
	JR	Z,L_227
L_225:
	LD	BC,(_hero+3)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,160
	OR	A,A
	SBC	HL,BC
	JP	P,L_226
	LD	A,(IX+-24)
	OR	A,A
	JR	NZ,L_227
L_226:
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+-42)
	INC	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_229
L_227:
;  435						ascending = false;
	LD	(IX+-23),0
;  436						isBoosted = false;
	LD	(IX+-24),0
;  437						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  438						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  439					}
L_229:
;  440					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  441				}
L_246:
;  442	
;  443				//MOVING LADDER
;  444				if(inLadder && (upKeyNotAlpha) && !(leftKey || secondKey) && !(rightKey || modeKey)){
	LD	A,(IX+-19)
	OR	A,A
	JR	Z,L_245
	LD	A,(IX+-51)
	OR	A,A
	JR	Z,L_245
	LD	A,(IX+-36)
	OR	A,A
	JR	NZ,L_245
	LD	A,(IX+-50)
	OR	A,A
	JR	NZ,L_245
	LD	A,(IX+-37)
	OR	A,A
	JR	NZ,L_245
	LD	A,(IX+-49)
	OR	A,A
	JR	NZ,L_245
;  445					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  446					hero.y -= 2;
	LD	IY,(_hero+3)
	LEA	BC,IY+-2
	LD	(_hero+3),BC
;  447					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  448				}
;  449				else if(inLadder && downKeyNotAlpha){
	JR	L_251
L_245:
	LD	A,(IX+-19)
	OR	A,A
	JR	Z,L_251
	LD	A,(IX+-84)
	OR	A,A
	JR	Z,L_251
;  450					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  451					if(hero.y != 140 && mapNum == 1 || mapNum != 1 && hero.y != 200) hero.y += 2;
	LD	BC,140
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_240
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_241
L_240:
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_242
	LD	BC,200
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_242
L_241:
	LD	IY,(_hero+3)
	LEA	BC,IY+2
	LD	(_hero+3),BC
L_242:
;  452					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  453				}
L_251:
;  454	
;  455				if(!(upKey) && !keyIsReleased  && !doubleJumped && jumpingDir != nothing) keyIsReleased = true;
	LD	A,(IX+-44)
	OR	A,A
	JR	NZ,L_260
	LD	A,(IX+-35)
	OR	A,A
	JR	NZ,L_260
	LD	A,(IX+-39)
	OR	A,A
	JR	NZ,L_260
	LD	BC,8
	LD	HL,(IX+-27)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_260
	LD	(IX+-35),1
L_260:
;  456	
;  457				
;  458				//CHECK FOR JUMPING UP
;  459				if(upKeyNotAlpha && !doubleJumped && !inLadder && ((keyIsReleased && jumpingDir != nothing) || (!keyIsReleased && jumpingDir == nothing))) {
	LD	A,(IX+-51)
	OR	A,A
	JR	Z,L_335
	LD	A,(IX+-39)
	OR	A,A
	JR	NZ,L_335
	LD	A,(IX+-19)
	OR	A,A
	JR	NZ,L_335
	LD	A,(IX+-35)
	OR	A,A
	JR	Z,L_256
	LD	BC,8
	LD	HL,(IX+-27)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_259
L_256:
	LD	A,(IX+-35)
	OR	A,A
	JR	NZ,L_335
	LD	BC,8
	LD	HL,(IX+-27)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_335
L_259:
;  460					jumpingDir = up;
	LD	BC,2
	LD	(IX+-27),BC
;  461					isBoosted = false;
	LD	(IX+-24),0
;  462					ascending = true;
	LD	(IX+-23),1
;  463	
;  464					lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  465					lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  466	
;  467					keyIsReleased = false;
	LD	(IX+-35),0
;  468	
;  469					if(!tempBool2) doubleJumped = true;
	LD	A,(IX+-28)
	OR	A,A
	JR	NZ,L_335
	LD	(IX+-39),1
;  470					
;  471				}
L_335:
;  472				//STANDING STILL ANIMATION
;  473				if(jumpingDir == nothing && !isBoosted){
	LD	BC,8
	LD	HL,(IX+-27)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__168
	LD	A,1
	JR	L__169
L__168:
	XOR	A,A
L__169:
	LD	(IX+-71),A
	OR	A,A
	JR	NZ,L_334
	LD	A,(IX+-24)
	OR	A,A
	JR	NZ,L_334
;  474	
;  475					inLadder = false;
	LD	(IX+-19),0
;  476					if((hero.x >= 106 && hero.x <= 136 && hero.y >= 39 && hero.y <= 140 && mapNum == 1) || (hero.x >= 271 && mapNum == 2 && hero.y >= 120) && jumpingDir == nothing) inLadder = true;
	LD	HL,(_hero)
	LD	BC,106
	OR	A,A
	SBC	HL,BC
	JP	M,L_269
	LD	BC,(_hero)
	LD	HL,136
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_269
	LD	BC,39
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_269
	LD	BC,(_hero+3)
	LD	HL,140
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_269
	LD	BC,1
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_270
L_269:
	LD	BC,271
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_272
	LD	BC,2
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_272
	LD	BC,120
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_272
	LD	A,(IX+-71)
	OR	A,A
	JR	NZ,L_272
L_270:
	LD	(IX+-19),1
L_272:
;  477	
;  478					if(isTouching(bottomFeet, true, 0, 0)) {
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_273
;  479						isBoosted = true;
	LD	(IX+-24),1
;  480						ascending = true;
	LD	(IX+-23),1
;  481						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  482						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  483					}
L_273:
;  484	
;  485					gfx_TransparentSprite_NoClip(HeroStill, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-77)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  486				}
;  487	
;  488				//JUMPING RIGHT ANIMATION
;  489				else if(jumpingDir == right){
	JR	L_338
L_334:
	LD	HL,(IX+-27)
	CALL	__icmpzero
	JR	NZ,L_332
;  490					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  491	
;  492					if(hero.x - lastStill.x <= 50 && !isTouching(rightSide, false, 0, 1)) hero.x += 2;
	LD	BC,(IX+-6)
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	JP	M,L_280
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_280
	LD	IY,(_hero)
	LEA	BC,IY+2
	LD	(_hero),BC
;  493					else if(hero.x - lastStill.x > 50 && hero.x - lastStill.x <= 65 && !isTouching(rightSide, false, 0, 0)) hero.x++;
	JR	L_282
L_280:
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	JP	P,L_282
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,65
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_282
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_282
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
L_282:
;  494	
;  495					if(hero.x > 300) hero.x = 300;
	LD	BC,(_hero)
	LD	HL,300
	OR	A,A
	SBC	HL,BC
	JP	P,L_283
	LD	BC,300
	LD	(_hero),BC
L_283:
;  496	
;  497					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  498	
;  499					if(hero.x - lastStill.x <= 12) gfx_TransparentSprite_NoClip(HeroJumpRight0, hero.x, hero.y);
	LD	BC,(IX+-6)
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_289
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-61)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  500					else if(hero.x - lastStill.x > 12 && hero.x - lastStill.x <= 24) gfx_TransparentSprite_NoClip(HeroJumpRight1, hero.x, hero.y);
	JR	L_338
L_289:
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_287
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_287
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-64)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  501					else if(hero.x - lastStill.x > 24) gfx_TransparentSprite_NoClip(HeroJumpRight2, hero.x, hero.y);
	JR	L_338
L_287:
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_338
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-67)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  502	
;  503					
;  504				}
;  505				//JUMPING LEFT ANIMATION
;  506				else if(jumpingDir == left){
	JR	L_338
L_332:
	LD	BC,1
	LD	HL,(IX+-27)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_330
;  507					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  508	
;  509					if(lastStill.x - hero.x <= 50 && !isTouching(leftSide, false, 0, -1)) hero.x -= 2;
	LD	HL,(IX+-6)
	LD	BC,(_hero)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_296
	LD	BC,16777215
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_296
	LD	IY,(_hero)
	LEA	BC,IY+-2
	LD	(_hero),BC
;  510					else if(lastStill.x - hero.x > 50 && lastStill.x - hero.x <= 65 && !isTouching(leftSide, false, 0, 0)) hero.x--;
	JR	L_298
L_296:
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	JP	P,L_298
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,65
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_298
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_298
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
L_298:
;  511	
;  512					if(hero.x < 0) hero.x = 0;
	LD	HL,(_hero)
	CALL	__icmpzero
	JP	P,L_299
	LD	BC,0
	LD	(_hero),BC
L_299:
;  513	
;  514					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  515	
;  516					if(lastStill.x - hero.x <= 12) gfx_TransparentSprite_NoClip(HeroJumpLeft0, hero.x, hero.y);
	LD	HL,(IX+-6)
	LD	BC,(_hero)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_305
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-104)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  517					else if(lastStill.x - hero.x > 12 && lastStill.x - hero.x <= 24) gfx_TransparentSprite_NoClip(HeroJumpLeft1, hero.x, hero.y);
	JR	L_338
L_305:
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_303
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_303
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-107)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  518					else if(lastStill.x - hero.x > 24) gfx_TransparentSprite_NoClip(HeroJumpLeft2, hero.x, hero.y);
	JR	L_338
L_303:
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_338
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-110)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  519				}
;  520				//JUMPING UP ANIMATION
;  521				else if(jumpingDir == up){
	JR	L_338
L_330:
	LD	BC,2
	LD	HL,(IX+-27)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_328
;  522					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  523	
;  524					if(leftKeyNotAlpha && !isTouching(leftSide, false, 0, 0)) {
	LD	A,(IX+-53)
	OR	A,A
	JR	Z,L_312
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_312
;  525						hero.x--;
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
;  526						facingRight = false;
	LD	(IX+-38),0
;  527					}
L_312:
;  528					if(rightKeyNotAlpha && !isTouching(rightSide, false, 0, 0)) {
	LD	A,(IX+-57)
	OR	A,A
	JR	Z,L_313
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_313
;  529						hero.x++;
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
;  530						facingRight = true;
	LD	(IX+-38),1
;  531					}
L_313:
;  532	
;  533					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  534					
;  535					if(facingRight) gfx_TransparentSprite_NoClip(HeroJumpUpRight, hero.x, hero.y);
	LD	A,(IX+-38)
	OR	A,A
	JR	Z,L_315
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-70)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  536					else gfx_TransparentSprite_NoClip(HeroJumpUpLeft, hero.x, hero.y);
	JR	L_338
L_315:
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-74)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  537					
;  538				}
;  539				else if(isBoosted){
	JR	L_338
L_328:
	LD	A,(IX+-24)
	OR	A,A
	JR	Z,L_338
;  540					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  541	
;  542					if(leftKeyNotAlpha && !isTouching(leftSide, false, 0, 0)) {
	LD	A,(IX+-53)
	OR	A,A
	JR	Z,L_322
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_322
;  543						hero.x--;
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
;  544						facingRight = false;
	LD	(IX+-38),0
;  545					}
L_322:
;  546					if(rightKeyNotAlpha && !isTouching(rightSide, false, 0, 0)) {
	LD	A,(IX+-57)
	OR	A,A
	JR	Z,L_323
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_323
;  547						hero.x++;
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
;  548						facingRight = true;
	LD	(IX+-38),1
;  549					}
L_323:
;  550	
;  551					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  552					
;  553					if(facingRight) gfx_TransparentSprite_NoClip(HeroJumpUpRight, hero.x, hero.y);
	LD	A,(IX+-38)
	OR	A,A
	JR	Z,L_325
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-70)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  554					else gfx_TransparentSprite_NoClip(HeroJumpUpLeft, hero.x, hero.y);
	JR	L_338
L_325:
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-74)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  555					
;  556				}
;  557			}
;  558	
;  559		}
L_338:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_339
;  560	
;  561		gfx_End();
	CALL	_gfx_End
;  562	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_isTouching                         IMPORT  -----   function
;_gfx_GetPixel                       IMPORT  -----   function
;_floor                              IMPORT  -----   function
;_gfx_Sprite_NoClip                  IMPORT  -----   function
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_gfx_GetSprite                      IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_gfx_SetTransparentColor            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_map5_compressed                    IMPORT    236   variable
;_map4_compressed                    IMPORT    188   variable
;_map3_compressed                    IMPORT    126   variable
;_map2_compressed                    IMPORT    241   variable
;_map1_compressed                    IMPORT    204   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_global_palette                     IMPORT    116   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_srand                              IMPORT  -----   function
;_hero                               STATIC      6   variable
;_gfx_FlipSpriteY                    IMPORT  -----   function
;_arrow_compressed                   IMPORT     22   variable
;_HeroJumpUpRight_compressed         IMPORT    134   variable
;_HeroJumpRight2_compressed          IMPORT    177   variable
;_HeroJumpRight1_compressed          IMPORT    138   variable
;_HeroJumpRight0_compressed          IMPORT    130   variable
;_HeroRight2_compressed              IMPORT    144   variable
;_HeroRight1_compressed              IMPORT    142   variable
;_HeroRight0_compressed              IMPORT    136   variable
;_HeroStill_compressed               IMPORT    115   variable
;_zx7_Decompress                     IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;heroJumpRight                       IX-171      9   variable
;heroRunRight                        IX-162      9   variable
;heroRunLeft                         IX-153      9   variable
;distance                            IX-144      4   variable
;temp111                             IX-140      3   variable
;temp104                             IX-137      3   variable
;temp100                             IX-134      3   variable
;temp93                              IX-131      3   variable
;temp89                              IX-128      3   variable
;temp82                              IX-125      3   variable
;temp76                              IX-122      3   variable
;temp69                              IX-119      3   variable
;HeroLeft2                           IX-116      3   variable
;arrowSpr                            IX-113      3   variable
;HeroJumpLeft2                       IX-110      3   variable
;HeroJumpLeft1                       IX-107      3   variable
;HeroJumpLeft0                       IX-104      3   variable
;HeroLeft1                           IX-101      3   variable
;HeroLeft0                            IX-98      3   variable
;arrowDistance                        IX-95      4   variable
;HeroRight2                           IX-91      3   variable
;prevkey                              IX-88      1   variable
;HeroRight1                           IX-87      3   variable
;downKeyNotAlpha                      IX-84      1   variable
;HeroRight0                           IX-83      3   variable
;step                                 IX-80      3   variable
;HeroStill                            IX-77      3   variable
;HeroJumpUpLeft                       IX-74      3   variable
;G_0                                  IX-71      1   variable
;HeroJumpUpRight                      IX-70      3   variable
;HeroJumpRight2                       IX-67      3   variable
;HeroJumpRight1                       IX-64      3   variable
;HeroJumpRight0                       IX-61      3   variable
;key                                  IX-58      1   variable
;rightKeyNotAlpha                     IX-57      1   variable
;behindArrow                          IX-56      3   variable
;leftKeyNotAlpha                      IX-53      1   variable
;downKey                              IX-52      1   variable
;upKeyNotAlpha                        IX-51      1   variable
;secondKey                            IX-50      1   variable
;modeKey                              IX-49      1   variable
;tempBool1                            IX-48      1   variable
;map                                  IX-47      3   variable
;upKey                                IX-44      1   variable
;alphaKey                             IX-43      1   variable
;velocity                             IX-42      3   variable
;doubleJumped                         IX-39      1   variable
;facingRight                          IX-38      1   variable
;rightKey                             IX-37      1   variable
;leftKey                              IX-36      1   variable
;keyIsReleased                        IX-35      1   variable
;arrowInit                            IX-34      6   variable
;tempBool2                            IX-28      1   variable
;jumpingDir                           IX-27      3   variable
;isBoosted                            IX-24      1   variable
;ascending                            IX-23      1   variable
;shootingDir                          IX-22      3   variable
;inLadder                             IX-19      1   variable
;behind_sprite                        IX-18      3   variable
;mapNum                               IX-15      3   variable
;arrow                                IX-12      6   variable
;lastStill                             IX-6      6   variable


; Stack Frame Size: 191 (bytes)
;       Spill Code: -9 (instruction)


	SEGMENT STRSECT
L__6:
	DB	"Map1"
	DB	0
L__7:
	DB	"Map2"
	DB	0
L__8:
	DB	"Map3"
	DB	0
L__9:
	DB	"Map4"
	DB	0
L__10:
	DB	"Map5"
	DB	0
	SEGMENT CODE
;  563	
;  564	bool isTouching(enum bodyParts part, bool checkForPad, int yVelocity, int xVelocity){
_isTouching:
	LD	HL,-5
	CALL	__frameset
;  565		int f;
;  566	
;  567		bool check;
;  568		check = true;
	LD	(IX+-5),1
;  569		if(part == leftSide){
	LD	HL,(IX+6)
	CALL	__icmpzero
	JR	NZ,L_380
;  570			for(f = 3; f <= 40; f += 3) {
	LD	BC,3
	LD	(IX+-3),BC
	JR	L_346
L_344:
;  571				if(gfx_GetPixel(hero.x + 2 + xVelocity, hero.y + f + yVelocity) == 0 || hero.x + xVelocity == 0) return true;
	LD	A,(_hero+3)
	LD	B,(IX+-3)
	ADD	A,B
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	IY,(_hero)
	LEA	HL,IY+2
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_343
	LD	BC,(IX+15)
	LD	HL,(_hero)
	ADD	HL,BC
	CALL	__icmpzero
	JR	NZ,L_345
L_343:
	LD	A,1
	JR	L_382
;  572			}
L_345:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_346:
	LD	BC,(IX+-3)
	LD	HL,40
	OR	A,A
	SBC	HL,BC
	JP	P,L_344
	JR	L_381
;  573		}
;  574		else if(part == rightSide){
L_380:
	LD	BC,1
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_378
;  575			for(f = 3; f <= 40; f += 3) {
	LD	BC,3
	LD	(IX+-3),BC
	JR	L_351
L_349:
;  576				if(gfx_GetPixel(hero.x + 17 + xVelocity, hero.y + f + yVelocity) == 0 || hero.x + 20 + xVelocity== 320) return true;
	LD	A,(_hero+3)
	LD	B,(IX+-3)
	ADD	A,B
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	IY,(_hero)
	LEA	HL,IY+17
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_348
	LD	IY,(_hero)
	LEA	HL,IY+20
	LD	BC,(IX+15)
	ADD	HL,BC
	OR	A,A
	LD	BC,320
	SBC	HL,BC
	JR	NZ,L_350
L_348:
	LD	A,1
	JR	L_382
;  577			}
L_350:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_351:
	LD	BC,(IX+-3)
	LD	HL,40
	OR	A,A
	SBC	HL,BC
	JP	P,L_349
	JR	L_381
;  578		}
;  579		else if(part == topHead){
L_378:
	LD	BC,2
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_376
;  580			for(f = 3; f <= 16; f += 3) {
	LD	BC,3
	LD	(IX+-3),BC
	JR	L_356
L_354:
;  581				if(gfx_GetPixel(hero.x + f + xVelocity, hero.y + yVelocity) == 0 || hero.y + yVelocity < 0) return true;
	LD	A,(_hero+3)
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_353
	LD	BC,(IX+12)
	LD	HL,(_hero+3)
	ADD	HL,BC
	CALL	__icmpzero
	JP	P,L_355
L_353:
	LD	A,1
	JR	L_382
;  582			}
L_355:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_356:
	LD	BC,(IX+-3)
	LD	HL,16
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_354
	JR	L_381
;  583		}
;  584		else if(part == bottomFeet && !checkForPad){
L_376:
	LD	BC,3
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__231
	LD	A,1
	JR	L__232
L__231:
	XOR	A,A
L__232:
	LD	(IX+-4),A
	OR	A,A
	JR	NZ,L_374
	LD	A,(IX+9)
	OR	A,A
	JR	NZ,L_374
;  585			for(f = 6; f <= 14; f += 3) {
	LD	BC,6
	LD	(IX+-3),BC
	JR	L_364
L_362:
;  586				if(gfx_GetPixel(hero.x + f + xVelocity, hero.y + 40 + yVelocity) == 0 || hero.y + 41 + yVelocity > 240 || gfx_GetPixel(hero.x + f + xVelocity, hero.y + 40 + yVelocity) == 3 || gfx_GetPixel(hero.x + f + xVelocity, hero.y + 40 + yVelocity) == 4) return true;
	LD	A,(_hero+3)
	ADD	A,40
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_361
	LD	IY,(_hero+3)
	LEA	HL,IY+41
	LD	BC,(IX+12)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,240
	OR	A,A
	SBC	HL,BC
	JP	M,L_361
	LD	A,(_hero+3)
	ADD	A,40
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	Z,L_361
	LD	A,(_hero+3)
	ADD	A,40
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_363
L_361:
	LD	A,1
	JR	L_382
;  587			}
L_363:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_364:
	LD	BC,(IX+-3)
	LD	HL,14
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_362
	JR	L_381
;  588		}
;  589		else if(part == bottomFeet && checkForPad){
L_374:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_381
	LD	A,(IX+9)
	OR	A,A
	JR	Z,L_381
;  590			for(f = 6; f <= 14; f += 3) {
	LD	BC,6
	LD	(IX+-3),BC
	JR	L_370
L_368:
;  591				if(gfx_GetPixel(hero.x + f + xVelocity, hero.y + 41 + yVelocity) != 3 || gfx_GetPixel(hero.x + f + xVelocity, hero.y + 40 + yVelocity) == 4) check = false;
	LD	A,(_hero+3)
	ADD	A,41
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_367
	LD	A,(_hero+3)
	ADD	A,40
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_369
L_367:
	LD	(IX+-5),0
;  592			}
L_369:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_370:
	LD	BC,(IX+-3)
	LD	HL,14
	OR	A,A
	SBC	HL,BC
	JP	P,L_368
;  593			return check;
	LD	A,(IX+-5)
	JR	L_382
;  594		}
L_381:
;  595		return false;
	XOR	A,A
L_382:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _isTouching ***************************
;Name                         Addr/Register   Size   Type
;_hero                               STATIC      6   variable
;_gfx_GetPixel                       IMPORT  -----   function
;check                                 IX-5      1   variable
;G_1                                   IX-4      1   variable
;f                                     IX-3      3   variable
;xVelocity                            IX+15      3   parameter
;yVelocity                            IX+12      3   parameter
;checkForPad                           IX+9      1   parameter
;part                                  IX+6      3   parameter


; Stack Frame Size: 23 (bytes)
;       Spill Code: -9 (instruction)


	XREF _arrow_compressed:ROM
	XREF _map5_compressed:ROM
	XREF _map4_compressed:ROM
	XREF _map3_compressed:ROM
	XREF _map2_compressed:ROM
	XREF _map1_compressed:ROM
	XREF _HeroJumpUpRight_compressed:ROM
	XREF _HeroJumpRight2_compressed:ROM
	XREF _HeroJumpRight1_compressed:ROM
	XREF _HeroJumpRight0_compressed:ROM
	XREF _HeroRight2_compressed:ROM
	XREF _HeroRight1_compressed:ROM
	XREF _HeroRight0_compressed:ROM
	XREF _HeroStill_compressed:ROM
	XREF _global_palette:ROM
	XREF _zx7_Decompress:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_FlipSpriteY:ROM
	XREF _gfx_ScaledSprite_NoClip:ROM
	XREF _gfx_GetSprite:ROM
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_Sprite_NoClip:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_GetPixel:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetTransparentColor:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _srand:ROM
	XREF _malloc:ROM
	XREF _floor:ROM
	XREF __idivs:ROM
	XREF __iremu:ROM
	XREF __fadd:ROM
	XREF __fsub:ROM
	XREF __fmul:ROM
	XREF __fdiv:ROM
	XREF __fcmp:ROM
	XREF __ftol:ROM
	XREF __ltof:ROM
	XREF __itol:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __lldix:ROM
	XREF __lstix:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XDEF _isTouching
	XDEF _main
	XDEF _hero
	END
