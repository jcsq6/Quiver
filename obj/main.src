; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT BSS
_hero:
	DS	6
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <math.h>
;    6	#include <stdio.h>
;    7	#include <stdlib.h>
;    8	#include <string.h>
;    9	
;   10	#include <graphx.h>
;   11	#include <keypadc.h>
;   12	#include <debug.h>
;   13	
;   14	#include <compression.h>
;   15	
;   16	#include "gfx/gfx.h"
;   17	
;   18	bool isTouching(enum bodyParts part, bool checkForPad, int yVelocity, int xVelocity);
;   19	
;   20	enum direction{
;   21		right,
;   22		left,
;   23		up,
;   24		down,
;   25		nothing
;   26	};
;   27	
;   28	enum bodyParts{
;   29		leftSide,
;   30		rightSide,
;   31		topHead,
;   32		bottomFeet
;   33	};
;   34	
;   35	gfx_point_t hero;
	SEGMENT CODE
;   36	
;   37	void main(void) {
_main:
	LD	HL,-120
	CALL	__frameset
;   38	
;   39		int x;
;   40		int y;
;   41	
;   42		int i;
;   43	
;   44		int mapNum;
;   45	
;   46		int velocity;
;   47	
;   48		gfx_point_t lastStill;
;   49	
;   50		gfx_sprite_t *map;
;   51	
;   52		gfx_sprite_t *HeroStill, *HeroLeft0, *HeroLeft1, *HeroLeft2, *HeroRight0, *HeroRight1, *HeroRight2,*HeroJumpRight0, *HeroJumpRight1, *HeroJumpRight2, *HeroJumpUpRight, *HeroJumpUpLeft, *HeroJumpLeft0, *HeroJumpLeft1, *HeroJumpLeft2;
;   53	
;   54		double distance;
;   55		unsigned int step;
;   56	
;   57		enum direction jumpingDir;
;   58	
;   59		bool doubleJumped, keyIsReleased, inLadder, facingRight, ascending, key, prevkey, isBoosted, tempBool1, tempBool2;
;   60	
;   61		gfx_sprite_t *heroRunRight[3];
;   62		gfx_sprite_t *heroRunLeft[3];
;   63	
;   64		gfx_sprite_t *heroJumpRight[3];
;   65	
;   66		gfx_sprite_t *behind_sprite;
;   67	
;   68		gfx_sprite_t *tempPerson;
;   69	
;   70		map = gfx_MallocSprite(80, 60);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,80
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-25),HL
;   71	
;   72		HeroStill = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-61),HL
;   73		HeroLeft0 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-84),HL
;   74		HeroLeft1 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-87),HL
;   75		HeroLeft2 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-81),HL
;   76		HeroRight0 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-65),HL
;   77		HeroRight1 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-49),HL
;   78		HeroRight2 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-52),HL
;   79		HeroJumpRight0 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-33),HL
;   80		HeroJumpRight1 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-36),HL
;   81		HeroJumpRight2 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-39),HL
;   82		HeroJumpUpRight = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-42),HL
;   83		HeroJumpUpLeft = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-55),HL
;   84		HeroJumpLeft0 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-68),HL
;   85		HeroJumpLeft1 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-71),HL
;   86		HeroJumpLeft2 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-74),HL
;   87	
;   88	
;   89		zx7_Decompress( HeroStill, HeroStill_compressed );
	LD	BC,_HeroStill_compressed
	PUSH	BC
	LD	BC,(IX+-61)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   90		zx7_Decompress( HeroRight0, HeroRight0_compressed );
	LD	BC,_HeroRight0_compressed
	PUSH	BC
	LD	BC,(IX+-65)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   91		zx7_Decompress( HeroRight1, HeroRight1_compressed );
	LD	BC,_HeroRight1_compressed
	PUSH	BC
	LD	BC,(IX+-49)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   92		zx7_Decompress( HeroRight2, HeroRight2_compressed );
	LD	BC,_HeroRight2_compressed
	PUSH	BC
	LD	BC,(IX+-52)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   93		zx7_Decompress( HeroJumpRight0, HeroJumpRight0_compressed );
	LD	BC,_HeroJumpRight0_compressed
	PUSH	BC
	LD	BC,(IX+-33)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   94		zx7_Decompress( HeroJumpRight1, HeroJumpRight1_compressed );
	LD	BC,_HeroJumpRight1_compressed
	PUSH	BC
	LD	BC,(IX+-36)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   95		zx7_Decompress( HeroJumpRight2, HeroJumpRight2_compressed );
	LD	BC,_HeroJumpRight2_compressed
	PUSH	BC
	LD	BC,(IX+-39)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   96		zx7_Decompress( HeroJumpUpRight, HeroJumpUpRight_compressed );
	LD	BC,_HeroJumpUpRight_compressed
	PUSH	BC
	LD	BC,(IX+-42)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   97	
;   98		gfx_FlipSpriteY(HeroRight0, HeroLeft0);
	LD	BC,(IX+-84)
	PUSH	BC
	LD	BC,(IX+-65)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;   99		gfx_FlipSpriteY(HeroRight1, HeroLeft1);
	LD	BC,(IX+-87)
	PUSH	BC
	LD	BC,(IX+-49)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  100		gfx_FlipSpriteY(HeroRight2, HeroLeft2);
	LD	BC,(IX+-81)
	PUSH	BC
	LD	BC,(IX+-52)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  101		gfx_FlipSpriteY(HeroJumpRight0, HeroJumpLeft0);
	LD	BC,(IX+-68)
	PUSH	BC
	LD	BC,(IX+-33)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  102		gfx_FlipSpriteY(HeroJumpRight1, HeroJumpLeft1);
	LD	BC,(IX+-71)
	PUSH	BC
	LD	BC,(IX+-36)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  103		gfx_FlipSpriteY(HeroJumpRight2, HeroJumpLeft2);
	LD	BC,(IX+-74)
	PUSH	BC
	LD	BC,(IX+-39)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  104		gfx_FlipSpriteY(HeroJumpUpRight, HeroJumpUpLeft);
	LD	BC,(IX+-55)
	PUSH	BC
	LD	BC,(IX+-42)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  105	
;  106	
;  107		velocity = 2;
	LD	BC,2
	LD	(IX+-29),BC
;  108	
;  109		jumpingDir = nothing;
	LD	BC,4
	LD	(IX+-17),BC
;  110	
;  111		ascending = doubleJumped = inLadder = isBoosted = keyIsReleased = false;
	LD	(IX+-19),0
	LD	(IX+-22),0
	LD	(IX+-14),0
	LD	(IX+-18),0
	LD	(IX+-10),0
;  112	
;  113		facingRight = true;
	LD	(IX+-21),1
;  114	
;  115		heroRunRight[0] = HeroRight0;
	LD	BC,(IX+-65)
	LD	(IX+-105),BC
;  116		heroRunRight[1] = HeroRight1;
	LEA	HL,IX+-102
	LD	BC,(IX+-49)
	LD	(HL),BC
;  117		heroRunRight[2] = HeroRight2;
	LEA	HL,IX+-99
	LD	BC,(IX+-52)
	LD	(HL),BC
;  118	
;  119		heroRunLeft[0] = HeroLeft0;
	LD	BC,(IX+-84)
	LD	(IX+-96),BC
;  120		heroRunLeft[1] = HeroLeft1;
	LEA	HL,IX+-93
	LD	BC,(IX+-87)
	LD	(HL),BC
;  121		heroRunLeft[2] = HeroLeft2;
	LEA	HL,IX+-90
	LD	BC,(IX+-81)
	LD	(HL),BC
;  122	
;  123		heroJumpRight[0] = HeroJumpRight0;
	LD	BC,(IX+-33)
	LD	(IX+-114),BC
;  124		heroJumpRight[1] = HeroJumpRight1;
	LEA	IY,IX+-114
	LEA	HL,IY+3
	LD	BC,(IX+-36)
	LD	(HL),BC
;  125		heroJumpRight[2] = HeroJumpRight2;
	LD	BC,(IX+-39)
;  126	
;  127		behind_sprite = gfx_MallocSprite(20, 40);
	LD	DE,_malloc
	PUSH	DE
	LD	DE,40
	PUSH	DE
	LD	DE,20
	PUSH	DE
	LEA	HL,IY+6
	LD	(HL),BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-13),HL
;  128	
;  129		lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  130		lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  131	
;  132		srand(rtc_Time());
	LD	BC,(15925316)
	PUSH	BC
	CALL	_srand
	POP	BC
;  133	
;  134		gfx_Begin();
	CALL	_gfx_Begin
;  135	
;  136		gfx_SetPalette(global_palette, sizeof_global_palette, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,112
	PUSH	BC
	LD	BC,_global_palette
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  137	
;  138		mapNum = 1;
	LD	BC,1
	LD	(IX+-9),BC
;  139	
;  140		gfx_FillScreen(1);
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  141	
;  142		while(!(kb_Data[6] & kb_Enter)){
	JR	L_17
L_18:
;  143			kb_Scan();
	CALL	_kb_Scan
;  144	
;  145	   		key = kb_Data[7] == kb_Down;
	LD	A,(16056350)
	CP	A,1
	JR	NZ,L__1
	LD	A,1
	JR	L__2
L__1:
	XOR	A,A
L__2:
	LD	(IX+-30),A
;  146	
;  147			if(key && !prevkey) {
	OR	A,A
	JR	Z,L_5
	LD	A,(IX+-62)
	OR	A,A
	JR	NZ,L_5
;  148				if(mapNum == 5) mapNum = 0;
	LD	BC,5
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_3
	LD	BC,0
	LD	(IX+-9),BC
L_3:
;  149				mapNum++;
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
;  150				gfx_SetColor(1);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  151	
;  152				gfx_FillRectangle(0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  153				gfx_FillRectangle(0, 20, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  154				gfx_FillRectangle(0, 40, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  155				gfx_FillRectangle(0, 60, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  156				gfx_FillRectangle(0, 80, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  157	
;  158				gfx_SetColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  159			}
L_5:
;  160	
;  161	
;  162			gfx_PrintStringXY("Map1", 20, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__6
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  163			gfx_PrintStringXY("Map2", 20, 20);
	LD	BC,20
	PUSH	BC
	PUSH	BC
	LD	BC,L__7
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  164			gfx_PrintStringXY("Map3", 20, 40);
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__8
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  165			gfx_PrintStringXY("Map4", 20, 60);
	LD	BC,60
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__9
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  166			gfx_PrintStringXY("Map5", 20, 80);
	LD	BC,80
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__10
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  167	
;  168	
;  169			if(mapNum == 1)	gfx_FillRectangle(0, 0, 4, 4);
	LD	HL,(IX+-9)
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_14
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  170			else if(mapNum == 2) gfx_FillRectangle(0, 20, 4, 4);			
	JR	L_15
L_14:
	LD	BC,2
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_12
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  171			else if(mapNum == 3) gfx_FillRectangle(0, 40, 4, 4);
	JR	L_15
L_12:
	LD	BC,3
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_10
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  172			else if(mapNum == 4) gfx_FillRectangle(0, 60, 4, 4);
	JR	L_15
L_10:
	LD	BC,4
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_8
	PUSH	BC
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  173			else if(mapNum == 5) gfx_FillRectangle(0, 80, 4, 4);
	JR	L_15
L_8:
	LD	BC,5
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_15
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_15:
;  174	
;  175			prevkey = key;
	LD	A,(IX+-30)
	LD	(IX+-62),A
;  176	
;  177			dbg_ClearConsole();
;  178			dbg_sprintf(dbgout, "%d", mapNum);
;  179		}
L_17:
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_18
;  180	
;  181		if(mapNum == 1)	{
	LD	BC,1
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_27
;  182			zx7_Decompress( map, map1_compressed );
	LD	BC,_map1_compressed
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  183			hero.x = 0;
	LD	BC,0
	LD	(_hero),BC
;  184			hero.y = 150;
	LD	BC,150
	LD	(_hero+3),BC
;  185		}
;  186		else if(mapNum == 2) {
	JR	L_29
L_27:
	LD	BC,2
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_25
;  187			zx7_Decompress( map, map2_compressed );		
	LD	BC,_map2_compressed
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  188			hero.x = 0;
	LD	BC,0
	LD	(_hero),BC
;  189			hero.y = 180;
	LD	BC,180
	LD	(_hero+3),BC
;  190		}
;  191		else if(mapNum == 3) {
	JR	L_29
L_25:
	LD	BC,3
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_23
;  192			zx7_Decompress( map, map3_compressed );
	LD	BC,_map3_compressed
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  193			hero.x = 0;
	LD	BC,0
	LD	(_hero),BC
;  194			hero.y = 180;
	LD	BC,180
	LD	(_hero+3),BC
;  195		}
;  196		else if(mapNum == 4) {
	JR	L_29
L_23:
	LD	BC,4
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_21
;  197			zx7_Decompress( map, map4_compressed );
	LD	BC,_map4_compressed
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  198			hero.x = 50;
	LD	BC,50
	LD	(_hero),BC
;  199			hero.y = 100;
	LD	BC,100
	LD	(_hero+3),BC
;  200		}		
;  201		else if(mapNum == 5) {
	JR	L_29
L_21:
	LD	BC,5
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_29
;  202			zx7_Decompress( map, map5_compressed );
	LD	BC,_map5_compressed
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  203			hero.x = 80;
	LD	BC,80
	LD	(_hero),BC
;  204			hero.y = 180;
	LD	BC,180
	LD	(_hero+3),BC
;  205		}
L_29:
;  206		
;  207	
;  208		gfx_ScaledSprite_NoClip(map, 0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  209	
;  210		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  211		
;  212		gfx_SetTransparentColor(1);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTransparentColor
	POP	BC
;  213	
;  214		gfx_ScaledSprite_NoClip(map, 0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-25)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  215	
;  216		gfx_BlitBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  217	
;  218		gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  219		gfx_TransparentSprite_NoClip(HeroStill, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-61)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  220	
;  221		while(!(kb_Data[6] & kb_Clear)){
	JR	L_276
L_277:
;  222	
;  223			kb_Scan();
	CALL	_kb_Scan
;  224	
;  225			tempBool1 = isTouching(bottomFeet, false, velocity - 1, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+-29)
	DEC	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-26),A
;  226			tempBool2 = isTouching(bottomFeet, false, 0, 0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-20),A
;  227			velocity = (hero.y - lastStill.y ) / 50 + 2;
	LD	HL,(_hero+3)
	LD	DE,(IX+-3)
	LD	BC,50
;  228	
;  229			dbg_ClearConsole();
;  230			dbg_sprintf(dbgout, "hero = (%d, %d)\n", hero.x, hero.y);
;  231			dbg_sprintf(dbgout, "velocity = %d\n", velocity);
;  232			dbg_sprintf(dbgout, "keyIsReleased = %d\n", keyIsReleased);
;  233			dbg_sprintf(dbgout, "ascending = %d\n", ascending);
;  234			dbg_sprintf(dbgout, "inLadder = %d\n", inLadder);
;  235			dbg_sprintf(dbgout, "doubleJumped = %d\n", doubleJumped);
;  236			dbg_sprintf(dbgout, "jumpingDir = %d\n", jumpingDir);
;  237			dbg_sprintf(dbgout, "tempBool1 = %d\n", tempBool1);
;  238			dbg_sprintf(dbgout, "tempBool2 = %d\n", tempBool2);
;  239			gfx_BlitBuffer();
	LD	(IX+-117),HL	; spill
	LD	HL,1
	LD	(IX+-120),HL	; spill
	LD	HL,(IX+-117)	; unspill
	OR	A,A
	SBC	HL,DE
	CALL	__idivs
	INC	HL
	INC	HL
	LD	(IX+-29),HL
	LD	HL,(IX+-120)	; unspill
	PUSH	HL
	CALL	_gfx_Blit
	POP	BC
;  240			//while(!os_GetCSC());
;  241	
;  242			if((((kb_Data[7] & kb_Right || kb_Data[1] & kb_Mode) && !isTouching(rightSide, false, 0, 1)) || ((kb_Data[7] & kb_Left || kb_Data[1] & kb_2nd) && !isTouching(leftSide, false, 0, -1))) && !(((kb_Data[7] & kb_Right || kb_Data[1] & kb_Mode)) && ((kb_Data[7] & kb_Left || kb_Data[1] & kb_2nd))) && jumpingDir == nothing && !(inLadder && hero.y < 59 && hero.y > 41 && mapNum == 1) && !isBoosted && !ascending)  {
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_49
	LD	A,(16056338)
	AND	A,64
	JR	Z,L_52
L_49:
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_56
L_52:
	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_51
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_275
L_51:
	LD	BC,16777215
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_275
L_56:
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_55
	LD	A,(16056338)
	AND	A,64
	JR	Z,L_57
L_55:
	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_275
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_275
L_57:
	LD	BC,4
	LD	HL,(IX+-17)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_275
	LD	A,(IX+-14)
	OR	A,A
	JR	Z,L_62
	LD	BC,59
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JP	P,L_62
	LD	BC,(_hero+3)
	LD	HL,41
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_62
	LD	BC,1
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_275
L_62:
	LD	A,(IX+-22)
	OR	A,A
	JR	NZ,L_275
	LD	A,(IX+-10)
	OR	A,A
	JR	NZ,L_275
;  243				gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  244	
;  245				//IF RIGHT IS PRESSED
;  246				if(kb_Data[7] & kb_Right || kb_Data[1] & kb_Mode) {
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_69
	LD	A,(16056338)
	AND	A,64
	JR	Z,L_70
L_69:
;  247					facingRight = true;
	LD	(IX+-21),1
;  248					if(kb_Data[7] & kb_Up && !inLadder) {
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_68
	LD	A,(IX+-14)
	OR	A,A
	JR	NZ,L_68
;  249						jumpingDir = right;
	LD	BC,0
	LD	(IX+-17),BC
;  250						ascending = true;
	LD	(IX+-10),1
;  251						keyIsReleased = false;
	LD	(IX+-19),0
;  252						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  253						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  254						if(!tempBool2) doubleJumped = true;
	LD	A,(IX+-20)
	OR	A,A
	JR	NZ,L_68
	LD	(IX+-18),1
;  255					}
L_68:
;  256					hero.x += 2;
	LD	IY,(_hero)
	LEA	BC,IY+2
	LD	(_hero),BC
;  257				};
L_70:
;  258				//IF LEFT IS PRESSED
;  259				if(kb_Data[7] & kb_Left || kb_Data[1] & kb_2nd){ 
	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_76
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_93
L_76:
;  260					facingRight = false;
	LD	(IX+-21),0
;  261					if(kb_Data[7] & kb_Up && !inLadder) {
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_75
	LD	A,(IX+-14)
	OR	A,A
	JR	NZ,L_75
;  262						jumpingDir = left;
	LD	BC,1
	LD	(IX+-17),BC
;  263						ascending = true;
	LD	(IX+-10),1
;  264						keyIsReleased = false;
	LD	(IX+-19),0
;  265	
;  266						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  267						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  268						if(!tempBool2) doubleJumped = true;
	LD	A,(IX+-20)
	OR	A,A
	JR	NZ,L_75
	LD	(IX+-18),1
;  269					}				
L_75:
;  270					hero.x -= 2;
	LD	IY,(_hero)
	LEA	BC,IY+-2
	LD	(_hero),BC
;  271				}
L_93:
;  272	
;  273				//IF IS IN AIR
;  274				if(!tempBool2 && !inLadder){
	LD	A,(IX+-20)
	OR	A,A
	JR	NZ,L_92
	LD	A,(IX+-14)
	OR	A,A
	JR	NZ,L_92
;  275						//gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
;  276	
;  277						if(!tempBool1)	hero.y += velocity;
	LD	A,(IX+-26)
	OR	A,A
	JR	NZ,L_82
	LD	BC,(IX+-29)
	LD	HL,(_hero+3)
	ADD	HL,BC
	LD	(_hero+3),HL
;  278						else if(!tempBool2 && tempBool1) hero.y++;
	JR	L_85
L_82:
	LD	A,(IX+-20)
	OR	A,A
	JR	NZ,L_85
	LD	A,(IX+-26)
	OR	A,A
	JR	Z,L_85
	LD	BC,(_hero+3)
	INC	BC
	LD	(_hero+3),BC
L_85:
;  279	
;  280						if(isTouching(rightSide, false, 0, 0)) hero.x--;
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_88
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
L_88:
;  281						if(isTouching(leftSide, false, 0, 0)) hero.x++;
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_95
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
;  282				}
;  283				else if(!inLadder && tempBool2){
	JR	L_95
L_92:
	LD	A,(IX+-14)
	OR	A,A
	JR	NZ,L_95
	LD	A,(IX+-20)
	OR	A,A
	JR	Z,L_95
;  284					lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  285				}
L_95:
;  286	
;  287				if(isTouching(bottomFeet, true, 0, 0)) {
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_96
;  288					isBoosted = true;
	LD	(IX+-22),1
;  289					ascending = true;
	LD	(IX+-10),1
;  290					lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  291					lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  292				}
L_96:
;  293	
;  294				inLadder = false;
	LD	(IX+-14),0
;  295				if((hero.x >= 106 && hero.x <= 136 && hero.y >= 39 && hero.y <= 140 && mapNum == 1) || (hero.x >= 271 && mapNum == 2 && hero.y >= 120)) inLadder = true;
	LD	HL,(_hero)
	LD	BC,106
	OR	A,A
	SBC	HL,BC
	JP	M,L_103
	LD	BC,(_hero)
	LD	HL,136
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_103
	LD	BC,39
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_103
	LD	BC,(_hero+3)
	LD	HL,140
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_103
	LD	BC,1
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_104
L_103:
	LD	BC,271
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_106
	LD	BC,2
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_106
	LD	BC,120
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_106
L_104:
	LD	(IX+-14),1
L_106:
;  296	
;  297				if(hero.x < 0) hero.x = 0;
	LD	HL,(_hero)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_108
	LD	BC,0
	LD	(_hero),BC
L_108:
;  298				if(hero.x > 300) hero.x = 300;
	LD	BC,(_hero)
	LD	HL,300
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_109
	LD	BC,300
	LD	(_hero),BC
L_109:
;  299	
;  300				gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  301	
;  302				if(kb_Data[7] & kb_Right || kb_Data[1] & kb_Mode){
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_111
	LD	A,(16056338)
	AND	A,64
	JR	Z,L_114
L_111:
;  303					distance = hero.x - lastStill.x;
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	CALL	__itol
	CALL	__ltof
	LD	(IX+-78),BC
	LD	(IX+-75),A
;  304					step = floor(distance/6);
	LD	HL,12582912
	LD	E,64
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_floor
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	CALL	__ftol
	LD	(IX+-58),BC
;  305	
;  306					gfx_TransparentSprite_NoClip(heroRunRight[ step % 3 ], hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,3
	LD	DE,(_hero)
	PUSH	DE
	LD	HL,(IX+-58)
	CALL	__iremu
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-105
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  307				}
L_114:
;  308				if(kb_Data[7] & kb_Left || kb_Data[1] & kb_2nd){
	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_113
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_276
L_113:
;  309					distance = lastStill.x - hero.x;
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	CALL	__itol
	CALL	__ltof
	LD	(IX+-78),BC
	LD	(IX+-75),A
;  310					step = floor(distance/6);
	LD	HL,12582912
	LD	E,64
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_floor
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	CALL	__ftol
	LD	(IX+-58),BC
;  311	
;  312					gfx_TransparentSprite_NoClip(heroRunLeft[ step % 3 ], hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,3
	LD	DE,(_hero)
	PUSH	DE
	LD	HL,(IX+-58)
	CALL	__iremu
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-96
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  313				}
;  314	
;  315			}
;  316			//IF NOTHING IS PRESSED
;  317			else{
	JR	L_276
L_275:
;  318	
;  319				//if(velocity % 2 != 0) velocity++;
;  320				gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  321	
;  322	
;  323				//IF IS IN AIR
;  324				if(!tempBool2 && !inLadder && !ascending){
	LD	A,(IX+-20)
	OR	A,A
	JR	NZ,L_136
	LD	A,(IX+-14)
	OR	A,A
	JR	NZ,L_136
	LD	A,(IX+-10)
	OR	A,A
	JR	NZ,L_136
;  325						//gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
;  326	
;  327						if(!tempBool1)	hero.y += velocity;
	LD	A,(IX+-26)
	OR	A,A
	JR	NZ,L_121
	LD	BC,(IX+-29)
	LD	HL,(_hero+3)
	ADD	HL,BC
	LD	(_hero+3),HL
;  328						else if(!tempBool2 && tempBool1) hero.y++;
	JR	L_124
L_121:
	LD	A,(IX+-20)
	OR	A,A
	JR	NZ,L_124
	LD	A,(IX+-26)
	OR	A,A
	JR	Z,L_124
	LD	BC,(_hero+3)
	INC	BC
	LD	(_hero+3),BC
L_124:
;  329	
;  330						if(isTouching(rightSide, false, 0, 0)) hero.x--;
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_127
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
L_127:
;  331						if(isTouching(leftSide, false, 0, 0)) hero.x++;
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_128
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
L_128:
;  332						gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  333				}
;  334				else if(tempBool2 && !inLadder && !ascending){
	JR	L_147
L_136:
	LD	A,(IX+-20)
	OR	A,A
	JR	Z,L_147
	LD	A,(IX+-14)
	OR	A,A
	JR	NZ,L_147
	LD	A,(IX+-10)
	OR	A,A
	JR	NZ,L_147
;  335					if(tempBool2) {
	LD	A,(IX+-20)
	OR	A,A
	JR	Z,L_133
;  336						jumpingDir = nothing;
	LD	BC,4
	LD	(IX+-17),BC
;  337						doubleJumped = false;
	LD	(IX+-18),0
;  338					}
L_133:
;  339					if(isTouching(bottomFeet, true, 0, 0)) {
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_147
;  340						isBoosted = true;
	LD	(IX+-22),1
;  341						ascending = true;
	LD	(IX+-10),1
;  342						jumpingDir = nothing;
	LD	BC,4
	LD	(IX+-17),BC
;  343						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  344						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  345					}	
;  346				}
L_147:
;  347	
;  348				//MOVING LADDER
;  349				if(inLadder && kb_Data[7] & kb_Up){
	LD	A,(IX+-14)
	OR	A,A
	JR	Z,L_146
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_146
;  350					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  351					hero.y -= 2;
	LD	IY,(_hero+3)
	LEA	BC,IY+-2
	LD	(_hero+3),BC
;  352					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  353	
;  354					//inLadder = false;
;  355					//if((hero.x >= 106 && hero.x <= 136 && hero.y >= 39 && hero.y <= 140 && mapNum == 1) || (hero.x >= 271 && mapNum == 2)) inLadder = true;
;  356				}
;  357				else if(inLadder && kb_Data[7] & kb_Down){
	JR	L_153
L_146:
	LD	A,(IX+-14)
	OR	A,A
	JR	Z,L_153
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_153
;  358					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  359					if(hero.y != 140 && mapNum == 1 || mapNum != 1 && hero.y != 200) hero.y += 2;
	LD	BC,140
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_141
	LD	BC,1
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_142
L_141:
	LD	BC,1
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_143
	LD	BC,200
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_143
L_142:
	LD	IY,(_hero+3)
	LEA	BC,IY+2
	LD	(_hero+3),BC
L_143:
;  360					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  361	
;  362					//inLadder = false;
;  363					//if((hero.x >= 106 && hero.x <= 136 && hero.y >= 39 && hero.y <= 140 && mapNum == 1) || (hero.x >= 271 && mapNum == 2)) inLadder = true;
;  364				}
L_153:
;  365				
;  366				//CHECK FOR JUMPING UP
;  367				if((kb_Data[7] & kb_Up) && jumpingDir == nothing && !doubleJumped && !inLadder) {
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_273
	LD	BC,4
	LD	HL,(IX+-17)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_273
	LD	A,(IX+-18)
	OR	A,A
	JR	NZ,L_273
	LD	A,(IX+-14)
	OR	A,A
	JR	NZ,L_273
;  368					jumpingDir = up;
	LD	BC,2
	LD	(IX+-17),BC
;  369					isBoosted = false;
	LD	(IX+-22),0
;  370					ascending = true;
	LD	(IX+-10),1
;  371	
;  372					lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  373					lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  374	
;  375					keyIsReleased = false;
	LD	(IX+-19),0
;  376	
;  377					if(!tempBool2) doubleJumped = true;
	LD	A,(IX+-20)
	OR	A,A
	JR	NZ,L_273
	LD	(IX+-18),1
;  378					
;  379				}
L_273:
;  380				//STANDING STILL ANIMATION
;  381				if(jumpingDir == nothing && !isBoosted){
	LD	BC,4
	LD	HL,(IX+-17)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__100
	LD	A,1
	JR	L__101
L__100:
	XOR	A,A
L__101:
	LD	(IX+-43),A
	OR	A,A
	JR	NZ,L_272
	LD	A,(IX+-22)
	OR	A,A
	JR	NZ,L_272
;  382	
;  383					inLadder = false;
	LD	(IX+-14),0
;  384					if((hero.x >= 106 && hero.x <= 136 && hero.y >= 39 && hero.y <= 140 && mapNum == 1) || (hero.x >= 271 && mapNum == 2 && hero.y >= 120) && jumpingDir == nothing) inLadder = true;
	LD	HL,(_hero)
	LD	BC,106
	OR	A,A
	SBC	HL,BC
	JP	M,L_162
	LD	BC,(_hero)
	LD	HL,136
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_162
	LD	BC,39
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_162
	LD	BC,(_hero+3)
	LD	HL,140
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_162
	LD	BC,1
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_163
L_162:
	LD	BC,271
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_165
	LD	BC,2
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_165
	LD	BC,120
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_165
	LD	A,(IX+-43)
	OR	A,A
	JR	NZ,L_165
L_163:
	LD	(IX+-14),1
L_165:
;  385	
;  386					if(isTouching(bottomFeet, true, 0, 0)) {
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_166
;  387						isBoosted = true;
	LD	(IX+-22),1
;  388						ascending = true;
	LD	(IX+-10),1
;  389						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  390						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  391					}
L_166:
;  392	
;  393					gfx_TransparentSprite_NoClip(HeroStill, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-61)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  394				}
;  395	
;  396				//JUMPING RIGHT ANIMATION
;  397				else if(jumpingDir == right){
	JR	L_276
L_272:
	LD	HL,(IX+-17)
	CALL	__icmpzero
	JR	NZ,L_270
;  398					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  399	
;  400					if(!(kb_Data[7] & kb_Up) && !keyIsReleased) {
	LD	A,(16056350)
	AND	A,8
	LD	(IX+-44),A
	OR	A,A
	JR	NZ,L_172
	LD	A,(IX+-19)
	OR	A,A
	JR	NZ,L_172
;  401						keyIsReleased = true;
	LD	(IX+-19),1
;  402					}
L_172:
;  403	
;  404					if(kb_Data[7] & kb_Up && keyIsReleased && !doubleJumped){
	LD	A,(IX+-44)
	OR	A,A
	JR	Z,L_180
	LD	A,(IX+-19)
	OR	A,A
	JR	Z,L_180
	LD	A,(IX+-18)
	OR	A,A
	JR	NZ,L_180
;  405						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  406						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  407						jumpingDir = up;
	LD	BC,2
	LD	(IX+-17),BC
;  408						ascending = true;
	LD	(IX+-10),1
;  409						doubleJumped = true;
	LD	(IX+-18),1
;  410					}
L_180:
;  411	
;  412					if(hero.x - lastStill.x <= 50 && !isTouching(rightSide, false, 0, 1)) hero.x += 2;
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	JP	M,L_179
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_179
	LD	IY,(_hero)
	LEA	BC,IY+2
	LD	(_hero),BC
;  413					else if(hero.x - lastStill.x > 50 && hero.x - lastStill.x <= 65 && !isTouching(rightSide, false, 0, 0)) hero.x++;
	JR	L_184
L_179:
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	JP	P,L_184
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,65
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_184
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_184
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
L_184:
;  414	
;  415					if(ascending){
	LD	A,(IX+-10)
	OR	A,A
	JR	Z,L_186
;  416						hero.y -= 2;
	LD	IY,(_hero+3)
	LEA	BC,IY+-2
	LD	(_hero+3),BC
;  417						if(lastStill.y - hero.y > 25 || isTouching(topHead, false, -1, 0)) {
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,25
	OR	A,A
	SBC	HL,BC
	JP	M,L_182
	LD	BC,0
	PUSH	BC
	LD	BC,16777215
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_186
L_182:
;  418							ascending = false;
	LD	(IX+-10),0
;  419							lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  420							lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  421						}
;  422					}
L_186:
;  423	
;  424					if(hero.x > 300) hero.x = 300;
	LD	BC,(_hero)
	LD	HL,300
	OR	A,A
	SBC	HL,BC
	JP	P,L_187
	LD	BC,300
	LD	(_hero),BC
L_187:
;  425	
;  426					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  427	
;  428					if(hero.x - lastStill.x <= 12) gfx_TransparentSprite_NoClip(HeroJumpRight0, hero.x, hero.y);
	LD	BC,(IX+-6)
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_193
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-33)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  429					else if(hero.x - lastStill.x > 12 && hero.x - lastStill.x <= 24) gfx_TransparentSprite_NoClip(HeroJumpRight1, hero.x, hero.y);
	JR	L_276
L_193:
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_191
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_191
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-36)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  430					else if(hero.x - lastStill.x > 24) gfx_TransparentSprite_NoClip(HeroJumpRight2, hero.x, hero.y);
	JR	L_276
L_191:
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_276
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-39)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  431	
;  432					
;  433				}
;  434				//JUMPING LEFT ANIMATION
;  435				else if(jumpingDir == left){
	JR	L_276
L_270:
	LD	BC,1
	LD	HL,(IX+-17)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_268
;  436					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  437	
;  438					if(!(kb_Data[7] & kb_Up) && !keyIsReleased && !doubleJumped) {
	LD	A,(16056350)
	AND	A,8
	LD	(IX+-45),A
	OR	A,A
	JR	NZ,L_199
	LD	A,(IX+-19)
	OR	A,A
	JR	NZ,L_199
	LD	A,(IX+-18)
	OR	A,A
	JR	NZ,L_199
;  439						keyIsReleased = true;
	LD	(IX+-19),1
;  440					}
L_199:
;  441	
;  442					if(kb_Data[7] & kb_Up && keyIsReleased){
	LD	A,(IX+-45)
	OR	A,A
	JR	Z,L_207
	LD	A,(IX+-19)
	OR	A,A
	JR	Z,L_207
;  443						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  444						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  445						jumpingDir = up;
	LD	BC,2
	LD	(IX+-17),BC
;  446						doubleJumped = true;
	LD	(IX+-18),1
;  447						ascending = true;
	LD	(IX+-10),1
;  448					}
L_207:
;  449	
;  450					if(lastStill.x - hero.x <= 50 && !isTouching(leftSide, false, 0, -1)) hero.x -= 2;
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	JP	M,L_206
	LD	BC,16777215
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_206
	LD	IY,(_hero)
	LEA	BC,IY+-2
	LD	(_hero),BC
;  451					else if(lastStill.x - hero.x > 50 && lastStill.x - hero.x <= 65 && !isTouching(leftSide, false, 0, 0)) hero.x--;
	JR	L_211
L_206:
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	JP	P,L_211
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,65
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_211
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_211
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
L_211:
;  452					if(ascending){
	LD	A,(IX+-10)
	OR	A,A
	JR	Z,L_213
;  453						hero.y -= 2;
	LD	IY,(_hero+3)
	LEA	BC,IY+-2
	LD	(_hero+3),BC
;  454						if(lastStill.y - hero.y > 25 || isTouching(topHead, false, -1, 0)) {
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,25
	OR	A,A
	SBC	HL,BC
	JP	M,L_209
	LD	BC,0
	PUSH	BC
	LD	BC,16777215
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_213
L_209:
;  455							lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  456							lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  457							ascending = false;
	LD	(IX+-10),0
;  458						}
;  459					}
L_213:
;  460					if(hero.x < 0) hero.x = 0;
	LD	HL,(_hero)
	CALL	__icmpzero
	JP	P,L_214
	LD	BC,0
	LD	(_hero),BC
L_214:
;  461	
;  462					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  463	
;  464					if(lastStill.x - hero.x <= 12) gfx_TransparentSprite_NoClip(HeroJumpLeft0, hero.x, hero.y);
	LD	HL,(IX+-6)
	LD	BC,(_hero)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_220
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-68)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  465					else if(lastStill.x - hero.x > 12 && lastStill.x - hero.x <= 24) gfx_TransparentSprite_NoClip(HeroJumpLeft1, hero.x, hero.y);
	JR	L_276
L_220:
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_218
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_218
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-71)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  466					else if(lastStill.x - hero.x > 24) gfx_TransparentSprite_NoClip(HeroJumpLeft2, hero.x, hero.y);
	JR	L_276
L_218:
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_276
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-74)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  467				}
;  468				//JUMPING UP ANIMATION
;  469				else if(jumpingDir == up){
	JR	L_276
L_268:
	LD	BC,2
	LD	HL,(IX+-17)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_266
;  470					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  471	
;  472					if(!(kb_Data[7] & kb_Up) && !keyIsReleased  && !doubleJumped) {
	LD	A,(16056350)
	AND	A,8
	LD	(IX+-46),A
	OR	A,A
	JR	NZ,L_227
	LD	A,(IX+-19)
	OR	A,A
	JR	NZ,L_227
	LD	A,(IX+-18)
	OR	A,A
	JR	NZ,L_227
;  473						keyIsReleased = true;
	LD	(IX+-19),1
;  474					}
L_227:
;  475	
;  476					if(kb_Data[7] & kb_Up && keyIsReleased && !doubleJumped){
	LD	A,(IX+-46)
	OR	A,A
	JR	Z,L_232
	LD	A,(IX+-19)
	OR	A,A
	JR	Z,L_232
	LD	A,(IX+-18)
	OR	A,A
	JR	NZ,L_232
;  477						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  478						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  479						jumpingDir = up;
	LD	BC,2
	LD	(IX+-17),BC
;  480						doubleJumped = true;
	LD	(IX+-18),1
;  481						ascending = true;
	LD	(IX+-10),1
;  482					}
L_232:
;  483	
;  484					if(((kb_Data[7] & kb_Left || kb_Data[1] & kb_2nd)) && !isTouching(leftSide, false, 0, 0)) {
	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_229
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_237
L_229:
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_237
;  485						hero.x--;
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
;  486						facingRight = false;
	LD	(IX+-21),0
;  487					}
L_237:
;  488					if((kb_Data[7] & kb_Right || kb_Data[1] & kb_Mode) && !isTouching(rightSide, false, 0, 0)) {
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_234
	LD	A,(16056338)
	AND	A,64
	JR	Z,L_241
L_234:
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_241
;  489						hero.x++;
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
;  490						facingRight = true;
	LD	(IX+-21),1
;  491					}
L_241:
;  492	
;  493					if(ascending){
	LD	A,(IX+-10)
	OR	A,A
	JR	Z,L_242
;  494						hero.y -= 2;
	LD	IY,(_hero+3)
	LEA	BC,IY+-2
	LD	(_hero+3),BC
;  495						if(lastStill.y - hero.y > 25 || isTouching(topHead, false, -1, 0)) {
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,25
	OR	A,A
	SBC	HL,BC
	JP	M,L_239
	LD	BC,0
	PUSH	BC
	LD	BC,16777215
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_242
L_239:
;  496							ascending = false;
	LD	(IX+-10),0
;  497							lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  498							lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  499						}
;  500					}
L_242:
;  501	
;  502					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  503					
;  504					if(facingRight) gfx_TransparentSprite_NoClip(HeroJumpUpRight, hero.x, hero.y);
	LD	A,(IX+-21)
	OR	A,A
	JR	Z,L_244
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-42)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  505					else gfx_TransparentSprite_NoClip(HeroJumpUpLeft, hero.x, hero.y);
	JR	L_276
L_244:
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-55)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  506					
;  507				}
;  508				else if(isBoosted){
	JR	L_276
L_266:
	LD	A,(IX+-22)
	OR	A,A
	JR	Z,L_276
;  509					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  510	
;  511					//if(kb_Data[7] & kb_Up && !ascending){
;  512					//	lastStill.x = hero.x;
;  513					//	lastStill.y = hero.y;
;  514					//	jumpingDir = up;
;  515					//	isBoosted = false;
;  516					//	doubleJumped = true;
;  517					//	ascending = true;
;  518					//	keyIsReleased = true;
;  519					//}
;  520	
;  521					if(((kb_Data[7] & kb_Left || kb_Data[1] & kb_2nd)) && !isTouching(leftSide, false, 0, 0)) {
	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_246
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_253
L_246:
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_253
;  522						hero.x--;
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
;  523						facingRight = false;
	LD	(IX+-21),0
;  524					}
L_253:
;  525					if((kb_Data[7] & kb_Right || kb_Data[1] & kb_Mode) && !isTouching(rightSide, false, 0, 0)) {
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_250
	LD	A,(16056338)
	AND	A,64
	JR	Z,L_260
L_250:
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_260
;  526						hero.x++;
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
;  527						facingRight = true;
	LD	(IX+-21),1
;  528					}
L_260:
;  529	
;  530					if(ascending){
	LD	A,(IX+-10)
	OR	A,A
	JR	Z,L_261
;  531						if(lastStill.y - hero.y <= 180 && !isTouching(topHead, false, -9, 0)){
	LD	BC,(_hero+3)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,180
	OR	A,A
	SBC	HL,BC
	JP	M,L_258
	LD	BC,0
	PUSH	BC
	LD	BC,16777207
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_258
;  532							hero.y -= 10;
	LD	IY,(_hero+3)
	LEA	BC,IY+-10
	LD	(_hero+3),BC
;  533						}
;  534						else if(lastStill.y - hero.y > 180 || isTouching(topHead, false, -9, 0)){
	JR	L_261
L_258:
	LD	BC,(_hero+3)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,180
	OR	A,A
	SBC	HL,BC
	JP	M,L_256
	LD	BC,0
	PUSH	BC
	LD	BC,16777207
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_261
L_256:
;  535							ascending = false;
	LD	(IX+-10),0
;  536							lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  537							lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  538							isBoosted = false;
	LD	(IX+-22),0
;  539						}
;  540					}
L_261:
;  541	
;  542					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  543					
;  544					if(facingRight) gfx_TransparentSprite_NoClip(HeroJumpUpRight, hero.x, hero.y);
	LD	A,(IX+-21)
	OR	A,A
	JR	Z,L_263
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-42)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  545					else gfx_TransparentSprite_NoClip(HeroJumpUpLeft, hero.x, hero.y);
	JR	L_276
L_263:
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-55)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  546					
;  547				}
;  548			}
;  549	
;  550		}
L_276:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_277
;  551	
;  552		gfx_End();
	CALL	_gfx_End
;  553	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_floor                              IMPORT  -----   function
;_gfx_Sprite_NoClip                  IMPORT  -----   function
;_isTouching                         IMPORT  -----   function
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_gfx_GetSprite                      IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_gfx_SetTransparentColor            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_map5_compressed                    IMPORT    236   variable
;_map4_compressed                    IMPORT    188   variable
;_map3_compressed                    IMPORT    126   variable
;_map2_compressed                    IMPORT    241   variable
;_map1_compressed                    IMPORT    204   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_global_palette                     IMPORT    112   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_srand                              IMPORT  -----   function
;_hero                               STATIC      6   variable
;_gfx_FlipSpriteY                    IMPORT  -----   function
;_HeroJumpUpRight_compressed         IMPORT    134   variable
;_HeroJumpRight2_compressed          IMPORT    177   variable
;_HeroJumpRight1_compressed          IMPORT    138   variable
;_HeroJumpRight0_compressed          IMPORT    130   variable
;_HeroRight2_compressed              IMPORT    144   variable
;_HeroRight1_compressed              IMPORT    142   variable
;_HeroRight0_compressed              IMPORT    136   variable
;_HeroStill_compressed               IMPORT    115   variable
;_zx7_Decompress                     IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;heroJumpRight                       IX-114      9   variable
;heroRunRight                        IX-105      9   variable
;heroRunLeft                          IX-96      9   variable
;HeroLeft1                            IX-87      3   variable
;HeroLeft0                            IX-84      3   variable
;HeroLeft2                            IX-81      3   variable
;distance                             IX-78      4   variable
;HeroJumpLeft2                        IX-74      3   variable
;HeroJumpLeft1                        IX-71      3   variable
;HeroJumpLeft0                        IX-68      3   variable
;HeroRight0                           IX-65      3   variable
;prevkey                              IX-62      1   variable
;HeroStill                            IX-61      3   variable
;step                                 IX-58      3   variable
;HeroJumpUpLeft                       IX-55      3   variable
;HeroRight2                           IX-52      3   variable
;HeroRight1                           IX-49      3   variable
;G_3                                  IX-46      1   variable
;G_2                                  IX-45      1   variable
;G_1                                  IX-44      1   variable
;G_0                                  IX-43      1   variable
;HeroJumpUpRight                      IX-42      3   variable
;HeroJumpRight2                       IX-39      3   variable
;HeroJumpRight1                       IX-36      3   variable
;HeroJumpRight0                       IX-33      3   variable
;key                                  IX-30      1   variable
;velocity                             IX-29      3   variable
;tempBool1                            IX-26      1   variable
;map                                  IX-25      3   variable
;isBoosted                            IX-22      1   variable
;facingRight                          IX-21      1   variable
;tempBool2                            IX-20      1   variable
;keyIsReleased                        IX-19      1   variable
;doubleJumped                         IX-18      1   variable
;jumpingDir                           IX-17      3   variable
;inLadder                             IX-14      1   variable
;behind_sprite                        IX-13      3   variable
;ascending                            IX-10      1   variable
;mapNum                                IX-9      3   variable
;lastStill                             IX-6      6   variable


; Stack Frame Size: 126 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__6:
	DB	"Map1"
	DB	0
L__7:
	DB	"Map2"
	DB	0
L__8:
	DB	"Map3"
	DB	0
L__9:
	DB	"Map4"
	DB	0
L__10:
	DB	"Map5"
	DB	0
	SEGMENT CODE
;  554	
;  555	bool isTouching(enum bodyParts part, bool checkForPad, int yVelocity, int xVelocity){
_isTouching:
	LD	HL,-5
	CALL	__frameset
;  556		int f;
;  557	
;  558		bool check;
;  559		check = true;
	LD	(IX+-5),1
;  560		if(part == leftSide){
	LD	HL,(IX+6)
	CALL	__icmpzero
	JR	NZ,L_318
;  561			for(f = 3; f <= 40; f += 3) {
	LD	BC,3
	LD	(IX+-3),BC
	JR	L_284
L_282:
;  562				if(gfx_GetPixel(hero.x + 2 + xVelocity, hero.y + f + yVelocity) == 0 || hero.x + xVelocity == 0) return true;
	LD	A,(_hero+3)
	LD	B,(IX+-3)
	ADD	A,B
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	IY,(_hero)
	LEA	HL,IY+2
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_281
	LD	BC,(IX+15)
	LD	HL,(_hero)
	ADD	HL,BC
	CALL	__icmpzero
	JR	NZ,L_283
L_281:
	LD	A,1
	JR	L_320
;  563			}
L_283:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_284:
	LD	BC,(IX+-3)
	LD	HL,40
	OR	A,A
	SBC	HL,BC
	JP	P,L_282
	JR	L_319
;  564		}
;  565		else if(part == rightSide){
L_318:
	LD	BC,1
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_316
;  566			for(f = 3; f <= 40; f += 3) {
	LD	BC,3
	LD	(IX+-3),BC
	JR	L_289
L_287:
;  567				if(gfx_GetPixel(hero.x + 17 + xVelocity, hero.y + f + yVelocity) == 0 || hero.x + 20 + xVelocity== 320) return true;
	LD	A,(_hero+3)
	LD	B,(IX+-3)
	ADD	A,B
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	IY,(_hero)
	LEA	HL,IY+17
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_286
	LD	IY,(_hero)
	LEA	HL,IY+20
	LD	BC,(IX+15)
	ADD	HL,BC
	OR	A,A
	LD	BC,320
	SBC	HL,BC
	JR	NZ,L_288
L_286:
	LD	A,1
	JR	L_320
;  568			}
L_288:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_289:
	LD	BC,(IX+-3)
	LD	HL,40
	OR	A,A
	SBC	HL,BC
	JP	P,L_287
	JR	L_319
;  569		}
;  570		else if(part == topHead){
L_316:
	LD	BC,2
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_314
;  571			for(f = 3; f <= 16; f += 3) {
	LD	BC,3
	LD	(IX+-3),BC
	JR	L_294
L_292:
;  572				if(gfx_GetPixel(hero.x + f + xVelocity, hero.y + yVelocity) == 0 || hero.y + yVelocity < 0) return true;
	LD	A,(_hero+3)
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_291
	LD	BC,(IX+12)
	LD	HL,(_hero+3)
	ADD	HL,BC
	CALL	__icmpzero
	JP	P,L_293
L_291:
	LD	A,1
	JR	L_320
;  573			}
L_293:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_294:
	LD	BC,(IX+-3)
	LD	HL,16
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_292
	JR	L_319
;  574		}
;  575		else if(part == bottomFeet && !checkForPad){
L_314:
	LD	BC,3
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__197
	LD	A,1
	JR	L__198
L__197:
	XOR	A,A
L__198:
	LD	(IX+-4),A
	OR	A,A
	JR	NZ,L_312
	LD	A,(IX+9)
	OR	A,A
	JR	NZ,L_312
;  576			for(f = 6; f <= 14; f += 3) {
	LD	BC,6
	LD	(IX+-3),BC
	JR	L_302
L_300:
;  577				if(gfx_GetPixel(hero.x + f + xVelocity, hero.y + 40 + yVelocity) == 0 || hero.y + 41 + yVelocity > 240 || gfx_GetPixel(hero.x + f + xVelocity, hero.y + 40 + yVelocity) == 3 || gfx_GetPixel(hero.x + f + xVelocity, hero.y + 40 + yVelocity) == 4) return true;
	LD	A,(_hero+3)
	ADD	A,40
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_299
	LD	IY,(_hero+3)
	LEA	HL,IY+41
	LD	BC,(IX+12)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,240
	OR	A,A
	SBC	HL,BC
	JP	M,L_299
	LD	A,(_hero+3)
	ADD	A,40
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	Z,L_299
	LD	A,(_hero+3)
	ADD	A,40
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_301
L_299:
	LD	A,1
	JR	L_320
;  578			}
L_301:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_302:
	LD	BC,(IX+-3)
	LD	HL,14
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_300
	JR	L_319
;  579		}
;  580		else if(part == bottomFeet && checkForPad){
L_312:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_319
	LD	A,(IX+9)
	OR	A,A
	JR	Z,L_319
;  581			for(f = 6; f <= 14; f += 3) {
	LD	BC,6
	LD	(IX+-3),BC
	JR	L_308
L_306:
;  582				if(gfx_GetPixel(hero.x + f + xVelocity, hero.y + 41 + yVelocity) != 3 || gfx_GetPixel(hero.x + f + xVelocity, hero.y + 40 + yVelocity) == 4) check = false;
	LD	A,(_hero+3)
	ADD	A,41
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_305
	LD	A,(_hero+3)
	ADD	A,40
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_307
L_305:
	LD	(IX+-5),0
;  583			}
L_307:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_308:
	LD	BC,(IX+-3)
	LD	HL,14
	OR	A,A
	SBC	HL,BC
	JP	P,L_306
;  584			return check;
	LD	A,(IX+-5)
	JR	L_320
;  585		}
L_319:
;  586		return false;
	XOR	A,A
L_320:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _isTouching ***************************
;Name                         Addr/Register   Size   Type
;_hero                               STATIC      6   variable
;_gfx_GetPixel                       IMPORT  -----   function
;check                                 IX-5      1   variable
;G_4                                   IX-4      1   variable
;f                                     IX-3      3   variable
;xVelocity                            IX+15      3   parameter
;yVelocity                            IX+12      3   parameter
;checkForPad                           IX+9      1   parameter
;part                                  IX+6      3   parameter


; Stack Frame Size: 23 (bytes)
;       Spill Code: 0 (instruction)


	XREF _map5_compressed:ROM
	XREF _map4_compressed:ROM
	XREF _map3_compressed:ROM
	XREF _map2_compressed:ROM
	XREF _map1_compressed:ROM
	XREF _HeroJumpUpRight_compressed:ROM
	XREF _HeroJumpRight2_compressed:ROM
	XREF _HeroJumpRight1_compressed:ROM
	XREF _HeroJumpRight0_compressed:ROM
	XREF _HeroRight2_compressed:ROM
	XREF _HeroRight1_compressed:ROM
	XREF _HeroRight0_compressed:ROM
	XREF _HeroStill_compressed:ROM
	XREF _global_palette:ROM
	XREF _zx7_Decompress:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_FlipSpriteY:ROM
	XREF _gfx_ScaledSprite_NoClip:ROM
	XREF _gfx_GetSprite:ROM
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_Sprite_NoClip:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_GetPixel:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetTransparentColor:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _srand:ROM
	XREF _malloc:ROM
	XREF _floor:ROM
	XREF __idivs:ROM
	XREF __iremu:ROM
	XREF __fdiv:ROM
	XREF __ftol:ROM
	XREF __ltof:ROM
	XREF __itol:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XDEF _isTouching
	XDEF _main
	XDEF _hero
	END
