; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT BSS
_hero:
	DS	6
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <math.h>
;    6	#include <stdio.h>
;    7	#include <stdlib.h>
;    8	#include <string.h>
;    9	
;   10	#include <graphx.h>
;   11	#include <keypadc.h>
;   12	#include <debug.h>
;   13	
;   14	#include <compression.h>
;   15	
;   16	#include "gfx/gfx.h"
;   17	
;   18	bool isTouching(enum bodyParts part, bool checkForPad, int yVelocity, int xVelocity);
;   19	
;   20	enum direction{
;   21		right,
;   22		left,
;   23		up,
;   24		down,
;   25		upLeft,
;   26		upRight,
;   27		downLeft,
;   28		downRight,
;   29		nothing
;   30	};
;   31	
;   32	enum bodyParts{
;   33		leftSide,
;   34		rightSide,
;   35		topHead,
;   36		bottomFeet
;   37	};
;   38	
;   39	gfx_point_t hero;
	SEGMENT CODE
;   40	
;   41	void main(void) {
_main:
	LD	HL,-166
	CALL	__frameset
;   42	
;   43		int x, y, i, mapNum, velocity;
;   44	
;   45		gfx_point_t lastStill;
;   46		gfx_point_t arrow, arrowInit;
;   47	
;   48		gfx_sprite_t *map;
;   49	
;   50		gfx_sprite_t *HeroStill, *HeroLeft0, *HeroLeft1, *HeroLeft2, *HeroRight0, *HeroRight1, *HeroRight2,*HeroJumpRight0, *HeroJumpRight1, *HeroJumpRight2, *HeroJumpUpRight, *HeroJumpUpLeft, *HeroJumpLeft0, *HeroJumpLeft1, *HeroJumpLeft2;
;   51	
;   52		double distance, arrowDistance;
;   53		unsigned int step;
;   54	
;   55		enum direction jumpingDir;
;   56		enum direction shootingDir;
;   57	
;   58		bool doubleJumped, keyIsReleased, inLadder, facingRight, ascending, key, prevkey, isBoosted, tempBool1, tempBool2;
;   59	
;   60		gfx_sprite_t *heroRunRight[3];
;   61		gfx_sprite_t *heroRunLeft[3];
;   62	
;   63		gfx_sprite_t *heroJumpRight[3];
;   64	
;   65		gfx_sprite_t *behind_sprite;
;   66	
;   67		gfx_sprite_t *tempPerson;
;   68	
;   69		map = gfx_MallocSprite(80, 60);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,80
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-43),HL
;   70	
;   71		HeroStill = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-82),HL
;   72		HeroLeft0 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-110),HL
;   73		HeroLeft1 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-91),HL
;   74		HeroLeft2 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-107),HL
;   75		HeroRight0 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-88),HL
;   76		HeroRight1 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-72),HL
;   77		HeroRight2 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-76),HL
;   78		HeroJumpRight0 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-52),HL
;   79		HeroJumpRight1 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-55),HL
;   80		HeroJumpRight2 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-58),HL
;   81		HeroJumpUpRight = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-61),HL
;   82		HeroJumpUpLeft = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-79),HL
;   83		HeroJumpLeft0 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-94),HL
;   84		HeroJumpLeft1 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-97),HL
;   85		HeroJumpLeft2 = gfx_MallocSprite(20, 40);
	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-100),HL
;   86	
;   87	
;   88		zx7_Decompress( HeroStill, HeroStill_compressed );
	LD	BC,_HeroStill_compressed
	PUSH	BC
	LD	BC,(IX+-82)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   89		zx7_Decompress( HeroRight0, HeroRight0_compressed );
	LD	BC,_HeroRight0_compressed
	PUSH	BC
	LD	BC,(IX+-88)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   90		zx7_Decompress( HeroRight1, HeroRight1_compressed );
	LD	BC,_HeroRight1_compressed
	PUSH	BC
	LD	BC,(IX+-72)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   91		zx7_Decompress( HeroRight2, HeroRight2_compressed );
	LD	BC,_HeroRight2_compressed
	PUSH	BC
	LD	BC,(IX+-76)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   92		zx7_Decompress( HeroJumpRight0, HeroJumpRight0_compressed );
	LD	BC,_HeroJumpRight0_compressed
	PUSH	BC
	LD	BC,(IX+-52)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   93		zx7_Decompress( HeroJumpRight1, HeroJumpRight1_compressed );
	LD	BC,_HeroJumpRight1_compressed
	PUSH	BC
	LD	BC,(IX+-55)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   94		zx7_Decompress( HeroJumpRight2, HeroJumpRight2_compressed );
	LD	BC,_HeroJumpRight2_compressed
	PUSH	BC
	LD	BC,(IX+-58)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   95		zx7_Decompress( HeroJumpUpRight, HeroJumpUpRight_compressed );
	LD	BC,_HeroJumpUpRight_compressed
	PUSH	BC
	LD	BC,(IX+-61)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   96	
;   97		gfx_FlipSpriteY(HeroRight0, HeroLeft0);
	LD	BC,(IX+-110)
	PUSH	BC
	LD	BC,(IX+-88)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;   98		gfx_FlipSpriteY(HeroRight1, HeroLeft1);
	LD	BC,(IX+-91)
	PUSH	BC
	LD	BC,(IX+-72)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;   99		gfx_FlipSpriteY(HeroRight2, HeroLeft2);
	LD	BC,(IX+-107)
	PUSH	BC
	LD	BC,(IX+-76)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  100		gfx_FlipSpriteY(HeroJumpRight0, HeroJumpLeft0);
	LD	BC,(IX+-94)
	PUSH	BC
	LD	BC,(IX+-52)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  101		gfx_FlipSpriteY(HeroJumpRight1, HeroJumpLeft1);
	LD	BC,(IX+-97)
	PUSH	BC
	LD	BC,(IX+-55)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  102		gfx_FlipSpriteY(HeroJumpRight2, HeroJumpLeft2);
	LD	BC,(IX+-100)
	PUSH	BC
	LD	BC,(IX+-58)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  103		gfx_FlipSpriteY(HeroJumpUpRight, HeroJumpUpLeft);
	LD	BC,(IX+-79)
	PUSH	BC
	LD	BC,(IX+-61)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  104	
;  105		velocity = 2;
	LD	BC,2
	LD	(IX+-40),BC
;  106	
;  107		jumpingDir = nothing;
	LD	BC,8
	LD	(IX+-22),BC
;  108	
;  109		ascending = doubleJumped = inLadder = isBoosted = keyIsReleased = false;
	LD	(IX+-35),0
	LD	(IX+-24),0
	LD	(IX+-13),0
	LD	(IX+-37),0
	LD	(IX+-23),0
;  110	
;  111		facingRight = true;
	LD	(IX+-36),1
;  112	
;  113		heroRunRight[0] = HeroRight0;
	LD	BC,(IX+-88)
	LD	(IX+-128),BC
;  114		heroRunRight[1] = HeroRight1;
	LEA	IY,IX+-128
	LEA	HL,IY+3
	LD	BC,(IX+-72)
	LD	(HL),BC
;  115		heroRunRight[2] = HeroRight2;
	LEA	HL,IX+-122
	LD	BC,(IX+-76)
	LD	(HL),BC
;  116	
;  117		heroRunLeft[0] = HeroLeft0;
	LD	BC,(IX+-110)
	LD	(IX+-119),BC
;  118		heroRunLeft[1] = HeroLeft1;
	LEA	HL,IX+-116
	LD	BC,(IX+-91)
	LD	(HL),BC
;  119		heroRunLeft[2] = HeroLeft2;
	LEA	HL,IX+-113
	LD	BC,(IX+-107)
	LD	(HL),BC
;  120	
;  121		heroJumpRight[0] = HeroJumpRight0;
	LD	BC,(IX+-52)
	LD	(IY+-9),BC
;  122		heroJumpRight[1] = HeroJumpRight1;
	LD	IY,IX
	LD	BC,-137
	ADD	IY,BC
	LEA	HL,IY+3
	LD	BC,(IX+-55)
	LD	(HL),BC
;  123		heroJumpRight[2] = HeroJumpRight2;
	LD	IY,IX
	LD	BC,(IX+-58)
;  124	
;  125		behind_sprite = gfx_MallocSprite(20, 40);
	LD	DE,_malloc
	PUSH	DE
	LD	DE,40
	PUSH	DE
	LD	DE,20
	PUSH	DE
	LD	DE,-137
	ADD	IY,DE
	LEA	HL,IY+6
	LD	(HL),BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_AllocSprite
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-12),HL
;  126	
;  127		lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  128		lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  129	
;  130		shootingDir = nothing;
	LD	BC,8
	LD	(IX+-27),BC
;  131	
;  132		srand(rtc_Time());
	LD	BC,(15925316)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_srand
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
;  133	
;  134		gfx_Begin();
	CALL	_gfx_Begin
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
;  135	
;  136		gfx_SetPalette(global_palette, sizeof_global_palette, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,112
	PUSH	BC
	LD	BC,_global_palette
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetPalette
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  137	
;  138		mapNum = 1;
	LD	BC,1
	LD	(IX+-9),BC
;  139	
;  140		gfx_FillScreen(1);
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillScreen
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  141	
;  142		while(!(kb_Data[6] & kb_Enter)){
	JR	L_17
L_18:
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
;  143			kb_Scan();
	CALL	_kb_Scan
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
;  144	
;  145	   		key = kb_Data[7] == kb_Down;
	LD	A,(16056350)
	CP	A,1
	JR	NZ,L__1
	LD	A,1
	JR	L__2
L__1:
	XOR	A,A
L__2:
	LD	(IX+-49),A
;  146	
;  147			if(key && !prevkey) {
	OR	A,A
	JR	Z,L_5
	LD	A,(IX+-73)
	OR	A,A
	JR	NZ,L_5
;  148				if(mapNum == 7) mapNum = 0;
	LD	BC,7
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_3
	LD	BC,0
	LD	(IX+-9),BC
L_3:
;  149				mapNum++;
	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
;  150				gfx_SetColor(1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  151	
;  152				gfx_FillRectangle(0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillRectangle
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  153				gfx_FillRectangle(0, 20, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillRectangle
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  154				gfx_FillRectangle(0, 40, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillRectangle
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  155				gfx_FillRectangle(0, 60, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillRectangle
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  156				gfx_FillRectangle(0, 80, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillRectangle
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  157	
;  158	
;  159				gfx_SetColor(0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetColor
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  160			}
L_5:
;  161	
;  162			gfx_PrintStringXY("Map1", 20, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__6
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  163			gfx_PrintStringXY("Map2", 20, 20);
	LD	BC,20
	PUSH	BC
	PUSH	BC
	LD	BC,L__7
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  164			gfx_PrintStringXY("Map3", 20, 40);
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__8
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  165			gfx_PrintStringXY("Map4", 20, 60);
	LD	BC,60
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__9
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  166			gfx_PrintStringXY("Map5", 20, 80);
	LD	BC,80
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__10
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_PrintStringXY
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  167	
;  168			if(mapNum == 1)	gfx_FillRectangle(0, 0, 4, 4);
	LD	HL,(IX+-9)
	LD	BC,1
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_14
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillRectangle
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  169			else if(mapNum == 2) gfx_FillRectangle(0, 20, 4, 4);			
	JR	L_15
L_14:
	LD	BC,2
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_12
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillRectangle
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  170			else if(mapNum == 3) gfx_FillRectangle(0, 40, 4, 4);
	JR	L_15
L_12:
	LD	BC,3
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_10
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillRectangle
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  171			else if(mapNum == 4) gfx_FillRectangle(0, 60, 4, 4);
	JR	L_15
L_10:
	LD	BC,4
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_8
	PUSH	BC
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillRectangle
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  172			else if(mapNum == 5) gfx_FillRectangle(0, 80, 4, 4);
	JR	L_15
L_8:
	LD	BC,5
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_15
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillRectangle
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_15:
;  173	
;  174			prevkey = key;
	LD	A,(IX+-49)
	LD	(IX+-73),A
;  175	
;  176			dbg_ClearConsole();
;  177			dbg_sprintf(dbgout, "%d", mapNum);
;  178		}
L_17:
	LD	A,(16056348)
	AND	A,1
	JR	Z,L_18
;  179	
;  180		if(mapNum == 1)	{
	LD	BC,1
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_27
;  181			zx7_Decompress( map, map1_compressed );
	LD	BC,_map1_compressed
	PUSH	BC
	LD	BC,(IX+-43)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_zx7_Decompress
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
;  182			hero.x = 0;
	LD	BC,0
	LD	(_hero),BC
;  183			hero.y = 150;
	LD	BC,150
	LD	(_hero+3),BC
;  184		}
;  185		else if(mapNum == 2) {
	JR	L_29
L_27:
	LD	BC,2
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_25
;  186			zx7_Decompress( map, map2_compressed );		
	LD	BC,_map2_compressed
	PUSH	BC
	LD	BC,(IX+-43)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_zx7_Decompress
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
;  187			hero.x = 0;
	LD	BC,0
	LD	(_hero),BC
;  188			hero.y = 180;
	LD	BC,180
	LD	(_hero+3),BC
;  189		}
;  190		else if(mapNum == 3) {
	JR	L_29
L_25:
	LD	BC,3
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_23
;  191			zx7_Decompress( map, map3_compressed );
	LD	BC,_map3_compressed
	PUSH	BC
	LD	BC,(IX+-43)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_zx7_Decompress
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
;  192			hero.x = 0;
	LD	BC,0
	LD	(_hero),BC
;  193			hero.y = 180;
	LD	BC,180
	LD	(_hero+3),BC
;  194		}
;  195		else if(mapNum == 4) {
	JR	L_29
L_23:
	LD	BC,4
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_21
;  196			zx7_Decompress( map, map4_compressed );
	LD	BC,_map4_compressed
	PUSH	BC
	LD	BC,(IX+-43)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_zx7_Decompress
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
;  197			hero.x = 50;
	LD	BC,50
	LD	(_hero),BC
;  198			hero.y = 100;
	LD	BC,100
	LD	(_hero+3),BC
;  199		}		
;  200		else if(mapNum == 5) {
	JR	L_29
L_21:
	LD	BC,5
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_29
;  201			zx7_Decompress( map, map5_compressed );
	LD	BC,_map5_compressed
	PUSH	BC
	LD	BC,(IX+-43)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_zx7_Decompress
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
;  202			hero.x = 80;
	LD	BC,80
	LD	(_hero),BC
;  203			hero.y = 180;
	LD	BC,180
	LD	(_hero+3),BC
;  204		}
L_29:
;  205	
;  206		gfx_ScaledSprite_NoClip(map, 0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-43)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_ScaledSprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  207	
;  208		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetDraw
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  209		
;  210		gfx_SetTransparentColor(1);
	LD	BC,1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_SetTransparentColor
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  211	
;  212		gfx_ScaledSprite_NoClip(map, 0, 0, 4, 4);
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-43)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_ScaledSprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  213	
;  214		gfx_BlitBuffer();
	LD	BC,1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Blit
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  215	
;  216		gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetSprite
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  217		gfx_TransparentSprite_NoClip(HeroStill, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-82)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  218	
;  219		while(!(kb_Data[6] & kb_Clear)){
	JR	L_299
L_300:
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
;  220	
;  221			kb_Scan();
	CALL	_kb_Scan
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
;  222	
;  223			if(shootingDir == nothing && kb_Data[7] & kb_Right) {
	LD	BC,8
	LD	HL,(IX+-27)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_34
	LD	A,(16056350)
	AND	A,4
	JR	Z,L_34
;  224				shootingDir = right;
	LD	BC,0
	LD	(IX+-27),BC
;  225				arrow.x = hero.x + 15;
	LD	IY,(_hero)
	LEA	BC,IY+15
	LD	(IX+-19),BC
;  226				arrow.y = hero.y + 4;
	LD	IY,(_hero+3)
	LEA	BC,IY+4
	LD	(IX+-16),BC
;  227				arrowInit.x = hero.x + 15;
	LD	IY,(_hero)
	LEA	BC,IY+15
	LD	(IX+-33),BC
;  228				arrowInit.y = hero.y + 4;
	LD	IY,(_hero+3)
	LEA	IY,IY+4
	LD	(IX+-30),IY
;  229			}
L_34:
;  230			if(shootingDir == nothing && kb_Data[7] & kb_Left) {
	LD	BC,8
	LD	HL,(IX+-27)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_38
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_38
;  231				shootingDir = left;
	LD	BC,1
	LD	(IX+-27),BC
;  232				arrow.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-19),BC
;  233				arrow.y = hero.y + 4;
	LD	IY,(_hero+3)
	LEA	BC,IY+4
	LD	(IX+-16),BC
;  234				arrowInit.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-33),BC
;  235				arrowInit.y = hero.y + 4;
	LD	IY,(_hero+3)
	LEA	IY,IY+4
	LD	(IX+-30),IY
;  236			}
L_38:
;  237			if(shootingDir == nothing && kb_Data[7] & kb_Up && kb_Data[7] & kb_Left){
	LD	BC,8
	LD	HL,(IX+-27)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_42
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_42
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_42
;  238				shootingDir = upLeft;
	LD	BC,4
	LD	(IX+-27),BC
;  239				arrow.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-19),BC
;  240				arrow.y = hero.y + 4;
	LD	IY,(_hero+3)
	LEA	BC,IY+4
	LD	(IX+-16),BC
;  241				arrowInit.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-33),BC
;  242				arrowInit.y = hero.y + 4;
	LD	IY,(_hero+3)
	LEA	IY,IY+4
	LD	(IX+-30),IY
;  243			}
L_42:
;  244			if(shootingDir == nothing && kb_Data[7] & kb_Up && kb_Data[7] & kb_Right) {
	LD	BC,8
	LD	HL,(IX+-27)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_46
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_46
	LD	A,(16056350)
	AND	A,4
	JR	Z,L_46
;  245				shootingDir = upRight;
	LD	BC,5
	LD	(IX+-27),BC
;  246				arrow.x = hero.x + 15;
	LD	IY,(_hero)
	LEA	BC,IY+15
	LD	(IX+-19),BC
;  247				arrow.y = hero.y + 4;
	LD	IY,(_hero+3)
	LEA	BC,IY+4
	LD	(IX+-16),BC
;  248				arrowInit.x = hero.x + 15;
	LD	IY,(_hero)
	LEA	BC,IY+15
	LD	(IX+-33),BC
;  249				arrowInit.y = hero.y + 4;
	LD	IY,(_hero+3)
	LEA	IY,IY+4
	LD	(IX+-30),IY
;  250			}
L_46:
;  251			if(shootingDir == nothing && kb_Data[7] & kb_Down && kb_Data[7] & kb_Left) {
	LD	BC,8
	LD	HL,(IX+-27)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_50
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_50
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_50
;  252				shootingDir = downLeft;
	LD	BC,6
	LD	(IX+-27),BC
;  253				arrow.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-19),BC
;  254				arrow.y = hero.y + 4;
	LD	IY,(_hero+3)
	LEA	BC,IY+4
	LD	(IX+-16),BC
;  255				arrowInit.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-33),BC
;  256				arrowInit.y = hero.y + 4;
	LD	IY,(_hero+3)
	LEA	IY,IY+4
	LD	(IX+-30),IY
;  257			}
L_50:
;  258			if(shootingDir == nothing && kb_Data[7] & kb_Down && kb_Data[7] & kb_Right) {
	LD	BC,8
	LD	HL,(IX+-27)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_59
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_59
	LD	A,(16056350)
	AND	A,4
	JR	Z,L_59
;  259				shootingDir = downRight;
	LD	BC,7
	LD	(IX+-27),BC
;  260				arrow.x = hero.x + 15;
	LD	IY,(_hero)
	LEA	BC,IY+15
	LD	(IX+-19),BC
;  261				arrow.y = hero.y + 4;
	LD	IY,(_hero+3)
	LEA	BC,IY+4
	LD	(IX+-16),BC
;  262				arrowInit.x = hero.x + 15;
	LD	IY,(_hero)
	LEA	BC,IY+15
	LD	(IX+-33),BC
;  263				arrowInit.y = hero.y + 4;
	LD	IY,(_hero+3)
	LEA	IY,IY+4
	LD	(IX+-30),IY
;  264			}
L_59:
;  265	
;  266			if(shootingDir == right){
	LD	HL,(IX+-27)
	CALL	__icmpzero
	JR	NZ,L_60
;  267				arrow.x += 5;
	LD	IY,(IX+-19)
	LEA	IY,IY+5
	LD	(IX+-19),IY
;  268				arrowDistance = arrow.x - arrowInit.x;
	LD	BC,(IX+-33)
	LD	HL,(IX+-19)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	CALL	__itol
	CALL	__ltof
	LD	(IX+-48),BC
	LD	(IX+-45),A
;  269				if(arrowDistance < 10) arrow.y = arrowInit.y + floor(.1*(arrowDistance - 10)*(arrowDistance - 10)+10);
	LD	HL,BC
	LD	BC,2097152
	LD	E,(IX+-45)
	LD	A,65
	CALL	__fcmp
	JP	P,L_54
	LD	HL,2097152
	LD	E,65
	LD	BC,(IX+-48)
	LD	A,(IX+-45)
	CALL	__fsub
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-18),BC
	LD	DE,(IY+-18)
	POP	IY
	LD	BC,DE
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-35),A
	POP	IY
	LD	HL,13421773
	LD	E,61
	CALL	__fmul
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-35)
	POP	IY
	LD	E,H
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-12),DE
	LD	DE,(IY+-18)
	POP	IY
	LD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-12)
	POP	IY
	CALL	__fmul
	LD	HL,2097152
	LD	E,65
	CALL	__fadd
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_floor
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-30)
	CALL	__itol
	CALL	__ltof
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-25),H
	LD	(IY+-31),E	; unspill
	LD	H,(IY+-25)
	LD	(IY+-21),HL
	LD	(IY+-34),HL	; unspill
	LD	HL,(IY+-21)
	POP	IY
	LD	HL,BC
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-25),H
	LD	H,(IY+-31)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-25)
	LD	(IY+-21),HL
	LD	HL,(IY+-34)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-21)
	POP	IY
	CALL	__fadd
	CALL	__ftol
	LD	(IX+-16),BC
L_54:
;  270				if(arrowDistance >= 10 && arrowDistance < 50) y = arrowInit.y + 10;
	LD	HL,(IX+-48)
	LD	E,(IX+-45)
	LD	BC,2097152
	LD	A,65
	CALL	__fcmp
	JP	M,L_56
	LD	HL,(IX+-48)
	LD	E,(IX+-45)
	LD	BC,4718592
	LD	A,66
	CALL	__fcmp
L_56:
;  271				if(arrowDistance >= 50) arrow.y = arrowInit.y + floor(.002*(arrowDistance - 50)*(arrowDistance - 50) + 10);
	LD	HL,(IX+-48)
	LD	E,(IX+-45)
	LD	BC,4718592
	LD	A,66
	CALL	__fcmp
	JP	M,L_57
	LD	HL,4718592
	LD	E,66
	LD	BC,(IX+-48)
	LD	A,(IX+-45)
	CALL	__fsub
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-15),BC
	LD	DE,(IY+-15)
	POP	IY
	LD	BC,DE
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-30),A
	POP	IY
	LD	HL,201327
	LD	E,59
	CALL	__fmul
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-30)
	POP	IY
	LD	E,H
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-12),DE
	LD	DE,(IY+-15)
	POP	IY
	LD	HL,DE
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	DE,(IY+-12)
	POP	IY
	CALL	__fmul
	LD	HL,2097152
	LD	E,65
	CALL	__fadd
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_floor
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-30)
	CALL	__itol
	CALL	__ltof
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-25),H
	LD	(IY+-26),E	; unspill
	LD	H,(IY+-25)
	LD	(IY+-21),HL
	LD	(IY+-29),HL	; unspill
	LD	HL,(IY+-21)
	POP	IY
	LD	HL,BC
	LD	E,A
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-25),H
	LD	H,(IY+-26)
	POP	IY
	LD	A,H
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	H,(IY+-25)
	LD	(IY+-21),HL
	LD	HL,(IY+-29)
	POP	IY
	LD	BC,HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-21)
	POP	IY
	CALL	__fadd
	CALL	__ftol
	LD	(IX+-16),BC
L_57:
;  272				gfx_FillRectangle(arrow.x, arrow.y, 2, 2);
	LD	BC,2
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	LD	BC,(IX+-19)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_FillRectangle
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  273			}
L_60:
;  274	
;  275	
;  276			tempBool1 = isTouching(bottomFeet, false, velocity - 1, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+-40)
	DEC	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,3
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-44),A
;  277			tempBool2 = isTouching(bottomFeet, false, 0, 0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,3
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-34),A
;  278			velocity = (hero.y - lastStill.y ) / 50 + 2;
	LD	HL,(_hero+3)
	LD	DE,(IX+-3)
	LD	BC,50
;  279	
;  280			dbg_ClearConsole();
;  281			dbg_sprintf(dbgout, "hero = (%d, %d)\n", hero.x, hero.y);
;  282			dbg_sprintf(dbgout, "velocity = %d\n", velocity);
;  283			dbg_sprintf(dbgout, "keyIsReleased = %d\n", keyIsReleased);
;  284			dbg_sprintf(dbgout, "ascending = %d\n", ascending);
;  285			dbg_sprintf(dbgout, "inLadder = %d\n", inLadder);
;  286			dbg_sprintf(dbgout, "doubleJumped = %d\n", doubleJumped);
;  287			dbg_sprintf(dbgout, "jumpingDir = %d\n", jumpingDir);
;  288			dbg_sprintf(dbgout, "tempBool1 = %d\n", tempBool1);
;  289			dbg_sprintf(dbgout, "tempBool2 = %d\n", tempBool2);
;  290			gfx_BlitBuffer();
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-21),HL
	POP	IY
	LD	HL,1
	PUSH	IY
	LEA	IY,IX+-128	; spill
	LD	(IY+-24),HL	; unspill
	LD	HL,(IY+-21)
	POP	IY
	OR	A,A
	SBC	HL,DE
	CALL	__idivs
	INC	HL
	INC	HL
	LD	(IX+-40),HL
	PUSH	IY
	LEA	IY,IX+-128	; unspill
	LD	HL,(IY+-24)
	POP	IY
	PUSH	HL
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Blit
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
;  291			//while(!os_GetCSC());
;  292	
;  293			if(((kb_Data[1] & kb_Mode && !isTouching(rightSide, false, 0, 1)) || (kb_Data[1] & kb_2nd && !isTouching(leftSide, false, 0, -1))) && !((kb_Data[1] & kb_Mode) && (kb_Data[1] & kb_2nd)) && jumpingDir == nothing && !(inLadder && hero.y < 59 && hero.y > 41 && mapNum == 1) && !isBoosted && !ascending)  {
	LD	A,(16056338)
	AND	A,64
	JR	Z,L_81
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_83
L_81:
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_298
	LD	BC,16777215
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_298
L_83:
	LD	A,(16056338)
	AND	A,64
	JR	Z,L_84
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_298
L_84:
	LD	BC,8
	LD	HL,(IX+-22)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_298
	LD	A,(IX+-13)
	OR	A,A
	JR	Z,L_89
	LD	BC,59
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JP	P,L_89
	LD	BC,(_hero+3)
	LD	HL,41
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_89
	LD	BC,1
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_298
L_89:
	LD	A,(IX+-24)
	OR	A,A
	JR	NZ,L_298
	LD	A,(IX+-23)
	OR	A,A
	JR	NZ,L_298
;  294				gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Sprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  295	
;  296				//IF RIGHT IS PRESSED
;  297				if(kb_Data[1] & kb_Mode) {
	LD	A,(16056338)
	AND	A,64
	JR	Z,L_102
;  298					facingRight = true;
	LD	(IX+-36),1
;  299					if(((kb_Data[7] & kb_Up && !(kb_Data[7] & kb_Left) && !(kb_Data[7] & kb_Right))) && (!inLadder || (mapNum == 1 && hero.y == 40) || (mapNum == 2 && hero.y == 120))) {
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_100
	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_100
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_100
	LD	A,(IX+-13)
	OR	A,A
	JR	Z,L_99
	LD	BC,1
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_96
	LD	BC,40
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_99
L_96:
	LD	BC,2
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_100
	LD	BC,120
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_100
L_99:
;  300						jumpingDir = right;
	LD	BC,0
	LD	(IX+-22),BC
;  301						ascending = true;
	LD	(IX+-23),1
;  302						keyIsReleased = false;
	LD	(IX+-35),0
;  303						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  304						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  305						if(!tempBool2) doubleJumped = true;
	LD	A,(IX+-34)
	OR	A,A
	JR	NZ,L_100
	LD	(IX+-37),1
;  306					}
L_100:
;  307					hero.x += 2;
	LD	IY,(_hero)
	LEA	BC,IY+2
	LD	(_hero),BC
;  308				};
L_102:
;  309				//IF LEFT IS PRESSED
;  310				if(kb_Data[1] & kb_2nd){ 
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_130
;  311					facingRight = false;
	LD	(IX+-36),0
;  312					if(((kb_Data[7] & kb_Up && !(kb_Data[7] & kb_Left) && !(kb_Data[7] & kb_Right))) && (!inLadder || (mapNum == 1 && hero.y == 40) || (mapNum == 2 && hero.y == 120))) {
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_112
	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_112
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_112
	LD	A,(IX+-13)
	OR	A,A
	JR	Z,L_111
	LD	BC,1
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_108
	LD	BC,40
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_111
L_108:
	LD	BC,2
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_112
	LD	BC,120
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_112
L_111:
;  313						jumpingDir = left;
	LD	BC,1
	LD	(IX+-22),BC
;  314						ascending = true;
	LD	(IX+-23),1
;  315						keyIsReleased = false;
	LD	(IX+-35),0
;  316	
;  317						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  318						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  319						if(!tempBool2) doubleJumped = true;
	LD	A,(IX+-34)
	OR	A,A
	JR	NZ,L_112
	LD	(IX+-37),1
;  320					}				
L_112:
;  321					hero.x -= 2;
	LD	IY,(_hero)
	LEA	BC,IY+-2
	LD	(_hero),BC
;  322				}
L_130:
;  323	
;  324				//IF IS IN AIR
;  325				if(!tempBool2 && !inLadder){
	LD	A,(IX+-34)
	OR	A,A
	JR	NZ,L_129
	LD	A,(IX+-13)
	OR	A,A
	JR	NZ,L_129
;  326						if(!tempBool1)	hero.y += velocity;
	LD	A,(IX+-44)
	OR	A,A
	JR	NZ,L_119
	LD	BC,(IX+-40)
	LD	HL,(_hero+3)
	ADD	HL,BC
	LD	(_hero+3),HL
;  327						else if(!tempBool2 && tempBool1) hero.y++;
	JR	L_122
L_119:
	LD	A,(IX+-34)
	OR	A,A
	JR	NZ,L_122
	LD	A,(IX+-44)
	OR	A,A
	JR	Z,L_122
	LD	BC,(_hero+3)
	INC	BC
	LD	(_hero+3),BC
L_122:
;  328	
;  329						if(isTouching(rightSide, false, 0, 0)) hero.x--;
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_125
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
L_125:
;  330						if(isTouching(leftSide, false, 0, 0)) hero.x++;
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_132
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
;  331				}
;  332				else if(!inLadder && tempBool2){
	JR	L_132
L_129:
	LD	A,(IX+-13)
	OR	A,A
	JR	NZ,L_132
	LD	A,(IX+-34)
	OR	A,A
	JR	Z,L_132
;  333					lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  334				}
L_132:
;  335	
;  336				if(isTouching(bottomFeet, true, 0, 0)) {
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_133
;  337					isBoosted = true;
	LD	(IX+-24),1
;  338					ascending = true;
	LD	(IX+-23),1
;  339					lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  340					lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  341				}
L_133:
;  342	
;  343				inLadder = false;
	LD	(IX+-13),0
;  344				if((hero.x >= 106 && hero.x <= 136 && hero.y >= 39 && hero.y <= 140 && mapNum == 1) || (hero.x >= 271 && mapNum == 2 && hero.y >= 120)) inLadder = true;
	LD	HL,(_hero)
	LD	BC,106
	OR	A,A
	SBC	HL,BC
	JP	M,L_140
	LD	BC,(_hero)
	LD	HL,136
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_140
	LD	BC,39
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_140
	LD	BC,(_hero+3)
	LD	HL,140
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_140
	LD	BC,1
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_141
L_140:
	LD	BC,271
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_143
	LD	BC,2
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_143
	LD	BC,120
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_143
L_141:
	LD	(IX+-13),1
L_143:
;  345	
;  346				if(hero.x < 0) hero.x = 0;
	LD	HL,(_hero)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_145
	LD	BC,0
	LD	(_hero),BC
L_145:
;  347				if(hero.x > 300) hero.x = 300;
	LD	BC,(_hero)
	LD	HL,300
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_146
	LD	BC,300
	LD	(_hero),BC
L_146:
;  348	
;  349				gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetSprite
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  350	
;  351				if(kb_Data[1] & kb_Mode){
	LD	A,(16056338)
	AND	A,64
	JR	Z,L_149
;  352					distance = hero.x - lastStill.x;
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	CALL	__itol
	CALL	__ltof
	LD	(IX+-104),BC
	LD	(IX+-101),A
;  353					step = floor(distance/6);
	LD	HL,12582912
	LD	E,64
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_floor
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	CALL	__ftol
	LD	(IX+-85),BC
;  354	
;  355					gfx_TransparentSprite_NoClip(heroRunRight[ step % 3 ], hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,3
	LD	DE,(_hero)
	PUSH	DE
	LD	HL,(IX+-85)
	CALL	__iremu
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-128
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  356				}
L_149:
;  357				if(kb_Data[1] & kb_2nd){
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_299
;  358					distance = lastStill.x - hero.x;
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	CALL	__itol
	CALL	__ltof
	LD	(IX+-104),BC
	LD	(IX+-101),A
;  359					step = floor(distance/6);
	LD	HL,12582912
	LD	E,64
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_floor
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	CALL	__ftol
	LD	(IX+-85),BC
;  360	
;  361					gfx_TransparentSprite_NoClip(heroRunLeft[ step % 3 ], hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,3
	LD	DE,(_hero)
	PUSH	DE
	LD	HL,(IX+-85)
	CALL	__iremu
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-119
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  362				}
;  363	
;  364			}
;  365			//IF NOTHING IS PRESSED
;  366			else{
	JR	L_299
L_298:
;  367	
;  368				gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Sprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  369	
;  370	
;  371				//IF IS IN AIR
;  372				if(!tempBool2 && !inLadder && !ascending){
	LD	A,(IX+-34)
	OR	A,A
	JR	NZ,L_169
	LD	A,(IX+-13)
	OR	A,A
	JR	NZ,L_169
	LD	A,(IX+-23)
	OR	A,A
	JR	NZ,L_169
;  373	
;  374						if(!tempBool1)	hero.y += velocity;
	LD	A,(IX+-44)
	OR	A,A
	JR	NZ,L_156
	LD	BC,(IX+-40)
	LD	HL,(_hero+3)
	ADD	HL,BC
	LD	(_hero+3),HL
;  375						else if(!tempBool2 && tempBool1) hero.y++;
	JR	L_159
L_156:
	LD	A,(IX+-34)
	OR	A,A
	JR	NZ,L_159
	LD	A,(IX+-44)
	OR	A,A
	JR	Z,L_159
	LD	BC,(_hero+3)
	INC	BC
	LD	(_hero+3),BC
L_159:
;  376	
;  377						if(isTouching(rightSide, false, 0, 0)) hero.x--;
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_162
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
L_162:
;  378						if(isTouching(leftSide, false, 0, 0)) hero.x++;
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_163
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
L_163:
;  379						gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetSprite
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  380				}
;  381				else if(tempBool2 && !inLadder && !ascending){
	JR	L_182
L_169:
	LD	A,(IX+-34)
	OR	A,A
	JR	Z,L_182
	LD	A,(IX+-13)
	OR	A,A
	JR	NZ,L_182
	LD	A,(IX+-23)
	OR	A,A
	JR	NZ,L_182
;  382					jumpingDir = nothing;
	LD	BC,8
	LD	(IX+-22),BC
;  383					doubleJumped = false;
	LD	(IX+-37),0
;  384					keyIsReleased = false;
	LD	(IX+-35),0
;  385					if(isTouching(bottomFeet, true, 0, 0)) {
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_182
;  386						isBoosted = true;
	LD	(IX+-24),1
;  387						ascending = true;
	LD	(IX+-23),1
;  388						jumpingDir = nothing;
	LD	BC,8
	LD	(IX+-22),BC
;  389						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  390						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  391						doubleJumped = false;
	LD	(IX+-37),0
;  392					}	
;  393				}
L_182:
;  394	
;  395				//IF ASCENDING
;  396				if(ascending){
	LD	A,(IX+-23)
	OR	A,A
	JR	Z,L_199
;  397					inLadder = false;
	LD	(IX+-13),0
;  398					if(!isBoosted) velocity = -2;
	LD	A,(IX+-24)
	OR	A,A
	JR	NZ,L_171
	LD	BC,16777214
	LD	(IX+-40),BC
;  399					else velocity = -10;
	JR	L_173
L_171:
	LD	BC,16777206
	LD	(IX+-40),BC
L_173:
;  400	
;  401					if(!isTouching(topHead, false, velocity + 1, 0)) hero.y += velocity;
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+-40)
	INC	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_179
	LD	BC,(IX+-40)
	LD	HL,(_hero+3)
	ADD	HL,BC
	LD	(_hero+3),HL
L_179:
;  402					if(((lastStill.y - hero.y > 25 && !isBoosted) || (lastStill.y - hero.y > 160 && isBoosted)) || isTouching(topHead, false, velocity + 1, 0)) {
	LD	BC,(_hero+3)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,25
	OR	A,A
	SBC	HL,BC
	JP	P,L_176
	LD	A,(IX+-24)
	OR	A,A
	JR	Z,L_178
L_176:
	LD	BC,(_hero+3)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,160
	OR	A,A
	SBC	HL,BC
	JP	P,L_177
	LD	A,(IX+-24)
	OR	A,A
	JR	NZ,L_178
L_177:
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+-40)
	INC	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_180
L_178:
;  403						ascending = false;
	LD	(IX+-23),0
;  404						isBoosted = false;
	LD	(IX+-24),0
;  405						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  406						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  407					}
L_180:
;  408					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetSprite
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  409				}
L_199:
;  410	
;  411				//MOVING LADDER
;  412				if(inLadder && (((kb_Data[7] & kb_Up && !(kb_Data[7] & kb_Left) && !(kb_Data[7] & kb_Right))) && !(kb_Data[7] & kb_Left) && !(kb_Data[7] & kb_Right))){
	LD	A,(IX+-13)
	OR	A,A
	JR	Z,L_198
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_198
	LD	A,(16056350)
	AND	A,2
	JR	Z,L__121
	LD	A,1
	JR	L__122
L__121:
	XOR	A,A
L__122:
	LD	(IX+-62),A
	OR	A,A
	JR	NZ,L_198
	LD	A,(16056350)
	AND	A,4
	JR	Z,L__125
	LD	A,1
	JR	L__126
L__125:
	XOR	A,A
L__126:
	LD	(IX+-63),A
	OR	A,A
	JR	NZ,L_198
	LD	A,(IX+-62)
	OR	A,A
	JR	NZ,L_198
	LD	A,(IX+-63)
	OR	A,A
	JR	NZ,L_198
;  413					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  414					hero.y -= 2;
	LD	IY,(_hero+3)
	LEA	BC,IY+-2
	LD	(_hero+3),BC
;  415					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetSprite
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  416				}
;  417				else if(inLadder && ((kb_Data[7] & kb_Down && !(kb_Data[7] & kb_Left) && !(kb_Data[7] & kb_Right)))){
	JR	L_208
L_198:
	LD	A,(IX+-13)
	OR	A,A
	JR	Z,L_208
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_208
	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_208
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_208
;  418					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Sprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  419					if(hero.y != 140 && mapNum == 1 || mapNum != 1 && hero.y != 200) hero.y += 2;
	LD	BC,140
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_193
	LD	BC,1
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_194
L_193:
	LD	BC,1
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_195
	LD	BC,200
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_195
L_194:
	LD	IY,(_hero+3)
	LEA	BC,IY+2
	LD	(_hero+3),BC
L_195:
;  420					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetSprite
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  421				}
L_208:
;  422	
;  423				if(!((((kb_Data[7] & kb_Up && !(kb_Data[7] & kb_Left) && !(kb_Data[7] & kb_Right))) && !(kb_Data[7] & kb_Left) && !(kb_Data[7] & kb_Right))) && !keyIsReleased  && !doubleJumped && jumpingDir != nothing) keyIsReleased = true;
	LD	A,(16056350)
	AND	A,8
	JR	NZ,L__139
	LD	A,1
	JR	L__140
L__139:
	XOR	A,A
L__140:
	LD	(IX+-64),A
	OR	A,A
	JR	NZ,L_204
	LD	A,(16056350)
	AND	A,2
	JR	Z,L__143
	LD	A,1
	JR	L__144
L__143:
	XOR	A,A
L__144:
	LD	(IX+-65),A
	OR	A,A
	JR	NZ,L_204
	LD	A,(16056350)
	AND	A,4
	LD	(IX+-66),A
	OR	A,A
	JR	NZ,L_204
	LD	A,(IX+-65)
	OR	A,A
	JR	NZ,L_204
	LD	A,(IX+-66)
	OR	A,A
	JR	Z,L_221
L_204:
	LD	A,(IX+-35)
	OR	A,A
	JR	NZ,L_221
	LD	A,(IX+-37)
	OR	A,A
	JR	NZ,L_221
	LD	BC,8
	LD	HL,(IX+-22)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_221
	LD	(IX+-35),1
L_221:
;  424	
;  425				
;  426				//CHECK FOR JUMPING UP
;  427				if(((((kb_Data[7] & kb_Up && !(kb_Data[7] & kb_Left) && !(kb_Data[7] & kb_Right))) && !(kb_Data[7] & kb_Left) && !(kb_Data[7] & kb_Right))) && !doubleJumped && !inLadder && ((keyIsReleased && jumpingDir != nothing) || (!keyIsReleased && jumpingDir == nothing))) {
	LD	A,(IX+-64)
	OR	A,A
	JR	NZ,L_296
	LD	A,(16056350)
	AND	A,2
	JR	Z,L__154
	LD	A,1
	JR	L__155
L__154:
	XOR	A,A
L__155:
	LD	(IX+-67),A
	OR	A,A
	JR	NZ,L_296
	LD	A,(16056350)
	AND	A,4
	JR	Z,L__158
	LD	A,1
	JR	L__159
L__158:
	XOR	A,A
L__159:
	LD	(IX+-68),A
	OR	A,A
	JR	NZ,L_296
	LD	A,(IX+-67)
	OR	A,A
	JR	NZ,L_296
	LD	A,(IX+-68)
	OR	A,A
	JR	NZ,L_296
	LD	A,(IX+-37)
	OR	A,A
	JR	NZ,L_296
	LD	A,(IX+-13)
	OR	A,A
	JR	NZ,L_296
	LD	A,(IX+-35)
	OR	A,A
	JR	Z,L_217
	LD	BC,8
	LD	HL,(IX+-22)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_220
L_217:
	LD	A,(IX+-35)
	OR	A,A
	JR	NZ,L_296
	LD	BC,8
	LD	HL,(IX+-22)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_296
L_220:
;  428					jumpingDir = up;
	LD	BC,2
	LD	(IX+-22),BC
;  429					isBoosted = false;
	LD	(IX+-24),0
;  430					ascending = true;
	LD	(IX+-23),1
;  431	
;  432					lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  433					lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  434	
;  435					keyIsReleased = false;
	LD	(IX+-35),0
;  436	
;  437					if(!tempBool2) doubleJumped = true;
	LD	A,(IX+-34)
	OR	A,A
	JR	NZ,L_296
	LD	(IX+-37),1
;  438					
;  439				}
L_296:
;  440				//STANDING STILL ANIMATION
;  441				if(jumpingDir == nothing && !isBoosted){
	LD	BC,8
	LD	HL,(IX+-22)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__171
	LD	A,1
	JR	L__172
L__171:
	XOR	A,A
L__172:
	LD	(IX+-69),A
	OR	A,A
	JR	NZ,L_295
	LD	A,(IX+-24)
	OR	A,A
	JR	NZ,L_295
;  442	
;  443					inLadder = false;
	LD	(IX+-13),0
;  444					if((hero.x >= 106 && hero.x <= 136 && hero.y >= 39 && hero.y <= 140 && mapNum == 1) || (hero.x >= 271 && mapNum == 2 && hero.y >= 120) && jumpingDir == nothing) inLadder = true;
	LD	HL,(_hero)
	LD	BC,106
	OR	A,A
	SBC	HL,BC
	JP	M,L_230
	LD	BC,(_hero)
	LD	HL,136
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_230
	LD	BC,39
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_230
	LD	BC,(_hero+3)
	LD	HL,140
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_230
	LD	BC,1
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_231
L_230:
	LD	BC,271
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_233
	LD	BC,2
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_233
	LD	BC,120
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_233
	LD	A,(IX+-69)
	OR	A,A
	JR	NZ,L_233
L_231:
	LD	(IX+-13),1
L_233:
;  445	
;  446					if(isTouching(bottomFeet, true, 0, 0)) {
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_234
;  447						isBoosted = true;
	LD	(IX+-24),1
;  448						ascending = true;
	LD	(IX+-23),1
;  449						lastStill.x = hero.x;
	LD	BC,(_hero)
	LD	(IX+-6),BC
;  450						lastStill.y = hero.y;
	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  451					}
L_234:
;  452	
;  453					gfx_TransparentSprite_NoClip(HeroStill, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-82)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  454				}
;  455	
;  456				//JUMPING RIGHT ANIMATION
;  457				else if(jumpingDir == right){
	JR	L_299
L_295:
	LD	HL,(IX+-22)
	CALL	__icmpzero
	JR	NZ,L_293
;  458					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Sprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  459	
;  460					if(hero.x - lastStill.x <= 50 && !isTouching(rightSide, false, 0, 1)) hero.x += 2;
	LD	BC,(IX+-6)
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	JP	M,L_241
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_241
	LD	IY,(_hero)
	LEA	BC,IY+2
	LD	(_hero),BC
;  461					else if(hero.x - lastStill.x > 50 && hero.x - lastStill.x <= 65 && !isTouching(rightSide, false, 0, 0)) hero.x++;
	JR	L_243
L_241:
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	JP	P,L_243
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,65
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_243
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_243
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
L_243:
;  462	
;  463					if(hero.x > 300) hero.x = 300;
	LD	BC,(_hero)
	LD	HL,300
	OR	A,A
	SBC	HL,BC
	JP	P,L_244
	LD	BC,300
	LD	(_hero),BC
L_244:
;  464	
;  465					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetSprite
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  466	
;  467					if(hero.x - lastStill.x <= 12) gfx_TransparentSprite_NoClip(HeroJumpRight0, hero.x, hero.y);
	LD	BC,(IX+-6)
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_250
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-52)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  468					else if(hero.x - lastStill.x > 12 && hero.x - lastStill.x <= 24) gfx_TransparentSprite_NoClip(HeroJumpRight1, hero.x, hero.y);
	JR	L_299
L_250:
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_248
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_248
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-55)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  469					else if(hero.x - lastStill.x > 24) gfx_TransparentSprite_NoClip(HeroJumpRight2, hero.x, hero.y);
	JR	L_299
L_248:
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_299
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-58)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  470	
;  471					
;  472				}
;  473				//JUMPING LEFT ANIMATION
;  474				else if(jumpingDir == left){
	JR	L_299
L_293:
	LD	BC,1
	LD	HL,(IX+-22)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_291
;  475					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Sprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  476	
;  477					if(lastStill.x - hero.x <= 50 && !isTouching(leftSide, false, 0, -1)) hero.x -= 2;
	LD	HL,(IX+-6)
	LD	BC,(_hero)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_257
	LD	BC,16777215
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_257
	LD	IY,(_hero)
	LEA	BC,IY+-2
	LD	(_hero),BC
;  478					else if(lastStill.x - hero.x > 50 && lastStill.x - hero.x <= 65 && !isTouching(leftSide, false, 0, 0)) hero.x--;
	JR	L_259
L_257:
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	JP	P,L_259
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,65
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_259
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_259
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
L_259:
;  479	
;  480					if(hero.x < 0) hero.x = 0;
	LD	HL,(_hero)
	CALL	__icmpzero
	JP	P,L_260
	LD	BC,0
	LD	(_hero),BC
L_260:
;  481	
;  482					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetSprite
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  483	
;  484					if(lastStill.x - hero.x <= 12) gfx_TransparentSprite_NoClip(HeroJumpLeft0, hero.x, hero.y);
	LD	HL,(IX+-6)
	LD	BC,(_hero)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_266
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-94)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  485					else if(lastStill.x - hero.x > 12 && lastStill.x - hero.x <= 24) gfx_TransparentSprite_NoClip(HeroJumpLeft1, hero.x, hero.y);
	JR	L_299
L_266:
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_264
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_264
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-97)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  486					else if(lastStill.x - hero.x > 24) gfx_TransparentSprite_NoClip(HeroJumpLeft2, hero.x, hero.y);
	JR	L_299
L_264:
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_299
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-100)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  487				}
;  488				//JUMPING UP ANIMATION
;  489				else if(jumpingDir == up){
	JR	L_299
L_291:
	LD	BC,2
	LD	HL,(IX+-22)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_289
;  490					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Sprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  491	
;  492					if((kb_Data[1] & kb_2nd) && !isTouching(leftSide, false, 0, 0)) {
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_273
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_273
;  493						hero.x--;
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
;  494						facingRight = false;
	LD	(IX+-36),0
;  495					}
L_273:
;  496					if(kb_Data[1] & kb_Mode && !isTouching(rightSide, false, 0, 0)) {
	LD	A,(16056338)
	AND	A,64
	JR	Z,L_274
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_274
;  497						hero.x++;
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
;  498						facingRight = true;
	LD	(IX+-36),1
;  499					}
L_274:
;  500	
;  501					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetSprite
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  502					
;  503					if(facingRight) gfx_TransparentSprite_NoClip(HeroJumpUpRight, hero.x, hero.y);
	LD	A,(IX+-36)
	OR	A,A
	JR	Z,L_276
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-61)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  504					else gfx_TransparentSprite_NoClip(HeroJumpUpLeft, hero.x, hero.y);
	JR	L_299
L_276:
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-79)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  505					
;  506				}
;  507				else if(isBoosted){
	JR	L_299
L_289:
	LD	A,(IX+-24)
	OR	A,A
	JR	Z,L_299
;  508					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_Sprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  509	
;  510					if((kb_Data[1] & kb_2nd) && !isTouching(leftSide, false, 0, 0)) {
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_283
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_283
;  511						hero.x--;
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
;  512						facingRight = false;
	LD	(IX+-36),0
;  513					}
L_283:
;  514					if(kb_Data[1] & kb_Mode && !isTouching(rightSide, false, 0, 0)) {
	LD	A,(16056338)
	AND	A,64
	JR	Z,L_284
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_isTouching
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_284
;  515						hero.x++;
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
;  516						facingRight = true;
	LD	(IX+-36),1
;  517					}
L_284:
;  518	
;  519					gfx_GetSprite(behind_sprite, hero.x, hero.y);
	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-12)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_GetSprite
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  520					
;  521					if(facingRight) gfx_TransparentSprite_NoClip(HeroJumpUpRight, hero.x, hero.y);
	LD	A,(IX+-36)
	OR	A,A
	JR	Z,L_286
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-61)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  522					else gfx_TransparentSprite_NoClip(HeroJumpUpLeft, hero.x, hero.y);
	JR	L_299
L_286:
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-79)
	PUSH	BC
	PUSH	BC
	PUSH	HL
	LD	HL,IY
	LD	BC,-166
	CALL	__istix
	POP	HL
	POP	BC
	CALL	_gfx_TransparentSprite_NoClip
	PUSH	BC
	LD	BC,-166
	PUSH	HL
	CALL	__ildix
	LD	IY,HL
	POP	HL
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  523					
;  524				}
;  525			}
;  526	
;  527		}
L_299:
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_300
;  528	
;  529		gfx_End();
	CALL	_gfx_End
;  530	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_gfx_Sprite_NoClip                  IMPORT  -----   function
;_isTouching                         IMPORT  -----   function
;_floor                              IMPORT  -----   function
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_gfx_GetSprite                      IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_gfx_SetTransparentColor            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_map5_compressed                    IMPORT    236   variable
;_map4_compressed                    IMPORT    188   variable
;_map3_compressed                    IMPORT    126   variable
;_map2_compressed                    IMPORT    241   variable
;_map1_compressed                    IMPORT    204   variable
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_global_palette                     IMPORT    112   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_srand                              IMPORT  -----   function
;_hero                               STATIC      6   variable
;_gfx_FlipSpriteY                    IMPORT  -----   function
;_HeroJumpUpRight_compressed         IMPORT    134   variable
;_HeroJumpRight2_compressed          IMPORT    177   variable
;_HeroJumpRight1_compressed          IMPORT    138   variable
;_HeroJumpRight0_compressed          IMPORT    130   variable
;_HeroRight2_compressed              IMPORT    144   variable
;_HeroRight1_compressed              IMPORT    142   variable
;_HeroRight0_compressed              IMPORT    136   variable
;_HeroStill_compressed               IMPORT    115   variable
;_zx7_Decompress                     IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;heroJumpRight                       IX-137      9   variable
;heroRunRight                        IX-128      9   variable
;heroRunLeft                         IX-119      9   variable
;HeroLeft0                           IX-110      3   variable
;HeroLeft2                           IX-107      3   variable
;distance                            IX-104      4   variable
;HeroJumpLeft2                       IX-100      3   variable
;HeroJumpLeft1                        IX-97      3   variable
;HeroJumpLeft0                        IX-94      3   variable
;HeroLeft1                            IX-91      3   variable
;HeroRight0                           IX-88      3   variable
;step                                 IX-85      3   variable
;HeroStill                            IX-82      3   variable
;HeroJumpUpLeft                       IX-79      3   variable
;HeroRight2                           IX-76      3   variable
;prevkey                              IX-73      1   variable
;HeroRight1                           IX-72      3   variable
;G_7                                  IX-69      1   variable
;G_6                                  IX-68      1   variable
;G_5                                  IX-67      1   variable
;G_3                                  IX-66      1   variable
;G_2                                  IX-65      1   variable
;G_4                                  IX-64      1   variable
;G_1                                  IX-63      1   variable
;G_0                                  IX-62      1   variable
;HeroJumpUpRight                      IX-61      3   variable
;HeroJumpRight2                       IX-58      3   variable
;HeroJumpRight1                       IX-55      3   variable
;HeroJumpRight0                       IX-52      3   variable
;key                                  IX-49      1   variable
;arrowDistance                        IX-48      4   variable
;tempBool1                            IX-44      1   variable
;map                                  IX-43      3   variable
;velocity                             IX-40      3   variable
;doubleJumped                         IX-37      1   variable
;facingRight                          IX-36      1   variable
;keyIsReleased                        IX-35      1   variable
;tempBool2                            IX-34      1   variable
;arrowInit                            IX-33      6   variable
;shootingDir                          IX-27      3   variable
;isBoosted                            IX-24      1   variable
;ascending                            IX-23      1   variable
;jumpingDir                           IX-22      3   variable
;arrow                                IX-19      6   variable
;inLadder                             IX-13      1   variable
;behind_sprite                        IX-12      3   variable
;mapNum                                IX-9      3   variable
;lastStill                             IX-6      6   variable


; Stack Frame Size: 172 (bytes)
;       Spill Code: -21 (instruction)


	SEGMENT STRSECT
L__6:
	DB	"Map1"
	DB	0
L__7:
	DB	"Map2"
	DB	0
L__8:
	DB	"Map3"
	DB	0
L__9:
	DB	"Map4"
	DB	0
L__10:
	DB	"Map5"
	DB	0
	SEGMENT CODE
;  531	
;  532	bool isTouching(enum bodyParts part, bool checkForPad, int yVelocity, int xVelocity){
_isTouching:
	LD	HL,-5
	CALL	__frameset
;  533		int f;
;  534	
;  535		bool check;
;  536		check = true;
	LD	(IX+-5),1
;  537		if(part == leftSide){
	LD	HL,(IX+6)
	CALL	__icmpzero
	JR	NZ,L_341
;  538			for(f = 3; f <= 40; f += 3) {
	LD	BC,3
	LD	(IX+-3),BC
	JR	L_307
L_305:
;  539				if(gfx_GetPixel(hero.x + 2 + xVelocity, hero.y + f + yVelocity) == 0 || hero.x + xVelocity == 0) return true;
	LD	A,(_hero+3)
	LD	B,(IX+-3)
	ADD	A,B
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	IY,(_hero)
	LEA	HL,IY+2
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_304
	LD	BC,(IX+15)
	LD	HL,(_hero)
	ADD	HL,BC
	CALL	__icmpzero
	JR	NZ,L_306
L_304:
	LD	A,1
	JR	L_343
;  540			}
L_306:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_307:
	LD	BC,(IX+-3)
	LD	HL,40
	OR	A,A
	SBC	HL,BC
	JP	P,L_305
	JR	L_342
;  541		}
;  542		else if(part == rightSide){
L_341:
	LD	BC,1
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_339
;  543			for(f = 3; f <= 40; f += 3) {
	LD	BC,3
	LD	(IX+-3),BC
	JR	L_312
L_310:
;  544				if(gfx_GetPixel(hero.x + 17 + xVelocity, hero.y + f + yVelocity) == 0 || hero.x + 20 + xVelocity== 320) return true;
	LD	A,(_hero+3)
	LD	B,(IX+-3)
	ADD	A,B
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	IY,(_hero)
	LEA	HL,IY+17
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_309
	LD	IY,(_hero)
	LEA	HL,IY+20
	LD	BC,(IX+15)
	ADD	HL,BC
	OR	A,A
	LD	BC,320
	SBC	HL,BC
	JR	NZ,L_311
L_309:
	LD	A,1
	JR	L_343
;  545			}
L_311:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_312:
	LD	BC,(IX+-3)
	LD	HL,40
	OR	A,A
	SBC	HL,BC
	JP	P,L_310
	JR	L_342
;  546		}
;  547		else if(part == topHead){
L_339:
	LD	BC,2
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_337
;  548			for(f = 3; f <= 16; f += 3) {
	LD	BC,3
	LD	(IX+-3),BC
	JR	L_317
L_315:
;  549				if(gfx_GetPixel(hero.x + f + xVelocity, hero.y + yVelocity) == 0 || hero.y + yVelocity < 0) return true;
	LD	A,(_hero+3)
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_314
	LD	BC,(IX+12)
	LD	HL,(_hero+3)
	ADD	HL,BC
	CALL	__icmpzero
	JP	P,L_316
L_314:
	LD	A,1
	JR	L_343
;  550			}
L_316:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_317:
	LD	BC,(IX+-3)
	LD	HL,16
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_315
	JR	L_342
;  551		}
;  552		else if(part == bottomFeet && !checkForPad){
L_337:
	LD	BC,3
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__234
	LD	A,1
	JR	L__235
L__234:
	XOR	A,A
L__235:
	LD	(IX+-4),A
	OR	A,A
	JR	NZ,L_335
	LD	A,(IX+9)
	OR	A,A
	JR	NZ,L_335
;  553			for(f = 6; f <= 14; f += 3) {
	LD	BC,6
	LD	(IX+-3),BC
	JR	L_325
L_323:
;  554				if(gfx_GetPixel(hero.x + f + xVelocity, hero.y + 40 + yVelocity) == 0 || hero.y + 41 + yVelocity > 240 || gfx_GetPixel(hero.x + f + xVelocity, hero.y + 40 + yVelocity) == 3 || gfx_GetPixel(hero.x + f + xVelocity, hero.y + 40 + yVelocity) == 4) return true;
	LD	A,(_hero+3)
	ADD	A,40
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_322
	LD	IY,(_hero+3)
	LEA	HL,IY+41
	LD	BC,(IX+12)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,240
	OR	A,A
	SBC	HL,BC
	JP	M,L_322
	LD	A,(_hero+3)
	ADD	A,40
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	Z,L_322
	LD	A,(_hero+3)
	ADD	A,40
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_324
L_322:
	LD	A,1
	JR	L_343
;  555			}
L_324:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_325:
	LD	BC,(IX+-3)
	LD	HL,14
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_323
	JR	L_342
;  556		}
;  557		else if(part == bottomFeet && checkForPad){
L_335:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_342
	LD	A,(IX+9)
	OR	A,A
	JR	Z,L_342
;  558			for(f = 6; f <= 14; f += 3) {
	LD	BC,6
	LD	(IX+-3),BC
	JR	L_331
L_329:
;  559				if(gfx_GetPixel(hero.x + f + xVelocity, hero.y + 41 + yVelocity) != 3 || gfx_GetPixel(hero.x + f + xVelocity, hero.y + 40 + yVelocity) == 4) check = false;
	LD	A,(_hero+3)
	ADD	A,41
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_328
	LD	A,(_hero+3)
	ADD	A,40
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_330
L_328:
	LD	(IX+-5),0
;  560			}
L_330:
	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_331:
	LD	BC,(IX+-3)
	LD	HL,14
	OR	A,A
	SBC	HL,BC
	JP	P,L_329
;  561			return check;
	LD	A,(IX+-5)
	JR	L_343
;  562		}
L_342:
;  563		return false;
	XOR	A,A
L_343:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _isTouching ***************************
;Name                         Addr/Register   Size   Type
;_hero                               STATIC      6   variable
;_gfx_GetPixel                       IMPORT  -----   function
;check                                 IX-5      1   variable
;G_8                                   IX-4      1   variable
;f                                     IX-3      3   variable
;xVelocity                            IX+15      3   parameter
;yVelocity                            IX+12      3   parameter
;checkForPad                           IX+9      1   parameter
;part                                  IX+6      3   parameter


; Stack Frame Size: 23 (bytes)
;       Spill Code: -21 (instruction)


	XREF _map5_compressed:ROM
	XREF _map4_compressed:ROM
	XREF _map3_compressed:ROM
	XREF _map2_compressed:ROM
	XREF _map1_compressed:ROM
	XREF _HeroJumpUpRight_compressed:ROM
	XREF _HeroJumpRight2_compressed:ROM
	XREF _HeroJumpRight1_compressed:ROM
	XREF _HeroJumpRight0_compressed:ROM
	XREF _HeroRight2_compressed:ROM
	XREF _HeroRight1_compressed:ROM
	XREF _HeroRight0_compressed:ROM
	XREF _HeroStill_compressed:ROM
	XREF _global_palette:ROM
	XREF _zx7_Decompress:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_FlipSpriteY:ROM
	XREF _gfx_ScaledSprite_NoClip:ROM
	XREF _gfx_GetSprite:ROM
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_Sprite_NoClip:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_GetPixel:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetTransparentColor:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _srand:ROM
	XREF _malloc:ROM
	XREF _floor:ROM
	XREF __idivs:ROM
	XREF __iremu:ROM
	XREF __fadd:ROM
	XREF __fsub:ROM
	XREF __fmul:ROM
	XREF __fdiv:ROM
	XREF __fcmp:ROM
	XREF __ftol:ROM
	XREF __ltof:ROM
	XREF __itol:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XDEF _isTouching
	XDEF _main
	XDEF _hero
	END
