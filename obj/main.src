; Zilog eZ80 ANSI C Compiler Release 3.4
; -debug -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",9
.DEFINE "sign"
.VALUE 0
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "mant"
.VALUE 2
.CLASS 8
.DIM 7
.TYPE 108
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",18
.DEFINE "real"
.VALUE 0
.CLASS 8
.TAG "NONAME0"
.TYPE 8
.ENDEF
.DEFINE "imag"
.VALUE 9
.CLASS 8
.TAG "NONAME0"
.TYPE 8
.ENDEF
.ENDREC "NONAME1"
.BEGREC "NONAME2",11
.DEFINE "dim"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME0"
.TYPE 104
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",20
.DEFINE "dim"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME1"
.TYPE 104
.ENDEF
.ENDREC "NONAME3"
.BEGREC "NONAME4",11
.DEFINE "cols"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "rows"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME0"
.TYPE 104
.ENDEF
.ENDREC "NONAME4"
.BEGREC "NONAME5",3
.DEFINE "len"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 98
.ENDEF
.ENDREC "NONAME5"
.BEGREC "NONAME6",3
.DEFINE "len"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 98
.ENDEF
.ENDREC "NONAME6"
.BEGREC "NONAME7",3
.DEFINE "size"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME7"
.BEGREC "font",12
.DEFINE "font"
.VALUE 0
.CLASS 8
.TAG "font"
.TYPE 40
.ENDEF
.DEFINE "drawChar"
.VALUE 3
.CLASS 8
.TYPE 545
.ENDEF
.DEFINE "getWidth"
.VALUE 6
.CLASS 8
.TYPE 558
.ENDEF
.DEFINE "getHeight"
.VALUE 9
.CLASS 8
.TYPE 558
.ENDEF
.ENDREC "font"
.BEGREC "system_info",40
.DEFINE "size"
.VALUE 0
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "hardwareVersion"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "hardwareType"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "hardwareType2"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "osMajorVersion"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "osMinorVersion"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "osRevisionVersion"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "osBuildVersion"
.VALUE 9
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "bootMajorVersion"
.VALUE 12
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "bootMinorVersion"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "bootRevisionVersion"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "bootBuildVersion"
.VALUE 15
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "unknown"
.VALUE 18
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.DEFINE "calcid"
.VALUE 28
.CLASS 8
.DIM 8
.TYPE 108
.ENDEF
.DEFINE "ti"
.VALUE 36
.CLASS 8
.DIM 2
.TYPE 98
.ENDEF
.DEFINE "language"
.VALUE 38
.CLASS 8
.TYPE 13
.ENDEF
.ENDREC "system_info"
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
.BEGREC "NONAME8",6
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "rem"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME8"
.BEGREC "NONAME9",8
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 5
.ENDEF
.DEFINE "rem"
.VALUE 4
.CLASS 8
.TYPE 5
.ENDEF
.ENDREC "NONAME9"
.BEGREC "header",6
.DEFINE "s"
.VALUE 0
.CLASS 11
.TAG "NONAME10"
.TYPE 8
.ENDEF
.DEFINE "x"
.VALUE 0
.CLASS 11
.TYPE 2
.ENDEF
.ENDREC "header"
.BEGREC "NONAME10",6
.DEFINE "ptr"
.VALUE 0
.CLASS 8
.TAG "header"
.TYPE 40
.ENDEF
.DEFINE "size"
.VALUE 3
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME10"
.BEGREC "__stdio_file",1
.DEFINE "slot"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "__stdio_file"
.BEGREC "NONAME11",3
.DEFINE "width"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME11"
.BEGREC "NONAME12",3
.DEFINE "width"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME12"
.BEGREC "NONAME13",6
.DEFINE "x"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "y"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME13"
.BEGREC "NONAME14",12
.DEFINE "xmin"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "ymin"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "xmax"
.VALUE 6
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "ymax"
.VALUE 9
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME14"
.BEGREC "NONAME15",18
.DEFINE "map"
.VALUE 0
.CLASS 8
.TYPE 44
.ENDEF
.DEFINE "tiles"
.VALUE 3
.CLASS 8
.TAG "NONAME11"
.TYPE 296
.ENDEF
.DEFINE "tile_height"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "tile_width"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "draw_height"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "draw_width"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "type_width"
.VALUE 10
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "type_height"
.VALUE 11
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "height"
.VALUE 12
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "width"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "y_loc"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "x_loc"
.VALUE 15
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME15"
	SEGMENT BSS
_hero:
	DS	6
.DEFINE "hero"
.ALIAS "_hero"
.CLASS 83
.VALUE _hero
.TAG "NONAME13"
.TYPE 8
.ENDEF
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	#include <math.h>
;    6	#include <stdio.h>
;    7	#include <stdlib.h>
;    8	#include <string.h>
;    9	
;   10	#include <graphx.h>
;   11	#include <keypadc.h>
;   12	#include <debug.h>
;   13	
;   14	#include <compression.h>
;   15	
;   16	#include "gfx/gfx.h"
;   17	
;   18	bool isTouching(enum bodyParts part, bool checkForPad, int yVelocity, int xVelocity);
;   19	
;   20	enum direction{
;   21		right,
;   22		left,
;   23		up,
;   24		down,
;   25		nothing
;   26	};
;   27	
;   28	enum bodyParts{
;   29		leftSide,
;   30		rightSide,
;   31		topHead,
;   32		bottomFeet
;   33	};
;   34	
;   35	gfx_point_t hero;
	SEGMENT CODE
;   36	
;   37	void main(void) {
_main:
.DEFINE "_main"

.VALUE _main

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "main",37,"_main"

.LINE 37

.DEFINE "lastStill"

.CLASS 65

.VALUE -6

.TAG "NONAME13"

.TYPE 8

.ENDEF

.DEFINE "mapNum"

.CLASS 65

.VALUE -9

.TYPE 4

.ENDEF

.DEFINE "ascending"

.CLASS 65

.VALUE -10

.TYPE 12

.ENDEF

.DEFINE "jumpingDir"

.CLASS 65

.VALUE -13

.TYPE 4

.ENDEF

.DEFINE "behind_sprite"

.CLASS 65

.VALUE -16

.TAG "NONAME11"

.TYPE 40

.ENDEF

.DEFINE "keyIsReleased"

.CLASS 65

.VALUE -17

.TYPE 12

.ENDEF

.DEFINE "inLadder"

.CLASS 65

.VALUE -18

.TYPE 12

.ENDEF

.DEFINE "doubleJumped"

.CLASS 65

.VALUE -19

.TYPE 12

.ENDEF

.DEFINE "isBoosted"

.CLASS 65

.VALUE -20

.TYPE 12

.ENDEF

.DEFINE "tempBool2"

.CLASS 65

.VALUE -21

.TYPE 12

.ENDEF

.DEFINE "facingRight"

.CLASS 65

.VALUE -22

.TYPE 12

.ENDEF

.DEFINE "tempBool1"

.CLASS 65

.VALUE -23

.TYPE 12

.ENDEF

.DEFINE "velocity"

.CLASS 65

.VALUE -26

.TYPE 4

.ENDEF

.DEFINE "map"

.CLASS 65

.VALUE -29

.TAG "NONAME11"

.TYPE 40

.ENDEF

.DEFINE "key"

.CLASS 65

.VALUE -30

.TYPE 12

.ENDEF

.DEFINE "HeroJumpRight2"

.CLASS 65

.VALUE -33

.TAG "NONAME11"

.TYPE 40

.ENDEF

.DEFINE "HeroJumpUpRight"

.CLASS 65

.VALUE -36

.TAG "NONAME11"

.TYPE 40

.ENDEF

.DEFINE "HeroJumpRight0"

.CLASS 65

.VALUE -39

.TAG "NONAME11"

.TYPE 40

.ENDEF

.DEFINE "HeroJumpRight1"

.CLASS 65

.VALUE -42

.TAG "NONAME11"

.TYPE 40

.ENDEF

.DEFINE "HeroRight1"

.CLASS 65

.VALUE -49

.TAG "NONAME11"

.TYPE 40

.ENDEF

.DEFINE "HeroRight2"

.CLASS 65

.VALUE -52

.TAG "NONAME11"

.TYPE 40

.ENDEF

.DEFINE "HeroJumpUpLeft"

.CLASS 65

.VALUE -55

.TAG "NONAME11"

.TYPE 40

.ENDEF

.DEFINE "step"

.CLASS 65

.VALUE -58

.TYPE 14

.ENDEF

.DEFINE "HeroStill"

.CLASS 65

.VALUE -61

.TAG "NONAME11"

.TYPE 40

.ENDEF

.DEFINE "prevkey"

.CLASS 65

.VALUE -62

.TYPE 12

.ENDEF

.DEFINE "HeroRight0"

.CLASS 65

.VALUE -65

.TAG "NONAME11"

.TYPE 40

.ENDEF

.DEFINE "HeroJumpLeft0"

.CLASS 65

.VALUE -68

.TAG "NONAME11"

.TYPE 40

.ENDEF

.DEFINE "HeroJumpLeft1"

.CLASS 65

.VALUE -71

.TAG "NONAME11"

.TYPE 40

.ENDEF

.DEFINE "HeroJumpLeft2"

.CLASS 65

.VALUE -74

.TAG "NONAME11"

.TYPE 40

.ENDEF

.DEFINE "distance"

.CLASS 65

.VALUE -78

.TYPE 6

.ENDEF

.DEFINE "HeroLeft2"

.CLASS 65

.VALUE -81

.TAG "NONAME11"

.TYPE 40

.ENDEF

.DEFINE "HeroLeft0"

.CLASS 65

.VALUE -84

.TAG "NONAME11"

.TYPE 40

.ENDEF

.DEFINE "HeroLeft1"

.CLASS 65

.VALUE -87

.TAG "NONAME11"

.TYPE 40

.ENDEF

.DEFINE "heroRunLeft"

.CLASS 65

.VALUE -96

.DIM 3

.TAG "NONAME11"

.TYPE 360

.ENDEF

.DEFINE "heroRunRight"

.CLASS 65

.VALUE -105

.DIM 3

.TAG "NONAME11"

.TYPE 360

.ENDEF

.DEFINE "heroJumpRight"

.CLASS 65

.VALUE -114

.DIM 3

.TAG "NONAME11"

.TYPE 360

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+-114
	LD	SP,HL
;   38	
;   39		int x;
;   40		int y;
;   41	
;   42		int i;
;   43	
;   44		int mapNum;
;   45	
;   46		int velocity;
;   47	
;   48		gfx_point_t lastStill;
;   49	
;   50		gfx_sprite_t *map;
;   51	
;   52		gfx_sprite_t *HeroStill, *HeroLeft0, *HeroLeft1, *HeroLeft2, *HeroRight0, *HeroRight1, *HeroRight2,*HeroJumpRight0, *HeroJumpRight1, *HeroJumpRight2, *HeroJumpUpRight, *HeroJumpUpLeft, *HeroJumpLeft0, *HeroJumpLeft1, *HeroJumpLeft2;
;   53	
;   54		double distance;
;   55		unsigned int step;
;   56	
;   57		enum direction jumpingDir;
;   58	
;   59		bool doubleJumped, keyIsReleased, inLadder, facingRight, ascending, key, prevkey, isBoosted, tempBool1, tempBool2;
;   60	
;   61		gfx_sprite_t *heroRunRight[3];
;   62		gfx_sprite_t *heroRunLeft[3];
;   63	
;   64		gfx_sprite_t *heroJumpRight[3];
;   65	
;   66		gfx_sprite_t *behind_sprite;
;   67	
;   68		gfx_sprite_t *tempPerson;
;   69	
;   70		map = gfx_MallocSprite(80, 60);
.LINE 70

	LD	BC,_malloc
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,80
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-29),HL
;   71	
;   72		HeroStill = gfx_MallocSprite(20, 40);
.LINE 72

	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-61),HL
;   73		HeroLeft0 = gfx_MallocSprite(20, 40);
.LINE 73

	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-84),HL
;   74		HeroLeft1 = gfx_MallocSprite(20, 40);
.LINE 74

	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-87),HL
;   75		HeroLeft2 = gfx_MallocSprite(20, 40);
.LINE 75

	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-81),HL
;   76		HeroRight0 = gfx_MallocSprite(20, 40);
.LINE 76

	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-65),HL
;   77		HeroRight1 = gfx_MallocSprite(20, 40);
.LINE 77

	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-49),HL
;   78		HeroRight2 = gfx_MallocSprite(20, 40);
.LINE 78

	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-52),HL
;   79		HeroJumpRight0 = gfx_MallocSprite(20, 40);
.LINE 79

	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-39),HL
;   80		HeroJumpRight1 = gfx_MallocSprite(20, 40);
.LINE 80

	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-42),HL
;   81		HeroJumpRight2 = gfx_MallocSprite(20, 40);
.LINE 81

	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-33),HL
;   82		HeroJumpUpRight = gfx_MallocSprite(20, 40);
.LINE 82

	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-36),HL
;   83		HeroJumpUpLeft = gfx_MallocSprite(20, 40);
.LINE 83

	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-55),HL
;   84		HeroJumpLeft0 = gfx_MallocSprite(20, 40);
.LINE 84

	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-68),HL
;   85		HeroJumpLeft1 = gfx_MallocSprite(20, 40);
.LINE 85

	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-71),HL
;   86		HeroJumpLeft2 = gfx_MallocSprite(20, 40);
.LINE 86

	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-74),HL
;   87	
;   88	
;   89		zx7_Decompress( HeroStill, HeroStill_compressed );
.LINE 89

	LD	BC,_HeroStill_compressed
	PUSH	BC
	LD	BC,(IX+-61)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   90		zx7_Decompress( HeroRight0, HeroRight0_compressed );
.LINE 90

	LD	BC,_HeroRight0_compressed
	PUSH	BC
	LD	BC,(IX+-65)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   91		zx7_Decompress( HeroRight1, HeroRight1_compressed );
.LINE 91

	LD	BC,_HeroRight1_compressed
	PUSH	BC
	LD	BC,(IX+-49)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   92		zx7_Decompress( HeroRight2, HeroRight2_compressed );
.LINE 92

	LD	BC,_HeroRight2_compressed
	PUSH	BC
	LD	BC,(IX+-52)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   93		zx7_Decompress( HeroJumpRight0, HeroJumpRight0_compressed );
.LINE 93

	LD	BC,_HeroJumpRight0_compressed
	PUSH	BC
	LD	BC,(IX+-39)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   94		zx7_Decompress( HeroJumpRight1, HeroJumpRight1_compressed );
.LINE 94

	LD	BC,_HeroJumpRight1_compressed
	PUSH	BC
	LD	BC,(IX+-42)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   95		zx7_Decompress( HeroJumpRight2, HeroJumpRight2_compressed );
.LINE 95

	LD	BC,_HeroJumpRight2_compressed
	PUSH	BC
	LD	BC,(IX+-33)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   96		zx7_Decompress( HeroJumpUpRight, HeroJumpUpRight_compressed );
.LINE 96

	LD	BC,_HeroJumpUpRight_compressed
	PUSH	BC
	LD	BC,(IX+-36)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   97	
;   98		gfx_FlipSpriteY(HeroRight0, HeroLeft0);
.LINE 98

	LD	BC,(IX+-84)
	PUSH	BC
	LD	BC,(IX+-65)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;   99		gfx_FlipSpriteY(HeroRight1, HeroLeft1);
.LINE 99

	LD	BC,(IX+-87)
	PUSH	BC
	LD	BC,(IX+-49)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  100		gfx_FlipSpriteY(HeroRight2, HeroLeft2);
.LINE 100

	LD	BC,(IX+-81)
	PUSH	BC
	LD	BC,(IX+-52)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  101		gfx_FlipSpriteY(HeroJumpRight0, HeroJumpLeft0);
.LINE 101

	LD	BC,(IX+-68)
	PUSH	BC
	LD	BC,(IX+-39)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  102		gfx_FlipSpriteY(HeroJumpRight1, HeroJumpLeft1);
.LINE 102

	LD	BC,(IX+-71)
	PUSH	BC
	LD	BC,(IX+-42)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  103		gfx_FlipSpriteY(HeroJumpRight2, HeroJumpLeft2);
.LINE 103

	LD	BC,(IX+-74)
	PUSH	BC
	LD	BC,(IX+-33)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  104		gfx_FlipSpriteY(HeroJumpUpRight, HeroJumpUpLeft);
.LINE 104

	LD	BC,(IX+-55)
	PUSH	BC
	LD	BC,(IX+-36)
	PUSH	BC
	CALL	_gfx_FlipSpriteY
	POP	BC
	POP	BC
;  105	
;  106	
;  107		velocity = 2;
;  108	
;  109		jumpingDir = nothing;
.LINE 109

	LD	BC,4
	LD	(IX+-13),BC
;  110	
;  111		doubleJumped = inLadder = isBoosted = keyIsReleased = false;
.LINE 111

	LD	(IX+-17),0
	LD	(IX+-20),0
	LD	(IX+-18),0
	LD	(IX+-19),0
;  112	
;  113		facingRight = true;
.LINE 113

	LD	(IX+-22),1
;  114	
;  115		heroRunRight[0] = HeroRight0;
.LINE 115

	LD	BC,(IX+-65)
	LD	(IX+-105),BC
;  116		heroRunRight[1] = HeroRight1;
.LINE 116

	LEA	HL,IX+-102
	LD	BC,(IX+-49)
	LD	(HL),BC
;  117		heroRunRight[2] = HeroRight2;
.LINE 117

	LEA	HL,IX+-99
	LD	BC,(IX+-52)
	LD	(HL),BC
;  118	
;  119		heroRunLeft[0] = HeroLeft0;
.LINE 119

	LD	BC,(IX+-84)
	LD	(IX+-96),BC
;  120		heroRunLeft[1] = HeroLeft1;
.LINE 120

	LEA	HL,IX+-93
	LD	BC,(IX+-87)
	LD	(HL),BC
;  121		heroRunLeft[2] = HeroLeft2;
.LINE 121

	LEA	HL,IX+-90
	LD	BC,(IX+-81)
	LD	(HL),BC
;  122	
;  123		heroJumpRight[0] = HeroJumpRight0;
.LINE 123

	LD	BC,(IX+-39)
	LD	(IX+-114),BC
;  124		heroJumpRight[1] = HeroJumpRight1;
.LINE 124

	LEA	IY,IX+-114
	LEA	HL,IY+3
	LD	BC,(IX+-42)
	LD	(HL),BC
;  125		heroJumpRight[2] = HeroJumpRight2;
.LINE 125

	LEA	HL,IY+6
	LD	BC,(IX+-33)
	LD	(HL),BC
;  126	
;  127		behind_sprite = gfx_MallocSprite(20, 40);
.LINE 127

	LD	BC,_malloc
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-16),HL
;  128	
;  129		lastStill.x = hero.x;
.LINE 129

	LD	BC,(_hero)
	LD	(IX+-6),BC
;  130		lastStill.y = hero.y;
.LINE 130

	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  131	
;  132		srand(rtc_Time());
.LINE 132

	LD	BC,(15925316)
	PUSH	BC
	CALL	_srand
	POP	BC
;  133	
;  134		gfx_Begin();
.LINE 134

	CALL	_gfx_Begin
;  135	
;  136		gfx_SetPalette(global_palette, sizeof_global_palette, 0);
.LINE 136

	LD	BC,0
	PUSH	BC
	LD	BC,112
	PUSH	BC
	LD	BC,_global_palette
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;  137	
;  138		mapNum = 1;
.LINE 138

	LD	BC,1
	LD	(IX+-9),BC
;  139	
;  140		gfx_FillScreen(1);
.LINE 140

	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  141	
;  142		while(!(kb_Data[6] & kb_Enter)){
.LINE 142

	JR	L_16
L_17:
;  143			kb_Scan();
.LINE 143

	CALL	_kb_Scan
;  144	
;  145	   		key = kb_Data[7] == kb_Down;
.LINE 145

	LD	A,(16056350)
	CP	A,1
	JR	NZ,L__1
	LD	A,1
	JR	L__2
L__1:
	XOR	A,A
L__2:
	LD	(IX+-30),A
;  146	
;  147			if(key && !prevkey) {
.LINE 147

	OR	A,A
	JR	Z,L_5
	LD	A,(IX+-62)
	OR	A,A
	JR	NZ,L_5
;  148				if(mapNum == 5) mapNum = 0;
.LINE 148

	LD	BC,5
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_3
	LD	BC,0
	LD	(IX+-9),BC
L_3:
;  149				mapNum++;
.LINE 149

	LD	BC,(IX+-9)
	INC	BC
	LD	(IX+-9),BC
;  150				gfx_SetColor(1);
.LINE 150

	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  151	
;  152				gfx_FillRectangle(0, 0, 4, 4);
.LINE 152

	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  153				gfx_FillRectangle(0, 20, 4, 4);
.LINE 153

	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  154				gfx_FillRectangle(0, 40, 4, 4);
.LINE 154

	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  155				gfx_FillRectangle(0, 60, 4, 4);
.LINE 155

	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  156				gfx_FillRectangle(0, 80, 4, 4);
.LINE 156

	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  157	
;  158				gfx_SetColor(0);
.LINE 158

	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  159			}
L_5:
.LINE 159

;  160	
;  161	
;  162			gfx_PrintStringXY("Map1", 20, 0);
.LINE 162

	LD	BC,0
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__6
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  163			gfx_PrintStringXY("Map2", 20, 20);
.LINE 163

	LD	BC,20
	PUSH	BC
	PUSH	BC
	LD	BC,L__7
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  164			gfx_PrintStringXY("Map3", 20, 40);
.LINE 164

	LD	BC,40
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__8
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  165			gfx_PrintStringXY("Map4", 20, 60);
.LINE 165

	LD	BC,60
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__9
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  166			gfx_PrintStringXY("Map5", 20, 80);
.LINE 166

	LD	BC,80
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__10
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  167	
;  168	
;  169			if(mapNum == 1)	gfx_FillRectangle(0, 0, 4, 4);
.LINE 169

	LD	BC,1
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_14
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  170			else if(mapNum == 2) gfx_FillRectangle(0, 20, 4, 4);			
.LINE 170

	JR	L_15
L_14:
	LD	BC,2
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_12
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  171			else if(mapNum == 3) gfx_FillRectangle(0, 40, 4, 4);
.LINE 171

	JR	L_15
L_12:
	LD	BC,3
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_10
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  172			else if(mapNum == 4) gfx_FillRectangle(0, 60, 4, 4);
.LINE 172

	JR	L_15
L_10:
	LD	BC,4
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_8
	PUSH	BC
	PUSH	BC
	LD	BC,60
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  173			else if(mapNum == 5) gfx_FillRectangle(0, 80, 4, 4);
.LINE 173

	JR	L_15
L_8:
	LD	BC,5
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_15
	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,80
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
L_15:
;  174	
;  175			prevkey = key;
.LINE 175

	LD	A,(IX+-30)
	LD	(IX+-62),A
;  176	
;  177			dbg_ClearConsole();
.LINE 177

	LD	A,1
	LD	(16580608),A
;  178			dbg_sprintf(dbgout, "%d", mapNum);
.LINE 178

	LD	BC,(IX+-9)
	PUSH	BC
	LD	BC,L__16
	PUSH	BC
	LD	BC,16449536
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  179		}
L_16:
.LINE 179

	LD	A,(16056348)
	AND	A,1
	JR	Z,L_17
;  180	
;  181		if(mapNum == 1)	{
.LINE 181

	LD	BC,1
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_26
;  182			zx7_Decompress( map, map1_compressed );
.LINE 182

	LD	BC,_map1_compressed
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  183			hero.x = 0;
.LINE 183

	LD	BC,0
	LD	(_hero),BC
;  184			hero.y = 180;
.LINE 184

	LD	BC,180
	LD	(_hero+3),BC
;  185		}
;  186		else if(mapNum == 2) {
.LINE 186

	JR	L_28
L_26:
	LD	BC,2
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_24
;  187			zx7_Decompress( map, map2_compressed );		
.LINE 187

	LD	BC,_map2_compressed
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  188			hero.x = 0;
.LINE 188

	LD	BC,0
	LD	(_hero),BC
;  189			hero.y = 180;
.LINE 189

	LD	BC,180
	LD	(_hero+3),BC
;  190		}
;  191		else if(mapNum == 3) {
.LINE 191

	JR	L_28
L_24:
	LD	BC,3
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_22
;  192			zx7_Decompress( map, map3_compressed );
.LINE 192

	LD	BC,_map3_compressed
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  193			hero.x = 0;
.LINE 193

	LD	BC,0
	LD	(_hero),BC
;  194			hero.y = 180;
.LINE 194

	LD	BC,180
	LD	(_hero+3),BC
;  195		}
;  196		else if(mapNum == 4) {
.LINE 196

	JR	L_28
L_22:
	LD	BC,4
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_20
;  197			zx7_Decompress( map, map4_compressed );
.LINE 197

	LD	BC,_map4_compressed
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  198			hero.x = 50;
.LINE 198

	LD	BC,50
	LD	(_hero),BC
;  199			hero.y = 100;
.LINE 199

	LD	BC,100
	LD	(_hero+3),BC
;  200		}		
;  201		else if(mapNum == 5) {
.LINE 201

	JR	L_28
L_20:
	LD	BC,5
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_28
;  202			zx7_Decompress( map, map5_compressed );
.LINE 202

	LD	BC,_map5_compressed
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;  203			hero.x = 80;
.LINE 203

	LD	BC,80
	LD	(_hero),BC
;  204			hero.y = 180;
.LINE 204

	LD	BC,180
	LD	(_hero+3),BC
;  205		}
L_28:
.LINE 205

;  206		
;  207	
;  208		gfx_ScaledSprite_NoClip(map, 0, 0, 4, 4);
.LINE 208

	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  209	
;  210		gfx_SetDrawBuffer();
.LINE 210

	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  211		
;  212		gfx_SetTransparentColor(1);
.LINE 212

	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTransparentColor
	POP	BC
;  213	
;  214		gfx_ScaledSprite_NoClip(map, 0, 0, 4, 4);
.LINE 214

	LD	BC,4
	PUSH	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+-29)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  215	
;  216		gfx_BlitBuffer();
.LINE 216

	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  217	
;  218		gfx_GetSprite(behind_sprite, hero.x, hero.y);
.LINE 218

	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  219		gfx_TransparentSprite_NoClip(HeroStill, hero.x, hero.y);
.LINE 219

	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-61)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  220	
;  221		while(!(kb_Data[6] & kb_Clear)){
.LINE 221

	JR	L_256
L_257:
;  222	
;  223			kb_Scan();
.LINE 223

	CALL	_kb_Scan
;  224	
;  225			if((((kb_Data[7] & kb_Right || kb_Data[1] & kb_Mode) && !isTouching(rightSide, false, 0, 1)) || ((kb_Data[7] & kb_Left || kb_Data[1] & kb_2nd) && !isTouching(leftSide, false, 0, -1))) && !(((kb_Data[7] & kb_Right || kb_Data[1] & kb_Mode)) && ((kb_Data[7] & kb_Left || kb_Data[1] & kb_2nd))) && jumpingDir == nothing && !(inLadder && hero.y < 59 && hero.y > 41 && mapNum == 1) && !isBoosted)  {
.LINE 225

	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_30
	LD	A,(16056338)
	AND	A,64
	JR	Z,L_33
L_30:
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_37
L_33:
	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_32
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_254
L_32:
	LD	BC,16777215
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_254
L_37:
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_36
	LD	A,(16056338)
	AND	A,64
	JR	Z,L_38
L_36:
	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_254
	LD	A,(16056338)
	AND	A,32
	JR	NZ,L_254
L_38:
	LD	BC,4
	LD	HL,(IX+-13)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_254
	LD	A,(IX+-18)
	OR	A,A
	JR	Z,L_43
	LD	BC,59
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JP	P,L_43
	LD	BC,(_hero+3)
	LD	HL,41
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_43
	LD	BC,1
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_254
L_43:
	LD	A,(IX+-20)
	OR	A,A
	JR	NZ,L_254
;  226				gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
.LINE 226

	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  227	
;  228				//IF RIGHT IS PRESSED
;  229				if(kb_Data[7] & kb_Right || kb_Data[1] & kb_Mode) {
.LINE 229

	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_48
	LD	A,(16056338)
	AND	A,64
	JR	Z,L_49
L_48:
;  230					facingRight = true;
.LINE 230

	LD	(IX+-22),1
;  231					if(kb_Data[7] & kb_Up && !inLadder) {
.LINE 231

	LD	A,(16056350)
	AND	A,8
	JR	Z,L_47
	LD	A,(IX+-18)
	OR	A,A
	JR	NZ,L_47
;  232						jumpingDir = right;
.LINE 232

	LD	BC,0
	LD	(IX+-13),BC
;  233						ascending = true;
.LINE 233

	LD	(IX+-10),1
;  234						keyIsReleased = false;
.LINE 234

	LD	(IX+-17),0
;  235						lastStill.x = hero.x;
.LINE 235

	LD	BC,(_hero)
	LD	(IX+-6),BC
;  236						lastStill.y = hero.y;
.LINE 236

	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  237					}
L_47:
.LINE 237

;  238					hero.x += 2;
.LINE 238

	LD	IY,(_hero)
	LEA	BC,IY+2
	LD	(_hero),BC
;  239				};
L_49:
.LINE 239

;  240				//IF LEFT IS PRESSED
;  241				if(kb_Data[7] & kb_Left || kb_Data[1] & kb_2nd){ 
.LINE 241

	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_54
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_55
L_54:
;  242					facingRight = false;
.LINE 242

	LD	(IX+-22),0
;  243					if(kb_Data[7] & kb_Up && !inLadder) {
.LINE 243

	LD	A,(16056350)
	AND	A,8
	JR	Z,L_53
	LD	A,(IX+-18)
	OR	A,A
	JR	NZ,L_53
;  244						jumpingDir = left;
.LINE 244

	LD	BC,1
	LD	(IX+-13),BC
;  245						ascending = true;
.LINE 245

	LD	(IX+-10),1
;  246						keyIsReleased = false;
.LINE 246

	LD	(IX+-17),0
;  247	
;  248						lastStill.x = hero.x;
.LINE 248

	LD	BC,(_hero)
	LD	(IX+-6),BC
;  249						lastStill.y = hero.y;
.LINE 249

	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  250					}				
L_53:
.LINE 250

;  251					hero.x -= 2;
.LINE 251

	LD	IY,(_hero)
	LEA	BC,IY+-2
	LD	(_hero),BC
;  252				}
L_55:
.LINE 252

;  253	
;  254				velocity = (hero.y - lastStill.y ) / 50 + 2;
.LINE 254

	LD	HL,(_hero+3)
	LD	BC,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	BC,50
	CALL	__idivs
	INC	HL
	INC	HL
	LD	(IX+-26),HL
;  255				tempBool1 = isTouching(bottomFeet, false, velocity - 1, 0);
.LINE 255

	LD	BC,0
	PUSH	BC
	LD	BC,(IX+-26)
	DEC	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-23),A
;  256				tempBool2 = isTouching(bottomFeet, false, 0, 0);
.LINE 256

	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-21),A
;  257				if((!tempBool1 || !tempBool2) && !inLadder) {
.LINE 257

	LD	A,(IX+-23)
	OR	A,A
	JR	Z,L_57
	LD	A,(IX+-21)
	OR	A,A
	JR	NZ,L_70
L_57:
	LD	A,(IX+-18)
	OR	A,A
	JR	NZ,L_70
;  258					if(!tempBool1)	hero.y += velocity;
.LINE 258

	LD	A,(IX+-23)
	OR	A,A
	JR	NZ,L_61
	LD	BC,(IX+-26)
	LD	HL,(_hero+3)
	ADD	HL,BC
	LD	(_hero+3),HL
;  259					else if(!tempBool2) hero.y++;
.LINE 259

	JR	L_64
L_61:
	LD	A,(IX+-21)
	OR	A,A
	JR	NZ,L_64
	LD	BC,(_hero+3)
	INC	BC
	LD	(_hero+3),BC
L_64:
;  260					
;  261					if(isTouching(rightSide, false, 0, 0)) hero.x--;
.LINE 261

	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_67
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
L_67:
;  262					if(isTouching(leftSide, false, 0, 0)) hero.x++;
.LINE 262

	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_70
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
;  263	
;  264				}
L_70:
.LINE 264

;  265	
;  266				if(isTouching(bottomFeet, true, 0, 0)) {
.LINE 266

	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_71
;  267					isBoosted = true;
.LINE 267

	LD	(IX+-20),1
;  268					ascending = true;
.LINE 268

	LD	(IX+-10),1
;  269					lastStill.x = hero.x;
.LINE 269

	LD	BC,(_hero)
	LD	(IX+-6),BC
;  270					lastStill.y = hero.y;
.LINE 270

	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  271				}	
L_71:
.LINE 271

;  272	
;  273				inLadder = false;
.LINE 273

	LD	(IX+-18),0
;  274				if((hero.x >= 106 && hero.x <= 136 && hero.y >= 39 && hero.y <= 140 && mapNum == 1) || (hero.x >= 271 && mapNum == 2 && hero.y >= 120)) inLadder = true;
.LINE 274

	LD	BC,106
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	JP	M,L_78
	LD	BC,(_hero)
	LD	HL,136
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_78
	LD	BC,39
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_78
	LD	BC,(_hero+3)
	LD	HL,140
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_78
	LD	BC,1
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_79
L_78:
	LD	BC,271
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_81
	LD	BC,2
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_81
	LD	BC,120
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_81
L_79:
	LD	(IX+-18),1
L_81:
;  275	
;  276				if(hero.x < 0) hero.x = 0;
.LINE 276

	LD	HL,(_hero)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_83
	LD	BC,0
	LD	(_hero),BC
L_83:
;  277				if(hero.x > 300) hero.x = 300;
.LINE 277

	LD	BC,(_hero)
	LD	HL,300
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_84
	LD	BC,300
	LD	(_hero),BC
L_84:
;  278	
;  279				gfx_GetSprite(behind_sprite, hero.x, hero.y);
.LINE 279

	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  280	
;  281				if(kb_Data[7] & kb_Right || kb_Data[1] & kb_Mode){
.LINE 281

	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_86
	LD	A,(16056338)
	AND	A,64
	JR	Z,L_89
L_86:
;  282					distance = hero.x - lastStill.x;
.LINE 282

	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	CALL	__itol
	CALL	__ltof
	LD	(IX+-78),BC
	LD	(IX+-75),A
;  283					step = floor(distance/6);
.LINE 283

	LD	HL,12582912
	LD	E,64
	LD	A,(IX+-75)
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_floor
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	CALL	__ftol
	LD	(IX+-58),BC
;  284	
;  285					gfx_TransparentSprite_NoClip(heroRunRight[ step % 3 ], hero.x, hero.y);
.LINE 285

	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,3
	LD	HL,(IX+-58)
	CALL	__iremu
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-105
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  286				}
L_89:
.LINE 286

;  287				if(kb_Data[7] & kb_Left || kb_Data[1] & kb_2nd){
.LINE 287

	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_88
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_255
L_88:
;  288					distance = lastStill.x - hero.x;
.LINE 288

	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	CALL	__itol
	CALL	__ltof
	LD	(IX+-78),BC
	LD	(IX+-75),A
;  289					step = floor(distance/6);
.LINE 289

	LD	HL,12582912
	LD	E,64
	LD	A,(IX+-75)
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_floor
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	CALL	__ftol
	LD	(IX+-58),BC
;  290	
;  291					gfx_TransparentSprite_NoClip(heroRunLeft[ step % 3 ], hero.x, hero.y);
.LINE 291

	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,3
	LD	HL,(IX+-58)
	CALL	__iremu
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-96
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  292				}
;  293	
;  294			}
;  295			//IF NOTHING IS PRESSED
;  296			else{
.LINE 296

	JR	L_255
L_254:
;  297	
;  298				velocity = (hero.y - lastStill.y ) / 50 + 2;
.LINE 298

	LD	HL,(_hero+3)
	LD	BC,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	BC,50
	CALL	__idivs
	INC	HL
	INC	HL
	LD	(IX+-26),HL
;  299				gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
.LINE 299

	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  300	
;  301	
;  302				//IF IS IN AIR
;  303				tempBool1 = isTouching(bottomFeet, false, velocity - 1, 0);
.LINE 303

	LD	BC,0
	PUSH	BC
	LD	BC,(IX+-26)
	DEC	BC
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-23),A
;  304				tempBool2 = isTouching(bottomFeet, false, 0, 0);
.LINE 304

	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-21),A
;  305				if(((!tempBool1 && velocity > 2)|| !tempBool2) && !inLadder && !ascending){
.LINE 305

	LD	A,(IX+-23)
	OR	A,A
	JR	NZ,L_91
	LD	BC,(IX+-26)
	LD	HL,2
	OR	A,A
	SBC	HL,BC
	JP	M,L_92
L_91:
	LD	A,(IX+-21)
	OR	A,A
	JR	NZ,L_113
L_92:
	LD	A,(IX+-18)
	OR	A,A
	JR	NZ,L_113
	LD	A,(IX+-10)
	OR	A,A
	JR	NZ,L_113
;  306						//gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
;  307	
;  308						if(!tempBool1)	hero.y += velocity;
.LINE 308

	LD	A,(IX+-23)
	OR	A,A
	JR	NZ,L_97
	LD	BC,(IX+-26)
	LD	HL,(_hero+3)
	ADD	HL,BC
	LD	(_hero+3),HL
;  309						else if(!tempBool2) hero.y++;
.LINE 309

	JR	L_100
L_97:
	LD	A,(IX+-21)
	OR	A,A
	JR	NZ,L_100
	LD	BC,(_hero+3)
	INC	BC
	LD	(_hero+3),BC
L_100:
;  310	
;  311						if(isTouching(rightSide, false, 0, 0)) hero.x--;
.LINE 311

	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_103
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
L_103:
;  312						if(isTouching(leftSide, false, 0, 0)) hero.x++;
.LINE 312

	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_104
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
L_104:
;  313						gfx_GetSprite(behind_sprite, hero.x, hero.y);
.LINE 313

	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  314					}
;  315				else if(tempBool2 && !inLadder && !ascending && jumpingDir != nothing){
.LINE 315

	JR	L_124
L_113:
	LD	A,(IX+-21)
	OR	A,A
	JR	Z,L_124
	LD	A,(IX+-18)
	OR	A,A
	JR	NZ,L_124
	LD	A,(IX+-10)
	OR	A,A
	JR	NZ,L_124
	LD	BC,4
	LD	HL,(IX+-13)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_124
;  316					if(tempBool2) {
.LINE 316

	LD	A,(IX+-21)
	OR	A,A
	JR	Z,L_110
;  317						jumpingDir = nothing;
.LINE 317

	LD	(IX+-13),BC
;  318						doubleJumped = false;
.LINE 318

	LD	(IX+-19),0
;  319					}
L_110:
.LINE 319

;  320					if(isTouching(bottomFeet, true, 1, 0)) {
.LINE 320

	LD	BC,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_124
;  321						isBoosted = true;
.LINE 321

	LD	(IX+-20),1
;  322						ascending = true;
.LINE 322

	LD	(IX+-10),1
;  323						jumpingDir = nothing;
.LINE 323

	LD	BC,4
	LD	(IX+-13),BC
;  324						lastStill.x = hero.x;
.LINE 324

	LD	BC,(_hero)
	LD	(IX+-6),BC
;  325						lastStill.y = hero.y;
.LINE 325

	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  326					}	
;  327				}
L_124:
.LINE 327

;  328	
;  329				//MOVING LADDER
;  330				if(inLadder && kb_Data[7] & kb_Up){
.LINE 330

	LD	A,(IX+-18)
	OR	A,A
	JR	Z,L_123
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_123
;  331					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
.LINE 331

	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  332					hero.y -= 2;
.LINE 332

	LD	IY,(_hero+3)
	LEA	BC,IY+-2
	LD	(_hero+3),BC
;  333					gfx_GetSprite(behind_sprite, hero.x, hero.y);
.LINE 333

	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  334	
;  335					//inLadder = false;
;  336					//if((hero.x >= 106 && hero.x <= 136 && hero.y >= 39 && hero.y <= 140 && mapNum == 1) || (hero.x >= 271 && mapNum == 2)) inLadder = true;
;  337				}
;  338				else if(inLadder && kb_Data[7] & kb_Down){
.LINE 338

	JR	L_129
L_123:
	LD	A,(IX+-18)
	OR	A,A
	JR	Z,L_129
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_129
;  339					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
.LINE 339

	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  340					if(hero.y != 140 && mapNum == 1 || mapNum != 1 && hero.y != 200) hero.y += 2;
.LINE 340

	LD	BC,140
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_118
	LD	BC,1
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_119
L_118:
	LD	BC,1
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_120
	LD	BC,200
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_120
L_119:
	LD	IY,(_hero+3)
	LEA	BC,IY+2
	LD	(_hero+3),BC
L_120:
;  341					gfx_GetSprite(behind_sprite, hero.x, hero.y);
.LINE 341

	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  342	
;  343					//inLadder = false;
;  344					//if((hero.x >= 106 && hero.x <= 136 && hero.y >= 39 && hero.y <= 140 && mapNum == 1) || (hero.x >= 271 && mapNum == 2)) inLadder = true;
;  345				}
L_129:
.LINE 345

;  346				
;  347				//CHECK FOR JUMPING UP
;  348				if((kb_Data[7] & kb_Up) && jumpingDir == nothing && !doubleJumped && !inLadder) {
.LINE 348

	LD	A,(16056350)
	AND	A,8
	JR	Z,L_252
	LD	BC,4
	LD	HL,(IX+-13)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_252
	LD	A,(IX+-19)
	OR	A,A
	JR	NZ,L_252
	LD	A,(IX+-18)
	OR	A,A
	JR	NZ,L_252
;  349					jumpingDir = up;
.LINE 349

	LD	BC,2
	LD	(IX+-13),BC
;  350					ascending = true;
.LINE 350

	LD	(IX+-10),1
;  351	
;  352					lastStill.x = hero.x;
.LINE 352

	LD	BC,(_hero)
	LD	(IX+-6),BC
;  353					lastStill.y = hero.y;
.LINE 353

	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  354	
;  355					keyIsReleased = false;
.LINE 355

	LD	(IX+-17),0
;  356					
;  357				}
L_252:
.LINE 357

;  358				//STANDING STILL ANIMATION
;  359				if(jumpingDir == nothing && !isBoosted){
.LINE 359

	LD	BC,4
	LD	HL,(IX+-13)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__97
	LD	A,1
	JR	L__98
L__97:
	XOR	A,A
L__98:
	LD	(IX+-43),A
	OR	A,A
	JR	NZ,L_251
	LD	A,(IX+-20)
	OR	A,A
	JR	NZ,L_251
;  360	
;  361					inLadder = false;
.LINE 361

	LD	(IX+-18),0
;  362					if((hero.x >= 106 && hero.x <= 136 && hero.y >= 39 && hero.y <= 140 && mapNum == 1) || (hero.x >= 271 && mapNum == 2 && hero.y >= 120) && jumpingDir == nothing) inLadder = true;
.LINE 362

	LD	BC,106
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	JP	M,L_138
	LD	BC,(_hero)
	LD	HL,136
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_138
	LD	BC,39
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_138
	LD	BC,(_hero+3)
	LD	HL,140
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_138
	LD	BC,1
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_139
L_138:
	LD	BC,271
	LD	HL,(_hero)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_141
	LD	BC,2
	LD	HL,(IX+-9)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_141
	LD	BC,120
	LD	HL,(_hero+3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_141
	LD	A,(IX+-43)
	OR	A,A
	JR	NZ,L_141
L_139:
	LD	(IX+-18),1
L_141:
;  363	
;  364					if(isTouching(bottomFeet, true, 0, 0)) {
.LINE 364

	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_142
;  365						isBoosted = true;
.LINE 365

	LD	(IX+-20),1
;  366						ascending = true;
.LINE 366

	LD	(IX+-10),1
;  367						lastStill.x = hero.x;
.LINE 367

	LD	BC,(_hero)
	LD	(IX+-6),BC
;  368						lastStill.y = hero.y;
.LINE 368

	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  369					}
L_142:
.LINE 369

;  370	
;  371					gfx_TransparentSprite_NoClip(HeroStill, hero.x, hero.y);
.LINE 371

	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-61)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  372				}
;  373	
;  374				//JUMPING RIGHT ANIMATION
;  375				else if(jumpingDir == right){
.LINE 375

	JR	L_255
L_251:
	LD	HL,(IX+-13)
	CALL	__icmpzero
	JR	NZ,L_249
;  376					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
.LINE 376

	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  377	
;  378					if(!(kb_Data[7] & kb_Up) && !keyIsReleased) {
.LINE 378

	LD	A,(16056350)
	AND	A,8
	LD	(IX+-44),A
	OR	A,A
	JR	NZ,L_148
	LD	A,(IX+-17)
	OR	A,A
	JR	NZ,L_148
;  379						keyIsReleased = true;
.LINE 379

	LD	(IX+-17),1
;  380					}
L_148:
.LINE 380

;  381	
;  382					if(kb_Data[7] & kb_Up && keyIsReleased && !doubleJumped){
.LINE 382

	LD	A,(IX+-44)
	OR	A,A
	JR	Z,L_156
	LD	A,(IX+-17)
	OR	A,A
	JR	Z,L_156
	LD	A,(IX+-19)
	OR	A,A
	JR	NZ,L_156
;  383						lastStill.x = hero.x;
.LINE 383

	LD	BC,(_hero)
	LD	(IX+-6),BC
;  384						lastStill.y = hero.y;
.LINE 384

	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  385						jumpingDir = up;
.LINE 385

	LD	BC,2
	LD	(IX+-13),BC
;  386						ascending = true;
.LINE 386

	LD	(IX+-10),1
;  387						doubleJumped = true;
.LINE 387

	LD	(IX+-19),1
;  388						continue;
.LINE 388

	JR	L_256
;  389					}
L_156:
.LINE 389

;  390	
;  391					if(hero.x - lastStill.x <= 50 && !isTouching(rightSide, false, 0, 1)) hero.x += 2;
.LINE 391

	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	JP	M,L_155
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_155
	LD	IY,(_hero)
	LEA	BC,IY+2
	LD	(_hero),BC
;  392					else if(hero.x - lastStill.x > 50 && hero.x - lastStill.x <= 65 && !isTouching(rightSide, false, 0, 0)) hero.x++;
.LINE 392

	JR	L_160
L_155:
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	JP	P,L_160
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,65
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_160
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_160
	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
L_160:
;  393	
;  394					if(ascending){
.LINE 394

	LD	A,(IX+-10)
	OR	A,A
	JR	Z,L_162
;  395						hero.y -= 2;
.LINE 395

	LD	IY,(_hero+3)
	LEA	BC,IY+-2
	LD	(_hero+3),BC
;  396						if(lastStill.y - hero.y > 25 || isTouching(topHead, false, 0, 0)) {
.LINE 396

	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,25
	OR	A,A
	SBC	HL,BC
	JP	M,L_158
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_162
L_158:
;  397							ascending = false;
.LINE 397

	LD	(IX+-10),0
;  398							lastStill.x = hero.x;
.LINE 398

	LD	BC,(_hero)
	LD	(IX+-6),BC
;  399							lastStill.y = hero.y;
.LINE 399

	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  400						}
;  401					}
L_162:
.LINE 401

;  402	
;  403					if(hero.x > 300) hero.x = 300;
.LINE 403

	LD	BC,(_hero)
	LD	HL,300
	OR	A,A
	SBC	HL,BC
	JP	P,L_163
	LD	BC,300
	LD	(_hero),BC
L_163:
;  404	
;  405					gfx_GetSprite(behind_sprite, hero.x, hero.y);
.LINE 405

	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  406	
;  407					if(hero.x - lastStill.x <= 12) gfx_TransparentSprite_NoClip(HeroJumpRight0, hero.x, hero.y);
.LINE 407

	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_169
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-39)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  408					else if(hero.x - lastStill.x > 12 && hero.x - lastStill.x <= 24) gfx_TransparentSprite_NoClip(HeroJumpRight1, hero.x, hero.y);
.LINE 408

	JR	L_255
L_169:
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_167
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_167
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-42)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  409					else if(hero.x - lastStill.x > 24) gfx_TransparentSprite_NoClip(HeroJumpRight2, hero.x, hero.y);
.LINE 409

	JR	L_255
L_167:
	LD	HL,(_hero)
	LD	BC,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_255
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-33)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  410	
;  411					
;  412				}
;  413				//JUMPING LEFT ANIMATION
;  414				else if(jumpingDir == left){
.LINE 414

	JR	L_255
L_249:
	LD	BC,1
	LD	HL,(IX+-13)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_247
;  415					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
.LINE 415

	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  416	
;  417					if(!(kb_Data[7] & kb_Up) && !keyIsReleased && !doubleJumped) {
.LINE 417

	LD	A,(16056350)
	AND	A,8
	LD	(IX+-45),A
	OR	A,A
	JR	NZ,L_175
	LD	A,(IX+-17)
	OR	A,A
	JR	NZ,L_175
	LD	A,(IX+-19)
	OR	A,A
	JR	NZ,L_175
;  418						keyIsReleased = true;
.LINE 418

	LD	(IX+-17),1
;  419					}
L_175:
.LINE 419

;  420	
;  421					if(kb_Data[7] & kb_Up && keyIsReleased){
.LINE 421

	LD	A,(IX+-45)
	OR	A,A
	JR	Z,L_183
	LD	A,(IX+-17)
	OR	A,A
	JR	Z,L_183
;  422						lastStill.x = hero.x;
.LINE 422

	LD	BC,(_hero)
	LD	(IX+-6),BC
;  423						lastStill.y = hero.y;
.LINE 423

	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  424						jumpingDir = up;
.LINE 424

	LD	BC,2
	LD	(IX+-13),BC
;  425						doubleJumped = true;
.LINE 425

	LD	(IX+-19),1
;  426						ascending = true;
.LINE 426

	LD	(IX+-10),1
;  427						continue;
.LINE 427

	JR	L_256
;  428					}
L_183:
.LINE 428

;  429	
;  430					if(lastStill.x - hero.x <= 50 && !isTouching(leftSide, false, 0, -1)) hero.x -= 2;
.LINE 430

	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	JP	M,L_182
	LD	BC,16777215
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_182
	LD	IY,(_hero)
	LEA	BC,IY+-2
	LD	(_hero),BC
;  431					else if(lastStill.x - hero.x > 50 && lastStill.x - hero.x <= 65 && !isTouching(leftSide, false, 0, 0)) hero.x--;
.LINE 431

	JR	L_187
L_182:
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,50
	OR	A,A
	SBC	HL,BC
	JP	P,L_187
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,65
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_187
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_187
	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
L_187:
;  432					if(ascending){
.LINE 432

	LD	A,(IX+-10)
	OR	A,A
	JR	Z,L_189
;  433						hero.y -= 2;
.LINE 433

	LD	IY,(_hero+3)
	LEA	BC,IY+-2
	LD	(_hero+3),BC
;  434						if(lastStill.y - hero.y > 25 || isTouching(topHead, false, 0, 0)) {
.LINE 434

	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,25
	OR	A,A
	SBC	HL,BC
	JP	M,L_185
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_189
L_185:
;  435							lastStill.x = hero.x;
.LINE 435

	LD	BC,(_hero)
	LD	(IX+-6),BC
;  436							lastStill.y = hero.y;
.LINE 436

	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  437							ascending = false;
.LINE 437

	LD	(IX+-10),0
;  438						}
;  439					}
L_189:
.LINE 439

;  440					if(hero.x < 0) hero.x = 0;
.LINE 440

	LD	HL,(_hero)
	CALL	__icmpzero
	JP	P,L_190
	LD	BC,0
	LD	(_hero),BC
L_190:
;  441	
;  442					gfx_GetSprite(behind_sprite, hero.x, hero.y);
.LINE 442

	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  443	
;  444					if(lastStill.x - hero.x <= 12) gfx_TransparentSprite_NoClip(HeroJumpLeft0, hero.x, hero.y);
.LINE 444

	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_196
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-68)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  445					else if(lastStill.x - hero.x > 12 && lastStill.x - hero.x <= 24) gfx_TransparentSprite_NoClip(HeroJumpLeft1, hero.x, hero.y);
.LINE 445

	JR	L_255
L_196:
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,12
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_194
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_194
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-71)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  446					else if(lastStill.x - hero.x > 24) gfx_TransparentSprite_NoClip(HeroJumpLeft2, hero.x, hero.y);
.LINE 446

	JR	L_255
L_194:
	LD	BC,(_hero)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,24
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_255
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-74)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  447				}
;  448				//JUMPING UP ANIMATION
;  449				else if(jumpingDir == up){
.LINE 449

	JR	L_255
L_247:
	LD	BC,2
	LD	HL,(IX+-13)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_245
;  450					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
.LINE 450

	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  451	
;  452					if(!(kb_Data[7] & kb_Up) && !keyIsReleased  && !doubleJumped) {
.LINE 452

	LD	A,(16056350)
	AND	A,8
	LD	(IX+-46),A
	OR	A,A
	JR	NZ,L_203
	LD	A,(IX+-17)
	OR	A,A
	JR	NZ,L_203
	LD	A,(IX+-19)
	OR	A,A
	JR	NZ,L_203
;  453						keyIsReleased = true;
.LINE 453

	LD	(IX+-17),1
;  454					}
L_203:
.LINE 454

;  455	
;  456					if(kb_Data[7] & kb_Up && keyIsReleased && !doubleJumped){
.LINE 456

	LD	A,(IX+-46)
	OR	A,A
	JR	Z,L_208
	LD	A,(IX+-17)
	OR	A,A
	JR	Z,L_208
	LD	A,(IX+-19)
	OR	A,A
	JR	NZ,L_208
;  457						lastStill.x = hero.x;
.LINE 457

	LD	BC,(_hero)
	LD	(IX+-6),BC
;  458						lastStill.y = hero.y;
.LINE 458

	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  459						jumpingDir = up;
.LINE 459

	LD	BC,2
	LD	(IX+-13),BC
;  460						doubleJumped = true;
.LINE 460

	LD	(IX+-19),1
;  461						ascending = true;
.LINE 461

	LD	(IX+-10),1
;  462						continue;
.LINE 462

	JR	L_256
;  463					}
L_208:
.LINE 463

;  464	
;  465					if(((kb_Data[7] & kb_Left || kb_Data[1] & kb_2nd)) && !isTouching(leftSide, false, 0, 0)) {
.LINE 465

	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_205
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_213
L_205:
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_213
;  466						hero.x--;
.LINE 466

	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
;  467						facingRight = false;
.LINE 467

	LD	(IX+-22),0
;  468					}
L_213:
.LINE 468

;  469					if((kb_Data[7] & kb_Right || kb_Data[1] & kb_Mode) && !isTouching(rightSide, false, 0, 0)) {
.LINE 469

	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_210
	LD	A,(16056338)
	AND	A,64
	JR	Z,L_217
L_210:
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_217
;  470						hero.x++;
.LINE 470

	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
;  471						facingRight = true;
.LINE 471

	LD	(IX+-22),1
;  472					}
L_217:
.LINE 472

;  473	
;  474					if(ascending){
.LINE 474

	LD	A,(IX+-10)
	OR	A,A
	JR	Z,L_218
;  475						hero.y -= 2;
.LINE 475

	LD	IY,(_hero+3)
	LEA	BC,IY+-2
	LD	(_hero+3),BC
;  476						if(lastStill.y - hero.y > 25 || isTouching(topHead, false, -1, 0)) {
.LINE 476

	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,25
	OR	A,A
	SBC	HL,BC
	JP	M,L_215
	LD	BC,0
	PUSH	BC
	LD	BC,16777215
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_218
L_215:
;  477							ascending = false;
.LINE 477

	LD	(IX+-10),0
;  478							lastStill.x = hero.x;
.LINE 478

	LD	BC,(_hero)
	LD	(IX+-6),BC
;  479							lastStill.y = hero.y;
.LINE 479

	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  480						}
;  481					}
L_218:
.LINE 481

;  482	
;  483					gfx_GetSprite(behind_sprite, hero.x, hero.y);
.LINE 483

	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  484					
;  485					if(facingRight) gfx_TransparentSprite_NoClip(HeroJumpUpRight, hero.x, hero.y);
.LINE 485

	LD	A,(IX+-22)
	OR	A,A
	JR	Z,L_220
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-36)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  486					else gfx_TransparentSprite_NoClip(HeroJumpUpLeft, hero.x, hero.y);
.LINE 486

	JR	L_255
L_220:
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-55)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  487					
;  488				}
;  489				else if(isBoosted){
.LINE 489

	JR	L_255
L_245:
	LD	A,(IX+-20)
	OR	A,A
	JR	Z,L_255
;  490					gfx_Sprite_NoClip(behind_sprite, hero.x, hero.y);
.LINE 490

	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_gfx_Sprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  491	
;  492					if(kb_Data[7] & kb_Up && !ascending){
.LINE 492

	LD	A,(16056350)
	AND	A,8
	JR	Z,L_227
	LD	A,(IX+-10)
	OR	A,A
	JR	NZ,L_227
;  493						lastStill.x = hero.x;
.LINE 493

	LD	BC,(_hero)
	LD	(IX+-6),BC
;  494						lastStill.y = hero.y;
.LINE 494

	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  495						jumpingDir = up;
.LINE 495

	LD	BC,2
	LD	(IX+-13),BC
;  496						isBoosted = false;
.LINE 496

	LD	(IX+-20),0
;  497						doubleJumped = true;
.LINE 497

	LD	(IX+-19),1
;  498						ascending = true;
.LINE 498

	LD	(IX+-10),1
;  499						keyIsReleased = true;
.LINE 499

	LD	(IX+-17),1
;  500						continue;
.LINE 500

	JR	L_256
;  501					}
L_227:
.LINE 501

;  502	
;  503					if(((kb_Data[7] & kb_Left || kb_Data[1] & kb_2nd)) && !isTouching(leftSide, false, 0, 0)) {
.LINE 503

	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_224
	LD	A,(16056338)
	AND	A,32
	JR	Z,L_232
L_224:
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_232
;  504						hero.x--;
.LINE 504

	LD	BC,(_hero)
	DEC	BC
	LD	(_hero),BC
;  505						facingRight = false;
.LINE 505

	LD	(IX+-22),0
;  506					}
L_232:
.LINE 506

;  507					if((kb_Data[7] & kb_Right || kb_Data[1] & kb_Mode) && !isTouching(rightSide, false, 0, 0)) {
.LINE 507

	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_229
	LD	A,(16056338)
	AND	A,64
	JR	Z,L_239
L_229:
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_239
;  508						hero.x++;
.LINE 508

	LD	BC,(_hero)
	INC	BC
	LD	(_hero),BC
;  509						facingRight = true;
.LINE 509

	LD	(IX+-22),1
;  510					}
L_239:
.LINE 510

;  511	
;  512					if(ascending){
.LINE 512

	LD	A,(IX+-10)
	OR	A,A
	JR	Z,L_240
;  513						if(lastStill.y - hero.y <= 180 && !isTouching(topHead, false, -9, 0)){
.LINE 513

	LD	BC,(_hero+3)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,180
	OR	A,A
	SBC	HL,BC
	JP	M,L_237
	LD	BC,0
	PUSH	BC
	LD	BC,16777207
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_237
;  514							hero.y -= 10;
.LINE 514

	LD	IY,(_hero+3)
	LEA	BC,IY+-10
	LD	(_hero+3),BC
;  515						}
;  516						else if(lastStill.y - hero.y > 180 || isTouching(topHead, false, -9, 0)){
.LINE 516

	JR	L_240
L_237:
	LD	BC,(_hero+3)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	LD	HL,180
	OR	A,A
	SBC	HL,BC
	JP	M,L_235
	LD	BC,0
	PUSH	BC
	LD	BC,16777207
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_isTouching
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_240
L_235:
;  517							ascending = false;
.LINE 517

	LD	(IX+-10),0
;  518							lastStill.x = hero.x;
.LINE 518

	LD	BC,(_hero)
	LD	(IX+-6),BC
;  519							lastStill.y = hero.y;
.LINE 519

	LD	BC,(_hero+3)
	LD	(IX+-3),BC
;  520							isBoosted = false;
.LINE 520

	LD	(IX+-20),0
;  521						}
;  522					}
L_240:
.LINE 522

;  523	
;  524					gfx_GetSprite(behind_sprite, hero.x, hero.y);
.LINE 524

	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-16)
	PUSH	BC
	CALL	_gfx_GetSprite
	POP	BC
	POP	BC
	POP	BC
;  525					
;  526					if(facingRight) gfx_TransparentSprite_NoClip(HeroJumpUpRight, hero.x, hero.y);
.LINE 526

	LD	A,(IX+-22)
	OR	A,A
	JR	Z,L_242
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-36)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  527					else gfx_TransparentSprite_NoClip(HeroJumpUpLeft, hero.x, hero.y);
.LINE 527

	JR	L_255
L_242:
	LD	A,(_hero+3)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,(IX+-55)
	PUSH	BC
	CALL	_gfx_TransparentSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  528					
;  529				}
;  530			}
L_255:
.LINE 530

;  531	
;  532			dbg_ClearConsole();
.LINE 532

	LD	A,1
	LD	(16580608),A
;  533			dbg_sprintf(dbgout, "hero = (%d, %d)\n", hero.x, hero.y);
.LINE 533

	LD	BC,(_hero+3)
	PUSH	BC
	LD	BC,(_hero)
	PUSH	BC
	LD	BC,L__181
	PUSH	BC
	LD	BC,16449536
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  534			dbg_sprintf(dbgout, "velocity = %d\n", velocity);
.LINE 534

	LD	BC,(IX+-26)
	PUSH	BC
	LD	BC,L__182
	PUSH	BC
	LD	BC,16449536
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  535			dbg_sprintf(dbgout, "keyIsReleased = %d\n", keyIsReleased);
.LINE 535

	LD	A,(IX+-17)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__183
	PUSH	BC
	LD	BC,16449536
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  536			dbg_sprintf(dbgout, "ascending = %d\n", ascending);
.LINE 536

	LD	A,(IX+-10)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__184
	PUSH	BC
	LD	BC,16449536
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  537			dbg_sprintf(dbgout, "jumpingDir = %d\n", jumpingDir);
.LINE 537

	LD	BC,(IX+-13)
	PUSH	BC
	LD	BC,L__185
	PUSH	BC
	LD	BC,16449536
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  538			dbg_sprintf(dbgout, "tempBool1 = %d\n", tempBool1);
.LINE 538

	LD	A,(IX+-23)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__186
	PUSH	BC
	LD	BC,16449536
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  539			dbg_sprintf(dbgout, "tempBool2 = %d\n", tempBool2);
.LINE 539

	LD	A,(IX+-21)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,L__187
	PUSH	BC
	LD	BC,16449536
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  540			gfx_BlitBuffer();
.LINE 540

	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  541		}
L_256:
.LINE 541

	LD	A,(16056348)
	AND	A,64
	JR	Z,L_257
;  542	
;  543		gfx_End();
.LINE 543

	CALL	_gfx_End
;  544	}
.LINE 544

	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_floor                              IMPORT  -----   function
;_gfx_Sprite_NoClip                  IMPORT  -----   function
;_isTouching                         IMPORT  -----   function
;_gfx_TransparentSprite_NoClip       IMPORT  -----   function
;_gfx_GetSprite                      IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_gfx_SetTransparentColor            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_map5_compressed                    IMPORT    221   variable
;_map4_compressed                    IMPORT    187   variable
;_map3_compressed                    IMPORT    126   variable
;_map2_compressed                    IMPORT    239   variable
;_map1_compressed                    IMPORT    204   variable
;_sprintf                            IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_global_palette                     IMPORT    112   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_srand                              IMPORT  -----   function
;_hero                               STATIC      6   variable
;_gfx_FlipSpriteY                    IMPORT  -----   function
;_HeroJumpUpRight_compressed         IMPORT    134   variable
;_HeroJumpRight2_compressed          IMPORT    177   variable
;_HeroJumpRight1_compressed          IMPORT    138   variable
;_HeroJumpRight0_compressed          IMPORT    130   variable
;_HeroRight2_compressed              IMPORT    144   variable
;_HeroRight1_compressed              IMPORT    142   variable
;_HeroRight0_compressed              IMPORT    136   variable
;_HeroStill_compressed               IMPORT    115   variable
;_zx7_Decompress                     IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;heroJumpRight                       IX-114      9   variable
;heroRunRight                        IX-105      9   variable
;heroRunLeft                          IX-96      9   variable
;HeroLeft1                            IX-87      3   variable
;HeroLeft0                            IX-84      3   variable
;HeroLeft2                            IX-81      3   variable
;distance                             IX-78      4   variable
;HeroJumpLeft2                        IX-74      3   variable
;HeroJumpLeft1                        IX-71      3   variable
;HeroJumpLeft0                        IX-68      3   variable
;HeroRight0                           IX-65      3   variable
;prevkey                              IX-62      1   variable
;HeroStill                            IX-61      3   variable
;step                                 IX-58      3   variable
;HeroJumpUpLeft                       IX-55      3   variable
;HeroRight2                           IX-52      3   variable
;HeroRight1                           IX-49      3   variable
;G_3                                  IX-46      1   variable
;G_2                                  IX-45      1   variable
;G_1                                  IX-44      1   variable
;G_0                                  IX-43      1   variable
;HeroJumpRight1                       IX-42      3   variable
;HeroJumpRight0                       IX-39      3   variable
;HeroJumpUpRight                      IX-36      3   variable
;HeroJumpRight2                       IX-33      3   variable
;key                                  IX-30      1   variable
;map                                  IX-29      3   variable
;velocity                             IX-26      3   variable
;tempBool1                            IX-23      1   variable
;facingRight                          IX-22      1   variable
;tempBool2                            IX-21      1   variable
;isBoosted                            IX-20      1   variable
;doubleJumped                         IX-19      1   variable
;inLadder                             IX-18      1   variable
;keyIsReleased                        IX-17      1   variable
;behind_sprite                        IX-16      3   variable
;jumpingDir                           IX-13      3   variable
;ascending                            IX-10      1   variable
;mapNum                                IX-9      3   variable
;lastStill                             IX-6      6   variable


; Stack Frame Size: 120 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "main",544,"_main"
	SEGMENT STRSECT
L__6:
	DB	"Map1"
	DB	0
L__7:
	DB	"Map2"
	DB	0
L__8:
	DB	"Map3"
	DB	0
L__9:
	DB	"Map4"
	DB	0
L__10:
	DB	"Map5"
	DB	0
L__16:
	DB	"%d"
	DB	0
L__181:
	DB	"hero = (%d, %d)"
	DB	10,0
L__182:
	DB	"velocity = %d"
	DB	10,0
L__183:
	DB	"keyIsReleased = %d"
	DB	10,0
L__184:
	DB	"ascending = %d"
	DB	10,0
L__185:
	DB	"jumpingDir = %d"
	DB	10,0
L__186:
	DB	"tempBool1 = %d"
	DB	10,0
L__187:
	DB	"tempBool2 = %d"
	DB	10,0
	SEGMENT CODE
;  545	
;  546	bool isTouching(enum bodyParts part, bool checkForPad, int yVelocity, int xVelocity){
_isTouching:
.DEFINE "_isTouching"

.VALUE _isTouching

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "isTouching",546,"_isTouching"

.LINE 546

.DEFINE "part"

.CLASS 65

.VALUE 6

.TYPE 4

.ENDEF

.DEFINE "checkForPad"

.CLASS 65

.VALUE 9

.TYPE 12

.ENDEF

.DEFINE "yVelocity"

.CLASS 65

.VALUE 12

.TYPE 4

.ENDEF

.DEFINE "xVelocity"

.CLASS 65

.VALUE 15

.TYPE 4

.ENDEF

.DEFINE "f"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "check"

.CLASS 65

.VALUE -5

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	DEC	SP
	DEC	SP
;  547		int f;
;  548	
;  549		bool check;
;  550		check = true;
.LINE 550

	LD	(IX+-5),1
;  551		if(part == leftSide){
.LINE 551

	LD	HL,(IX+6)
	CALL	__icmpzero
	JR	NZ,L_296
;  552			for(f = 3; f <= 40; f += 3) {
.LINE 552

	LD	BC,3
	LD	(IX+-3),BC
	JR	L_264
L_262:
;  553				if(gfx_GetPixel(hero.x + 2 + xVelocity, hero.y + f + yVelocity) == 0 || hero.x + xVelocity == 0) return true;
.LINE 553

	LD	A,(_hero+3)
	LD	B,(IX+-3)
	ADD	A,B
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	IY,(_hero)
	LEA	HL,IY+2
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_261
	LD	BC,(IX+15)
	LD	HL,(_hero)
	ADD	HL,BC
	CALL	__icmpzero
	JR	NZ,L_263
L_261:
	LD	A,1
	JR	L_298
;  554			}
L_263:
.LINE 554

	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_264:
	LD	BC,(IX+-3)
	LD	HL,40
	OR	A,A
	SBC	HL,BC
	JP	P,L_262
	JR	L_297
;  555		}
;  556		else if(part == rightSide){
L_296:
.LINE 556

	LD	BC,1
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_294
;  557			for(f = 3; f <= 40; f += 3) {
.LINE 557

	LD	BC,3
	LD	(IX+-3),BC
	JR	L_269
L_267:
;  558				if(gfx_GetPixel(hero.x + 17 + xVelocity, hero.y + f + yVelocity) == 0 || hero.x + 20 + xVelocity== 320) return true;
.LINE 558

	LD	A,(_hero+3)
	LD	B,(IX+-3)
	ADD	A,B
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	IY,(_hero)
	LEA	HL,IY+17
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_266
	LD	IY,(_hero)
	LEA	HL,IY+20
	LD	BC,(IX+15)
	ADD	HL,BC
	LD	BC,320
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_268
L_266:
	LD	A,1
	JR	L_298
;  559			}
L_268:
.LINE 559

	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_269:
	LD	BC,(IX+-3)
	LD	HL,40
	OR	A,A
	SBC	HL,BC
	JP	P,L_267
	JR	L_297
;  560		}
;  561		else if(part == topHead){
L_294:
.LINE 561

	LD	BC,2
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_292
;  562			for(f = 3; f <= 16; f += 3) {
.LINE 562

	LD	BC,3
	LD	(IX+-3),BC
	JR	L_274
L_272:
;  563				if(gfx_GetPixel(hero.x + f + xVelocity, hero.y + yVelocity) == 0 || hero.y + yVelocity < 0) return true;
.LINE 563

	LD	A,(_hero+3)
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_271
	LD	BC,(IX+12)
	LD	HL,(_hero+3)
	ADD	HL,BC
	CALL	__icmpzero
	JP	P,L_273
L_271:
	LD	A,1
	JR	L_298
;  564			}
L_273:
.LINE 564

	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_274:
	LD	BC,(IX+-3)
	LD	HL,16
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_272
	JR	L_297
;  565		}
;  566		else if(part == bottomFeet && !checkForPad){
L_292:
.LINE 566

	LD	BC,3
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	Z,L__203
	LD	A,1
	JR	L__204
L__203:
	XOR	A,A
L__204:
	LD	(IX+-4),A
	OR	A,A
	JR	NZ,L_290
	LD	A,(IX+9)
	OR	A,A
	JR	NZ,L_290
;  567			for(f = 6; f <= 14; f += 3) {
.LINE 567

	LD	BC,6
	LD	(IX+-3),BC
	JR	L_281
L_279:
;  568				if(gfx_GetPixel(hero.x + f + xVelocity, hero.y + 40 + yVelocity) == 0 || hero.y + 41 + yVelocity > 240 || gfx_GetPixel(hero.x + f, hero.y + 41) == 3) return true;
.LINE 568

	LD	A,(_hero+3)
	ADD	A,40
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_278
	LD	IY,(_hero+3)
	LEA	HL,IY+41
	LD	BC,(IX+12)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,240
	OR	A,A
	SBC	HL,BC
	JP	M,L_278
	LD	A,(_hero+3)
	ADD	A,41
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	BC,3
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_280
L_278:
	LD	A,1
	JR	L_298
;  569			}
L_280:
.LINE 569

	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_281:
	LD	BC,(IX+-3)
	LD	HL,14
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_279
	JR	L_297
;  570		}
;  571		else if(part == bottomFeet && checkForPad){
L_290:
.LINE 571

	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_297
	LD	A,(IX+9)
	OR	A,A
	JR	Z,L_297
;  572			for(f = 6; f <= 14; f += 3) {
.LINE 572

	LD	BC,6
	LD	(IX+-3),BC
	JR	L_286
L_284:
;  573				if(gfx_GetPixel(hero.x + f + xVelocity, hero.y + 41 + yVelocity) != 3) check = false;
.LINE 573

	LD	A,(_hero+3)
	ADD	A,41
	LD	B,(IX+12)
	ADD	A,B
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-3)
	LD	HL,(_hero)
	ADD	HL,BC
	LD	BC,(IX+15)
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	LD	BC,3
	OR	A,A
	SBC	HL,BC
	JR	Z,L_285
	LD	(IX+-5),0
;  574			}
L_285:
.LINE 574

	LD	IY,(IX+-3)
	LEA	IY,IY+3
	LD	(IX+-3),IY
L_286:
	LD	BC,(IX+-3)
	LD	HL,14
	OR	A,A
	SBC	HL,BC
	JP	P,L_284
;  575			return check;
.LINE 575

	LD	A,(IX+-5)
	JR	L_298
;  576		}
L_297:
.LINE 576

;  577		return false;
.LINE 577

	XOR	A,A
L_298:
.LINE 578

	LD	SP,IX
	POP	IX
	RET	


;**************************** _isTouching ***************************
;Name                         Addr/Register   Size   Type
;_hero                               STATIC      6   variable
;_gfx_GetPixel                       IMPORT  -----   function
;check                                 IX-5      1   variable
;G_4                                   IX-4      1   variable
;f                                     IX-3      3   variable
;xVelocity                            IX+15      3   parameter
;yVelocity                            IX+12      3   parameter
;checkForPad                           IX+9      1   parameter
;part                                  IX+6      3   parameter


; Stack Frame Size: 23 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "isTouching",578,"_isTouching"
	XREF _map5_compressed:ROM
	XREF _map4_compressed:ROM
	XREF _map3_compressed:ROM
	XREF _map2_compressed:ROM
	XREF _map1_compressed:ROM
	XREF _HeroJumpUpRight_compressed:ROM
	XREF _HeroJumpRight2_compressed:ROM
	XREF _HeroJumpRight1_compressed:ROM
	XREF _HeroJumpRight0_compressed:ROM
	XREF _HeroRight2_compressed:ROM
	XREF _HeroRight1_compressed:ROM
	XREF _HeroRight0_compressed:ROM
	XREF _HeroStill_compressed:ROM
	XREF _global_palette:ROM
	XREF _zx7_Decompress:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_FlipSpriteY:ROM
	XREF _gfx_ScaledSprite_NoClip:ROM
	XREF _gfx_GetSprite:ROM
	XREF _gfx_TransparentSprite_NoClip:ROM
	XREF _gfx_Sprite_NoClip:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_GetPixel:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetTransparentColor:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _sprintf:ROM
	XREF _srand:ROM
	XREF _malloc:ROM
	XREF _floor:ROM
	XREF __idivs:ROM
	XREF __iremu:ROM
	XREF __fdiv:ROM
	XREF __ftol:ROM
	XREF __ltof:ROM
	XREF __itol:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XDEF _isTouching
	XDEF _main
	XDEF _hero
	END
